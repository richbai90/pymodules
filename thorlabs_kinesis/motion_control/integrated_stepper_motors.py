# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _integrated_stepper_motors
else:
    import _integrated_stepper_motors

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _integrated_stepper_motors.FT_OK
FT_InvalidHandle = _integrated_stepper_motors.FT_InvalidHandle
FT_DeviceNotFound = _integrated_stepper_motors.FT_DeviceNotFound
FT_DeviceNotOpened = _integrated_stepper_motors.FT_DeviceNotOpened
FT_IOError = _integrated_stepper_motors.FT_IOError
FT_InsufficientResources = _integrated_stepper_motors.FT_InsufficientResources
FT_InvalidParameter = _integrated_stepper_motors.FT_InvalidParameter
FT_DeviceNotPresent = _integrated_stepper_motors.FT_DeviceNotPresent
FT_IncorrectDevice = _integrated_stepper_motors.FT_IncorrectDevice
MOT_NotMotor = _integrated_stepper_motors.MOT_NotMotor
MOT_DCMotor = _integrated_stepper_motors.MOT_DCMotor
MOT_StepperMotor = _integrated_stepper_motors.MOT_StepperMotor
MOT_BrushlessMotor = _integrated_stepper_motors.MOT_BrushlessMotor
MOT_CustomMotor = _integrated_stepper_motors.MOT_CustomMotor
MOT_TravelModeUndefined = _integrated_stepper_motors.MOT_TravelModeUndefined
MOT_Linear = _integrated_stepper_motors.MOT_Linear
MOT_Rotational = _integrated_stepper_motors.MOT_Rotational
MOT_TravelDirectionUndefined = _integrated_stepper_motors.MOT_TravelDirectionUndefined
MOT_Forwards = _integrated_stepper_motors.MOT_Forwards
MOT_Reverse = _integrated_stepper_motors.MOT_Reverse
MOT_LimitSwitchDirectionUndefined = _integrated_stepper_motors.MOT_LimitSwitchDirectionUndefined
MOT_ReverseLimitSwitch = _integrated_stepper_motors.MOT_ReverseLimitSwitch
MOT_ForwardLimitSwitch = _integrated_stepper_motors.MOT_ForwardLimitSwitch
MOT_Normal = _integrated_stepper_motors.MOT_Normal
MOT_Backwards = _integrated_stepper_motors.MOT_Backwards
MOT_JogModeUndefined = _integrated_stepper_motors.MOT_JogModeUndefined
MOT_Continuous = _integrated_stepper_motors.MOT_Continuous
MOT_SingleStep = _integrated_stepper_motors.MOT_SingleStep
MOT_StopModeUndefined = _integrated_stepper_motors.MOT_StopModeUndefined
MOT_Immediate = _integrated_stepper_motors.MOT_Immediate
MOT_Profiled = _integrated_stepper_motors.MOT_Profiled
MOT_ButtonModeUndefined = _integrated_stepper_motors.MOT_ButtonModeUndefined
MOT_JogMode = _integrated_stepper_motors.MOT_JogMode
MOT_Preset = _integrated_stepper_motors.MOT_Preset
MOT_LimitSwitchModeUndefined = _integrated_stepper_motors.MOT_LimitSwitchModeUndefined
MOT_LimitSwitchIgnoreSwitch = _integrated_stepper_motors.MOT_LimitSwitchIgnoreSwitch
MOT_LimitSwitchMakeOnContact = _integrated_stepper_motors.MOT_LimitSwitchMakeOnContact
MOT_LimitSwitchBreakOnContact = _integrated_stepper_motors.MOT_LimitSwitchBreakOnContact
MOT_LimitSwitchMakeOnHome = _integrated_stepper_motors.MOT_LimitSwitchMakeOnHome
MOT_LimitSwitchBreakOnHome = _integrated_stepper_motors.MOT_LimitSwitchBreakOnHome
MOT_PMD_Reserved = _integrated_stepper_motors.MOT_PMD_Reserved
MOT_LimitSwitchIgnoreSwitchSwapped = _integrated_stepper_motors.MOT_LimitSwitchIgnoreSwitchSwapped
MOT_LimitSwitchMakeOnContactSwapped = _integrated_stepper_motors.MOT_LimitSwitchMakeOnContactSwapped
MOT_LimitSwitchBreakOnContactSwapped = _integrated_stepper_motors.MOT_LimitSwitchBreakOnContactSwapped
MOT_LimitSwitchMakeOnHomeSwapped = _integrated_stepper_motors.MOT_LimitSwitchMakeOnHomeSwapped
MOT_LimitSwitchBreakOnHomeSwapped = _integrated_stepper_motors.MOT_LimitSwitchBreakOnHomeSwapped
MOT_LimitSwitchSWModeUndefined = _integrated_stepper_motors.MOT_LimitSwitchSWModeUndefined
MOT_LimitSwitchIgnored = _integrated_stepper_motors.MOT_LimitSwitchIgnored
MOT_LimitSwitchStopImmediate = _integrated_stepper_motors.MOT_LimitSwitchStopImmediate
MOT_LimitSwitchStopProfiled = _integrated_stepper_motors.MOT_LimitSwitchStopProfiled
MOT_LimitSwitchIgnored_Rotational = _integrated_stepper_motors.MOT_LimitSwitchIgnored_Rotational
MOT_LimitSwitchStopImmediate_Rotational = _integrated_stepper_motors.MOT_LimitSwitchStopImmediate_Rotational
MOT_LimitSwitchStopProfiled_Rotational = _integrated_stepper_motors.MOT_LimitSwitchStopProfiled_Rotational
DisallowIllegalMoves = _integrated_stepper_motors.DisallowIllegalMoves
AllowPartialMoves = _integrated_stepper_motors.AllowPartialMoves
AllowAllMoves = _integrated_stepper_motors.AllowAllMoves
LinearRange = _integrated_stepper_motors.LinearRange
RotationalUnlimited = _integrated_stepper_motors.RotationalUnlimited
RotationalWrapping = _integrated_stepper_motors.RotationalWrapping
Quickest = _integrated_stepper_motors.Quickest
Forwards = _integrated_stepper_motors.Forwards
Reverse = _integrated_stepper_motors.Reverse
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_integrated_stepper_motors.TLI_DeviceInfo_typeID_get, _integrated_stepper_motors.TLI_DeviceInfo_typeID_set)
    description = property(_integrated_stepper_motors.TLI_DeviceInfo_description_get, _integrated_stepper_motors.TLI_DeviceInfo_description_set)
    serialNo = property(_integrated_stepper_motors.TLI_DeviceInfo_serialNo_get, _integrated_stepper_motors.TLI_DeviceInfo_serialNo_set)
    PID = property(_integrated_stepper_motors.TLI_DeviceInfo_PID_get, _integrated_stepper_motors.TLI_DeviceInfo_PID_set)
    isKnownType = property(_integrated_stepper_motors.TLI_DeviceInfo_isKnownType_get, _integrated_stepper_motors.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_integrated_stepper_motors.TLI_DeviceInfo_motorType_get, _integrated_stepper_motors.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_integrated_stepper_motors.TLI_DeviceInfo_isPiezoDevice_get, _integrated_stepper_motors.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_integrated_stepper_motors.TLI_DeviceInfo_isLaser_get, _integrated_stepper_motors.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_integrated_stepper_motors.TLI_DeviceInfo_isCustomType_get, _integrated_stepper_motors.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_integrated_stepper_motors.TLI_DeviceInfo_isRack_get, _integrated_stepper_motors.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_integrated_stepper_motors.TLI_DeviceInfo_maxChannels_get, _integrated_stepper_motors.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _integrated_stepper_motors.TLI_DeviceInfo_swiginit(self, _integrated_stepper_motors.new_TLI_DeviceInfo())
    __swig_destroy__ = _integrated_stepper_motors.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _integrated_stepper_motors:
_integrated_stepper_motors.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_integrated_stepper_motors.TLI_HardwareInformation_serialNumber_get, _integrated_stepper_motors.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_integrated_stepper_motors.TLI_HardwareInformation_modelNumber_get, _integrated_stepper_motors.TLI_HardwareInformation_modelNumber_set)
    type = property(_integrated_stepper_motors.TLI_HardwareInformation_type_get, _integrated_stepper_motors.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_integrated_stepper_motors.TLI_HardwareInformation_firmwareVersion_get, _integrated_stepper_motors.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_integrated_stepper_motors.TLI_HardwareInformation_notes_get, _integrated_stepper_motors.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_integrated_stepper_motors.TLI_HardwareInformation_deviceDependantData_get, _integrated_stepper_motors.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_integrated_stepper_motors.TLI_HardwareInformation_hardwareVersion_get, _integrated_stepper_motors.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_integrated_stepper_motors.TLI_HardwareInformation_modificationState_get, _integrated_stepper_motors.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_integrated_stepper_motors.TLI_HardwareInformation_numChannels_get, _integrated_stepper_motors.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _integrated_stepper_motors.TLI_HardwareInformation_swiginit(self, _integrated_stepper_motors.new_TLI_HardwareInformation())
    __swig_destroy__ = _integrated_stepper_motors.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _integrated_stepper_motors:
_integrated_stepper_motors.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
class MOT_VelocityParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    minVelocity = property(_integrated_stepper_motors.MOT_VelocityParameters_minVelocity_get, _integrated_stepper_motors.MOT_VelocityParameters_minVelocity_set)
    acceleration = property(_integrated_stepper_motors.MOT_VelocityParameters_acceleration_get, _integrated_stepper_motors.MOT_VelocityParameters_acceleration_set)
    maxVelocity = property(_integrated_stepper_motors.MOT_VelocityParameters_maxVelocity_get, _integrated_stepper_motors.MOT_VelocityParameters_maxVelocity_set)

    def __init__(self):
        _integrated_stepper_motors.MOT_VelocityParameters_swiginit(self, _integrated_stepper_motors.new_MOT_VelocityParameters())
    __swig_destroy__ = _integrated_stepper_motors.delete_MOT_VelocityParameters

# Register MOT_VelocityParameters in _integrated_stepper_motors:
_integrated_stepper_motors.MOT_VelocityParameters_swigregister(MOT_VelocityParameters)
class MOT_JogParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_integrated_stepper_motors.MOT_JogParameters_mode_get, _integrated_stepper_motors.MOT_JogParameters_mode_set)
    stepSize = property(_integrated_stepper_motors.MOT_JogParameters_stepSize_get, _integrated_stepper_motors.MOT_JogParameters_stepSize_set)
    velParams = property(_integrated_stepper_motors.MOT_JogParameters_velParams_get, _integrated_stepper_motors.MOT_JogParameters_velParams_set)
    stopMode = property(_integrated_stepper_motors.MOT_JogParameters_stopMode_get, _integrated_stepper_motors.MOT_JogParameters_stopMode_set)

    def __init__(self):
        _integrated_stepper_motors.MOT_JogParameters_swiginit(self, _integrated_stepper_motors.new_MOT_JogParameters())
    __swig_destroy__ = _integrated_stepper_motors.delete_MOT_JogParameters

# Register MOT_JogParameters in _integrated_stepper_motors:
_integrated_stepper_motors.MOT_JogParameters_swigregister(MOT_JogParameters)
class MOT_HomingParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    direction = property(_integrated_stepper_motors.MOT_HomingParameters_direction_get, _integrated_stepper_motors.MOT_HomingParameters_direction_set)
    limitSwitch = property(_integrated_stepper_motors.MOT_HomingParameters_limitSwitch_get, _integrated_stepper_motors.MOT_HomingParameters_limitSwitch_set)
    velocity = property(_integrated_stepper_motors.MOT_HomingParameters_velocity_get, _integrated_stepper_motors.MOT_HomingParameters_velocity_set)
    offsetDistance = property(_integrated_stepper_motors.MOT_HomingParameters_offsetDistance_get, _integrated_stepper_motors.MOT_HomingParameters_offsetDistance_set)

    def __init__(self):
        _integrated_stepper_motors.MOT_HomingParameters_swiginit(self, _integrated_stepper_motors.new_MOT_HomingParameters())
    __swig_destroy__ = _integrated_stepper_motors.delete_MOT_HomingParameters

# Register MOT_HomingParameters in _integrated_stepper_motors:
_integrated_stepper_motors.MOT_HomingParameters_swigregister(MOT_HomingParameters)
class MOT_LimitSwitchParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    clockwiseHardwareLimit = property(_integrated_stepper_motors.MOT_LimitSwitchParameters_clockwiseHardwareLimit_get, _integrated_stepper_motors.MOT_LimitSwitchParameters_clockwiseHardwareLimit_set)
    anticlockwiseHardwareLimit = property(_integrated_stepper_motors.MOT_LimitSwitchParameters_anticlockwiseHardwareLimit_get, _integrated_stepper_motors.MOT_LimitSwitchParameters_anticlockwiseHardwareLimit_set)
    clockwisePosition = property(_integrated_stepper_motors.MOT_LimitSwitchParameters_clockwisePosition_get, _integrated_stepper_motors.MOT_LimitSwitchParameters_clockwisePosition_set)
    anticlockwisePosition = property(_integrated_stepper_motors.MOT_LimitSwitchParameters_anticlockwisePosition_get, _integrated_stepper_motors.MOT_LimitSwitchParameters_anticlockwisePosition_set)
    softLimitMode = property(_integrated_stepper_motors.MOT_LimitSwitchParameters_softLimitMode_get, _integrated_stepper_motors.MOT_LimitSwitchParameters_softLimitMode_set)

    def __init__(self):
        _integrated_stepper_motors.MOT_LimitSwitchParameters_swiginit(self, _integrated_stepper_motors.new_MOT_LimitSwitchParameters())
    __swig_destroy__ = _integrated_stepper_motors.delete_MOT_LimitSwitchParameters

# Register MOT_LimitSwitchParameters in _integrated_stepper_motors:
_integrated_stepper_motors.MOT_LimitSwitchParameters_swigregister(MOT_LimitSwitchParameters)
class MOT_PowerParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    restPercentage = property(_integrated_stepper_motors.MOT_PowerParameters_restPercentage_get, _integrated_stepper_motors.MOT_PowerParameters_restPercentage_set)
    movePercentage = property(_integrated_stepper_motors.MOT_PowerParameters_movePercentage_get, _integrated_stepper_motors.MOT_PowerParameters_movePercentage_set)

    def __init__(self):
        _integrated_stepper_motors.MOT_PowerParameters_swiginit(self, _integrated_stepper_motors.new_MOT_PowerParameters())
    __swig_destroy__ = _integrated_stepper_motors.delete_MOT_PowerParameters

# Register MOT_PowerParameters in _integrated_stepper_motors:
_integrated_stepper_motors.MOT_PowerParameters_swigregister(MOT_PowerParameters)
class MOT_ButtonParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    buttonMode = property(_integrated_stepper_motors.MOT_ButtonParameters_buttonMode_get, _integrated_stepper_motors.MOT_ButtonParameters_buttonMode_set)
    leftButtonPosition = property(_integrated_stepper_motors.MOT_ButtonParameters_leftButtonPosition_get, _integrated_stepper_motors.MOT_ButtonParameters_leftButtonPosition_set)
    rightButtonPosition = property(_integrated_stepper_motors.MOT_ButtonParameters_rightButtonPosition_get, _integrated_stepper_motors.MOT_ButtonParameters_rightButtonPosition_set)
    timeout = property(_integrated_stepper_motors.MOT_ButtonParameters_timeout_get, _integrated_stepper_motors.MOT_ButtonParameters_timeout_set)
    unused = property(_integrated_stepper_motors.MOT_ButtonParameters_unused_get, _integrated_stepper_motors.MOT_ButtonParameters_unused_set)

    def __init__(self):
        _integrated_stepper_motors.MOT_ButtonParameters_swiginit(self, _integrated_stepper_motors.new_MOT_ButtonParameters())
    __swig_destroy__ = _integrated_stepper_motors.delete_MOT_ButtonParameters

# Register MOT_ButtonParameters in _integrated_stepper_motors:
_integrated_stepper_motors.MOT_ButtonParameters_swigregister(MOT_ButtonParameters)
class MOT_PotentiometerStep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thresholdDeflection = property(_integrated_stepper_motors.MOT_PotentiometerStep_thresholdDeflection_get, _integrated_stepper_motors.MOT_PotentiometerStep_thresholdDeflection_set)
    velocity = property(_integrated_stepper_motors.MOT_PotentiometerStep_velocity_get, _integrated_stepper_motors.MOT_PotentiometerStep_velocity_set)

    def __init__(self):
        _integrated_stepper_motors.MOT_PotentiometerStep_swiginit(self, _integrated_stepper_motors.new_MOT_PotentiometerStep())
    __swig_destroy__ = _integrated_stepper_motors.delete_MOT_PotentiometerStep

# Register MOT_PotentiometerStep in _integrated_stepper_motors:
_integrated_stepper_motors.MOT_PotentiometerStep_swigregister(MOT_PotentiometerStep)
class MOT_PotentiometerSteps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    potentiometerStepParameters = property(_integrated_stepper_motors.MOT_PotentiometerSteps_potentiometerStepParameters_get, _integrated_stepper_motors.MOT_PotentiometerSteps_potentiometerStepParameters_set)

    def __init__(self):
        _integrated_stepper_motors.MOT_PotentiometerSteps_swiginit(self, _integrated_stepper_motors.new_MOT_PotentiometerSteps())
    __swig_destroy__ = _integrated_stepper_motors.delete_MOT_PotentiometerSteps

# Register MOT_PotentiometerSteps in _integrated_stepper_motors:
_integrated_stepper_motors.MOT_PotentiometerSteps_swigregister(MOT_PotentiometerSteps)

def TLI_BuildDeviceList():
    return _integrated_stepper_motors.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _integrated_stepper_motors.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _integrated_stepper_motors.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _integrated_stepper_motors.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _integrated_stepper_motors.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _integrated_stepper_motors.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _integrated_stepper_motors.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _integrated_stepper_motors.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _integrated_stepper_motors.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _integrated_stepper_motors.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _integrated_stepper_motors.TLI_UninitializeSimulations()

def ISC_Open(serialNo):
    return _integrated_stepper_motors.ISC_Open(serialNo)

def ISC_Close(serialNo):
    return _integrated_stepper_motors.ISC_Close(serialNo)

def ISC_CheckConnection(serialNo):
    return _integrated_stepper_motors.ISC_CheckConnection(serialNo)

def ISC_Identify(serialNo):
    return _integrated_stepper_motors.ISC_Identify(serialNo)

def ISC_GetLEDswitches(serialNo):
    return _integrated_stepper_motors.ISC_GetLEDswitches(serialNo)

def ISC_SetLEDswitches(serialNo, LEDswitches):
    return _integrated_stepper_motors.ISC_SetLEDswitches(serialNo, LEDswitches)

def ISC_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _integrated_stepper_motors.ISC_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def ISC_GetHardwareInfoBlock(serialNo, hardwareInfo):
    return _integrated_stepper_motors.ISC_GetHardwareInfoBlock(serialNo, hardwareInfo)

def ISC_GetFirmwareVersion(serialNo):
    return _integrated_stepper_motors.ISC_GetFirmwareVersion(serialNo)

def ISC_GetSoftwareVersion(serialNo):
    return _integrated_stepper_motors.ISC_GetSoftwareVersion(serialNo)

def ISC_SetCalibrationFile(serialNo, filename, enabled):
    return _integrated_stepper_motors.ISC_SetCalibrationFile(serialNo, filename, enabled)

def ISC_IsCalibrationActive(serialNo):
    return _integrated_stepper_motors.ISC_IsCalibrationActive(serialNo)

def ISC_GetCalibrationFile(serialNo, filename, sizeOfBuffer):
    return _integrated_stepper_motors.ISC_GetCalibrationFile(serialNo, filename, sizeOfBuffer)

def ISC_LoadSettings(serialNo):
    return _integrated_stepper_motors.ISC_LoadSettings(serialNo)

def ISC_LoadNamedSettings(serialNo, settingsName):
    return _integrated_stepper_motors.ISC_LoadNamedSettings(serialNo, settingsName)

def ISC_PersistSettings(serialNo):
    return _integrated_stepper_motors.ISC_PersistSettings(serialNo)

def ISC_ResetStageToDefaults(serialNo):
    return _integrated_stepper_motors.ISC_ResetStageToDefaults(serialNo)

def ISC_DisableChannel(serialNo):
    return _integrated_stepper_motors.ISC_DisableChannel(serialNo)

def ISC_EnableChannel(serialNo):
    return _integrated_stepper_motors.ISC_EnableChannel(serialNo)

def ISC_GetNumberPositions(serialNo):
    return _integrated_stepper_motors.ISC_GetNumberPositions(serialNo)

def ISC_MoveToPosition(serialNo, index):
    return _integrated_stepper_motors.ISC_MoveToPosition(serialNo, index)

def ISC_GetPosition(serialNo):
    return _integrated_stepper_motors.ISC_GetPosition(serialNo)

def ISC_CanHome(serialNo):
    return _integrated_stepper_motors.ISC_CanHome(serialNo)

def ISC_NeedsHoming(serialNo):
    return _integrated_stepper_motors.ISC_NeedsHoming(serialNo)

def ISC_CanMoveWithoutHomingFirst(serialNo):
    return _integrated_stepper_motors.ISC_CanMoveWithoutHomingFirst(serialNo)

def ISC_Home(serialNo):
    return _integrated_stepper_motors.ISC_Home(serialNo)

def ISC_ClearMessageQueue(serialNo):
    return _integrated_stepper_motors.ISC_ClearMessageQueue(serialNo)

def ISC_RegisterMessageCallback(serialNo, functionPointer):
    return _integrated_stepper_motors.ISC_RegisterMessageCallback(serialNo, functionPointer)

def ISC_MessageQueueSize(serialNo):
    return _integrated_stepper_motors.ISC_MessageQueueSize(serialNo)

def ISC_GetNextMessage(serialNo, messageType, messageID, messageData):
    return _integrated_stepper_motors.ISC_GetNextMessage(serialNo, messageType, messageID, messageData)

def ISC_WaitForMessage(serialNo, messageType, messageID, messageData):
    return _integrated_stepper_motors.ISC_WaitForMessage(serialNo, messageType, messageID, messageData)

def ISC_RequestHomingParams(serialNo):
    return _integrated_stepper_motors.ISC_RequestHomingParams(serialNo)

def ISC_GetHomingVelocity(serialNo):
    return _integrated_stepper_motors.ISC_GetHomingVelocity(serialNo)

def ISC_SetHomingVelocity(serialNo, velocity):
    return _integrated_stepper_motors.ISC_SetHomingVelocity(serialNo, velocity)

def ISC_MoveRelative(serialNo, displacement):
    return _integrated_stepper_motors.ISC_MoveRelative(serialNo, displacement)

def ISC_RequestJogParams(serialNo):
    return _integrated_stepper_motors.ISC_RequestJogParams(serialNo)

def ISC_GetJogMode(serialNo, mode, stopMode):
    return _integrated_stepper_motors.ISC_GetJogMode(serialNo, mode, stopMode)

def ISC_SetJogMode(serialNo, mode, stopMode):
    return _integrated_stepper_motors.ISC_SetJogMode(serialNo, mode, stopMode)

def ISC_GetJogStepSize(serialNo):
    return _integrated_stepper_motors.ISC_GetJogStepSize(serialNo)

def ISC_SetJogStepSize(serialNo, stepSize):
    return _integrated_stepper_motors.ISC_SetJogStepSize(serialNo, stepSize)

def ISC_GetJogVelParams(serialNo, acceleration, maxVelocity):
    return _integrated_stepper_motors.ISC_GetJogVelParams(serialNo, acceleration, maxVelocity)

def ISC_SetJogVelParams(serialNo, acceleration, maxVelocity):
    return _integrated_stepper_motors.ISC_SetJogVelParams(serialNo, acceleration, maxVelocity)

def ISC_MoveJog(serialNo, jogDirection):
    return _integrated_stepper_motors.ISC_MoveJog(serialNo, jogDirection)

def ISC_RequestVelParams(serialNo):
    return _integrated_stepper_motors.ISC_RequestVelParams(serialNo)

def ISC_GetVelParams(serialNo, acceleration, maxVelocity):
    return _integrated_stepper_motors.ISC_GetVelParams(serialNo, acceleration, maxVelocity)

def ISC_SetVelParams(serialNo, acceleration, maxVelocity):
    return _integrated_stepper_motors.ISC_SetVelParams(serialNo, acceleration, maxVelocity)

def ISC_MoveAtVelocity(serialNo, direction):
    return _integrated_stepper_motors.ISC_MoveAtVelocity(serialNo, direction)

def ISC_SetDirection(serialNo, reverse):
    return _integrated_stepper_motors.ISC_SetDirection(serialNo, reverse)

def ISC_StopImmediate(serialNo):
    return _integrated_stepper_motors.ISC_StopImmediate(serialNo)

def ISC_StopProfiled(serialNo):
    return _integrated_stepper_motors.ISC_StopProfiled(serialNo)

def ISC_RequestBacklash(serialNo):
    return _integrated_stepper_motors.ISC_RequestBacklash(serialNo)

def ISC_GetBacklash(serialNo):
    return _integrated_stepper_motors.ISC_GetBacklash(serialNo)

def ISC_SetBacklash(serialNo, distance):
    return _integrated_stepper_motors.ISC_SetBacklash(serialNo, distance)

def ISC_GetPositionCounter(serialNo):
    return _integrated_stepper_motors.ISC_GetPositionCounter(serialNo)

def ISC_SetPositionCounter(serialNo, count):
    return _integrated_stepper_motors.ISC_SetPositionCounter(serialNo, count)

def ISC_RequestLimitSwitchParams(serialNo):
    return _integrated_stepper_motors.ISC_RequestLimitSwitchParams(serialNo)

def ISC_GetLimitSwitchParams(serialNo, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode):
    return _integrated_stepper_motors.ISC_GetLimitSwitchParams(serialNo, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode)

def ISC_SetLimitSwitchParams(serialNo, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode):
    return _integrated_stepper_motors.ISC_SetLimitSwitchParams(serialNo, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode)

def ISC_GetSoftLimitMode(serialNo):
    return _integrated_stepper_motors.ISC_GetSoftLimitMode(serialNo)

def ISC_SetLimitsSoftwareApproachPolicy(serialNo, limitsSoftwareApproachPolicy):
    return _integrated_stepper_motors.ISC_SetLimitsSoftwareApproachPolicy(serialNo, limitsSoftwareApproachPolicy)

def ISC_RequestButtonParams(serialNo):
    return _integrated_stepper_motors.ISC_RequestButtonParams(serialNo)

def ISC_GetButtonParams(serialNo, buttonMode, leftButtonPosition, rightButtonPosition, timeout):
    return _integrated_stepper_motors.ISC_GetButtonParams(serialNo, buttonMode, leftButtonPosition, rightButtonPosition, timeout)

def ISC_SetButtonParams(serialNo, buttonMode, leftButtonPosition, rightButtonPosition):
    return _integrated_stepper_motors.ISC_SetButtonParams(serialNo, buttonMode, leftButtonPosition, rightButtonPosition)

def ISC_RequestPotentiometerParams(serialNo):
    return _integrated_stepper_motors.ISC_RequestPotentiometerParams(serialNo)

def ISC_GetPotentiometerParams(serialNo, index, thresholdDeflection, velocity):
    return _integrated_stepper_motors.ISC_GetPotentiometerParams(serialNo, index, thresholdDeflection, velocity)

def ISC_SetPotentiometerParams(serialNo, index, thresholdDeflection, velocity):
    return _integrated_stepper_motors.ISC_SetPotentiometerParams(serialNo, index, thresholdDeflection, velocity)

def ISC_GetVelParamsBlock(serialNo, velocityParams):
    return _integrated_stepper_motors.ISC_GetVelParamsBlock(serialNo, velocityParams)

def ISC_SetVelParamsBlock(serialNo, velocityParams):
    return _integrated_stepper_motors.ISC_SetVelParamsBlock(serialNo, velocityParams)

def ISC_SetMoveAbsolutePosition(serialNo, position):
    return _integrated_stepper_motors.ISC_SetMoveAbsolutePosition(serialNo, position)

def ISC_RequestMoveAbsolutePosition(serialNo):
    return _integrated_stepper_motors.ISC_RequestMoveAbsolutePosition(serialNo)

def ISC_GetMoveAbsolutePosition(serialNo):
    return _integrated_stepper_motors.ISC_GetMoveAbsolutePosition(serialNo)

def ISC_MoveAbsolute(serialNo):
    return _integrated_stepper_motors.ISC_MoveAbsolute(serialNo)

def ISC_SetMoveRelativeDistance(serialNo, distance):
    return _integrated_stepper_motors.ISC_SetMoveRelativeDistance(serialNo, distance)

def ISC_RequestMoveRelativeDistance(serialNo):
    return _integrated_stepper_motors.ISC_RequestMoveRelativeDistance(serialNo)

def ISC_GetMoveRelativeDistance(serialNo):
    return _integrated_stepper_motors.ISC_GetMoveRelativeDistance(serialNo)

def ISC_MoveRelativeDistance(serialNo):
    return _integrated_stepper_motors.ISC_MoveRelativeDistance(serialNo)

def ISC_GetHomingParamsBlock(serialNo, homingParams):
    return _integrated_stepper_motors.ISC_GetHomingParamsBlock(serialNo, homingParams)

def ISC_SetHomingParamsBlock(serialNo, homingParams):
    return _integrated_stepper_motors.ISC_SetHomingParamsBlock(serialNo, homingParams)

def ISC_GetJogParamsBlock(serialNo, jogParams):
    return _integrated_stepper_motors.ISC_GetJogParamsBlock(serialNo, jogParams)

def ISC_SetJogParamsBlock(serialNo, jogParams):
    return _integrated_stepper_motors.ISC_SetJogParamsBlock(serialNo, jogParams)

def ISC_GetLimitSwitchParamsBlock(serialNo, limitSwitchParams):
    return _integrated_stepper_motors.ISC_GetLimitSwitchParamsBlock(serialNo, limitSwitchParams)

def ISC_SetLimitSwitchParamsBlock(serialNo, limitSwitchParams):
    return _integrated_stepper_motors.ISC_SetLimitSwitchParamsBlock(serialNo, limitSwitchParams)

def ISC_GetButtonParamsBlock(serialNo, buttonParams):
    return _integrated_stepper_motors.ISC_GetButtonParamsBlock(serialNo, buttonParams)

def ISC_SetButtonParamsBlock(serialNo, buttonParams):
    return _integrated_stepper_motors.ISC_SetButtonParamsBlock(serialNo, buttonParams)

def ISC_GetPotentiometerParamsBlock(serialNo, potentiometerSteps):
    return _integrated_stepper_motors.ISC_GetPotentiometerParamsBlock(serialNo, potentiometerSteps)

def ISC_SetPotentiometerParamsBlock(serialNo, potentiometerSteps):
    return _integrated_stepper_motors.ISC_SetPotentiometerParamsBlock(serialNo, potentiometerSteps)

def ISC_RequestPowerParams(serialNo):
    return _integrated_stepper_motors.ISC_RequestPowerParams(serialNo)

def ISC_GetPowerParams(serialNo, powerParams):
    return _integrated_stepper_motors.ISC_GetPowerParams(serialNo, powerParams)

def ISC_SetPowerParams(serialNo, powerParams):
    return _integrated_stepper_motors.ISC_SetPowerParams(serialNo, powerParams)

def ISC_RequestBowIndex(serialNo):
    return _integrated_stepper_motors.ISC_RequestBowIndex(serialNo)

def ISC_GetBowIndex(serialNo):
    return _integrated_stepper_motors.ISC_GetBowIndex(serialNo)

def ISC_SetBowIndex(serialNo, bowIndex):
    return _integrated_stepper_motors.ISC_SetBowIndex(serialNo, bowIndex)

def ISC_RequestTriggerSwitches(serialNo):
    return _integrated_stepper_motors.ISC_RequestTriggerSwitches(serialNo)

def ISC_GetTriggerSwitches(serialNo):
    return _integrated_stepper_motors.ISC_GetTriggerSwitches(serialNo)

def ISC_SetTriggerSwitches(serialNo, indicatorBits):
    return _integrated_stepper_motors.ISC_SetTriggerSwitches(serialNo, indicatorBits)

def ISC_RequestPosition(serialNo):
    return _integrated_stepper_motors.ISC_RequestPosition(serialNo)

def ISC_RequestStatusBits(serialNo):
    return _integrated_stepper_motors.ISC_RequestStatusBits(serialNo)

def ISC_RequestStatus(serialNo):
    return _integrated_stepper_motors.ISC_RequestStatus(serialNo)

def ISC_GetStatusBits(serialNo):
    return _integrated_stepper_motors.ISC_GetStatusBits(serialNo)

def ISC_StartPolling(serialNo, milliseconds):
    return _integrated_stepper_motors.ISC_StartPolling(serialNo, milliseconds)

def ISC_PollingDuration(serialNo):
    return _integrated_stepper_motors.ISC_PollingDuration(serialNo)

def ISC_StopPolling(serialNo):
    return _integrated_stepper_motors.ISC_StopPolling(serialNo)

def ISC_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS):
    return _integrated_stepper_motors.ISC_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS)

def ISC_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout):
    return _integrated_stepper_motors.ISC_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout)

def ISC_HasLastMsgTimerOverrun(serialNo):
    return _integrated_stepper_motors.ISC_HasLastMsgTimerOverrun(serialNo)

def ISC_RequestSettings(serialNo):
    return _integrated_stepper_motors.ISC_RequestSettings(serialNo)

def ISC_GetStageAxisMinPos(serialNo):
    return _integrated_stepper_motors.ISC_GetStageAxisMinPos(serialNo)

def ISC_GetStageAxisMaxPos(serialNo):
    return _integrated_stepper_motors.ISC_GetStageAxisMaxPos(serialNo)

def ISC_SetStageAxisLimits(serialNo, minPosition, maxPosition):
    return _integrated_stepper_motors.ISC_SetStageAxisLimits(serialNo, minPosition, maxPosition)

def ISC_SetMotorTravelMode(serialNo, travelMode):
    return _integrated_stepper_motors.ISC_SetMotorTravelMode(serialNo, travelMode)

def ISC_GetMotorTravelMode(serialNo):
    return _integrated_stepper_motors.ISC_GetMotorTravelMode(serialNo)

def ISC_SetMotorParams(serialNo, stepsPerRev, gearBoxRatio, pitch):
    return _integrated_stepper_motors.ISC_SetMotorParams(serialNo, stepsPerRev, gearBoxRatio, pitch)

def ISC_GetMotorParams(serialNo, stepsPerRev, gearBoxRatio, pitch):
    return _integrated_stepper_motors.ISC_GetMotorParams(serialNo, stepsPerRev, gearBoxRatio, pitch)

def ISC_SetMotorParamsExt(serialNo, stepsPerRev, gearBoxRatio, pitch):
    return _integrated_stepper_motors.ISC_SetMotorParamsExt(serialNo, stepsPerRev, gearBoxRatio, pitch)

def ISC_GetMotorParamsExt(serialNo, stepsPerRev, gearBoxRatio, pitch):
    return _integrated_stepper_motors.ISC_GetMotorParamsExt(serialNo, stepsPerRev, gearBoxRatio, pitch)

def ISC_SetMotorVelocityLimits(serialNo, maxVelocity, maxAcceleration):
    return _integrated_stepper_motors.ISC_SetMotorVelocityLimits(serialNo, maxVelocity, maxAcceleration)

def ISC_GetMotorVelocityLimits(serialNo, maxVelocity, maxAcceleration):
    return _integrated_stepper_motors.ISC_GetMotorVelocityLimits(serialNo, maxVelocity, maxAcceleration)

def ISC_ResetRotationModes(serialNo):
    return _integrated_stepper_motors.ISC_ResetRotationModes(serialNo)

def ISC_SetRotationModes(serialNo, mode, direction):
    return _integrated_stepper_motors.ISC_SetRotationModes(serialNo, mode, direction)

def ISC_SetMotorTravelLimits(serialNo, minPosition, maxPosition):
    return _integrated_stepper_motors.ISC_SetMotorTravelLimits(serialNo, minPosition, maxPosition)

def ISC_GetMotorTravelLimits(serialNo, minPosition, maxPosition):
    return _integrated_stepper_motors.ISC_GetMotorTravelLimits(serialNo, minPosition, maxPosition)

def ISC_GetRealValueFromDeviceUnit(serialNo, device_unit, real_unit, unitType):
    return _integrated_stepper_motors.ISC_GetRealValueFromDeviceUnit(serialNo, device_unit, real_unit, unitType)

def ISC_GetDeviceUnitFromRealValue(serialNo, real_unit, device_unit, unitType):
    return _integrated_stepper_motors.ISC_GetDeviceUnitFromRealValue(serialNo, real_unit, device_unit, unitType)

