# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _position_readout_encoder
else:
    import _position_readout_encoder

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _position_readout_encoder.FT_OK
FT_InvalidHandle = _position_readout_encoder.FT_InvalidHandle
FT_DeviceNotFound = _position_readout_encoder.FT_DeviceNotFound
FT_DeviceNotOpened = _position_readout_encoder.FT_DeviceNotOpened
FT_IOError = _position_readout_encoder.FT_IOError
FT_InsufficientResources = _position_readout_encoder.FT_InsufficientResources
FT_InvalidParameter = _position_readout_encoder.FT_InvalidParameter
FT_DeviceNotPresent = _position_readout_encoder.FT_DeviceNotPresent
FT_IncorrectDevice = _position_readout_encoder.FT_IncorrectDevice
MOT_NotMotor = _position_readout_encoder.MOT_NotMotor
MOT_DCMotor = _position_readout_encoder.MOT_DCMotor
MOT_StepperMotor = _position_readout_encoder.MOT_StepperMotor
MOT_BrushlessMotor = _position_readout_encoder.MOT_BrushlessMotor
MOT_CustomMotor = _position_readout_encoder.MOT_CustomMotor
ENC_On = _position_readout_encoder.ENC_On
ENC_Off = _position_readout_encoder.ENC_Off
ENC_DirNormal = _position_readout_encoder.ENC_DirNormal
ENC_DirInverted = _position_readout_encoder.ENC_DirInverted
ENC_OriNormal = _position_readout_encoder.ENC_OriNormal
ENC_OriInverted = _position_readout_encoder.ENC_OriInverted
ENC_MM = _position_readout_encoder.ENC_MM
ENC_INCH = _position_readout_encoder.ENC_INCH
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_position_readout_encoder.TLI_DeviceInfo_typeID_get, _position_readout_encoder.TLI_DeviceInfo_typeID_set)
    description = property(_position_readout_encoder.TLI_DeviceInfo_description_get, _position_readout_encoder.TLI_DeviceInfo_description_set)
    serialNo = property(_position_readout_encoder.TLI_DeviceInfo_serialNo_get, _position_readout_encoder.TLI_DeviceInfo_serialNo_set)
    PID = property(_position_readout_encoder.TLI_DeviceInfo_PID_get, _position_readout_encoder.TLI_DeviceInfo_PID_set)
    isKnownType = property(_position_readout_encoder.TLI_DeviceInfo_isKnownType_get, _position_readout_encoder.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_position_readout_encoder.TLI_DeviceInfo_motorType_get, _position_readout_encoder.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_position_readout_encoder.TLI_DeviceInfo_isPiezoDevice_get, _position_readout_encoder.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_position_readout_encoder.TLI_DeviceInfo_isLaser_get, _position_readout_encoder.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_position_readout_encoder.TLI_DeviceInfo_isCustomType_get, _position_readout_encoder.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_position_readout_encoder.TLI_DeviceInfo_isRack_get, _position_readout_encoder.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_position_readout_encoder.TLI_DeviceInfo_maxChannels_get, _position_readout_encoder.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _position_readout_encoder.TLI_DeviceInfo_swiginit(self, _position_readout_encoder.new_TLI_DeviceInfo())
    __swig_destroy__ = _position_readout_encoder.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _position_readout_encoder:
_position_readout_encoder.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_position_readout_encoder.TLI_HardwareInformation_serialNumber_get, _position_readout_encoder.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_position_readout_encoder.TLI_HardwareInformation_modelNumber_get, _position_readout_encoder.TLI_HardwareInformation_modelNumber_set)
    type = property(_position_readout_encoder.TLI_HardwareInformation_type_get, _position_readout_encoder.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_position_readout_encoder.TLI_HardwareInformation_firmwareVersion_get, _position_readout_encoder.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_position_readout_encoder.TLI_HardwareInformation_notes_get, _position_readout_encoder.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_position_readout_encoder.TLI_HardwareInformation_deviceDependantData_get, _position_readout_encoder.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_position_readout_encoder.TLI_HardwareInformation_hardwareVersion_get, _position_readout_encoder.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_position_readout_encoder.TLI_HardwareInformation_modificationState_get, _position_readout_encoder.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_position_readout_encoder.TLI_HardwareInformation_numChannels_get, _position_readout_encoder.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _position_readout_encoder.TLI_HardwareInformation_swiginit(self, _position_readout_encoder.new_TLI_HardwareInformation())
    __swig_destroy__ = _position_readout_encoder.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _position_readout_encoder:
_position_readout_encoder.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
class TLI_DevParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    params = property(_position_readout_encoder.TLI_DevParams_params_get, _position_readout_encoder.TLI_DevParams_params_set)

    def __init__(self):
        _position_readout_encoder.TLI_DevParams_swiginit(self, _position_readout_encoder.new_TLI_DevParams())
    __swig_destroy__ = _position_readout_encoder.delete_TLI_DevParams

# Register TLI_DevParams in _position_readout_encoder:
_position_readout_encoder.TLI_DevParams_swigregister(TLI_DevParams)
class ENC_DisplayParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    displayBacklight = property(_position_readout_encoder.ENC_DisplayParams_displayBacklight_get, _position_readout_encoder.ENC_DisplayParams_displayBacklight_set)
    directionalSense = property(_position_readout_encoder.ENC_DisplayParams_directionalSense_get, _position_readout_encoder.ENC_DisplayParams_directionalSense_set)
    displayOrientation = property(_position_readout_encoder.ENC_DisplayParams_displayOrientation_get, _position_readout_encoder.ENC_DisplayParams_displayOrientation_set)
    displayUnit = property(_position_readout_encoder.ENC_DisplayParams_displayUnit_get, _position_readout_encoder.ENC_DisplayParams_displayUnit_set)
    reserved1 = property(_position_readout_encoder.ENC_DisplayParams_reserved1_get, _position_readout_encoder.ENC_DisplayParams_reserved1_set)
    reserved2 = property(_position_readout_encoder.ENC_DisplayParams_reserved2_get, _position_readout_encoder.ENC_DisplayParams_reserved2_set)
    reserved3 = property(_position_readout_encoder.ENC_DisplayParams_reserved3_get, _position_readout_encoder.ENC_DisplayParams_reserved3_set)
    reserved4 = property(_position_readout_encoder.ENC_DisplayParams_reserved4_get, _position_readout_encoder.ENC_DisplayParams_reserved4_set)

    def __init__(self):
        _position_readout_encoder.ENC_DisplayParams_swiginit(self, _position_readout_encoder.new_ENC_DisplayParams())
    __swig_destroy__ = _position_readout_encoder.delete_ENC_DisplayParams

# Register ENC_DisplayParams in _position_readout_encoder:
_position_readout_encoder.ENC_DisplayParams_swigregister(ENC_DisplayParams)

def TLI_BuildDeviceList():
    return _position_readout_encoder.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _position_readout_encoder.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _position_readout_encoder.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _position_readout_encoder.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _position_readout_encoder.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _position_readout_encoder.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _position_readout_encoder.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _position_readout_encoder.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _position_readout_encoder.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _position_readout_encoder.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _position_readout_encoder.TLI_UninitializeSimulations()

def EN_Open(serialNo):
    return _position_readout_encoder.EN_Open(serialNo)

def EN_Close(serialNo):
    return _position_readout_encoder.EN_Close(serialNo)

def EN_CheckConnection(serialNo):
    return _position_readout_encoder.EN_CheckConnection(serialNo)

def EN_Identify(serialNo):
    return _position_readout_encoder.EN_Identify(serialNo)

def EN_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _position_readout_encoder.EN_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def EN_GetHardwareInfoBlock(serialNo, hardwareInfo):
    return _position_readout_encoder.EN_GetHardwareInfoBlock(serialNo, hardwareInfo)

def EN_GetFirmwareVersion(serialNo):
    return _position_readout_encoder.EN_GetFirmwareVersion(serialNo)

def EN_GetSoftwareVersion(serialNo):
    return _position_readout_encoder.EN_GetSoftwareVersion(serialNo)

def EN_LoadSettings(serialNo):
    return _position_readout_encoder.EN_LoadSettings(serialNo)

def EN_LoadNamedSettings(serialNo, settingsName):
    return _position_readout_encoder.EN_LoadNamedSettings(serialNo, settingsName)

def EN_PersistSettings(serialNo):
    return _position_readout_encoder.EN_PersistSettings(serialNo)

def EN_ResetParameters(serialNo):
    return _position_readout_encoder.EN_ResetParameters(serialNo)

def EN_GetPosition(serialNo):
    return _position_readout_encoder.EN_GetPosition(serialNo)

def EN_RequestPosition(serialNo):
    return _position_readout_encoder.EN_RequestPosition(serialNo)

def EN_SetZero(serialNo):
    return _position_readout_encoder.EN_SetZero(serialNo)

def EN_RequestCalibrate(serialNo):
    return _position_readout_encoder.EN_RequestCalibrate(serialNo)

def EN_GetCalibrateStatus(serialNo):
    return _position_readout_encoder.EN_GetCalibrateStatus(serialNo)

def EN_RequestDisplayParams(serialNo):
    return _position_readout_encoder.EN_RequestDisplayParams(serialNo)

def EN_GetDisplayParams(serialNo, dispBacklight, directionalSense, dispOrientation, dispUnit):
    return _position_readout_encoder.EN_GetDisplayParams(serialNo, dispBacklight, directionalSense, dispOrientation, dispUnit)

def EN_SetDisplayParams(serialNo, dispBacklight, directionalSense, dispOrientation, dispUnit):
    return _position_readout_encoder.EN_SetDisplayParams(serialNo, dispBacklight, directionalSense, dispOrientation, dispUnit)

def EN_GetDisplayParamsBlock(serialNo, params):
    return _position_readout_encoder.EN_GetDisplayParamsBlock(serialNo, params)

def EN_SetDisplayParamsBlock(serialNo, params):
    return _position_readout_encoder.EN_SetDisplayParamsBlock(serialNo, params)

def EN_ClearMessageQueue(serialNo):
    return _position_readout_encoder.EN_ClearMessageQueue(serialNo)

def EN_RegisterMessageCallback(serialNo, functionPointer):
    return _position_readout_encoder.EN_RegisterMessageCallback(serialNo, functionPointer)

def EN_MessageQueueSize(serialNo):
    return _position_readout_encoder.EN_MessageQueueSize(serialNo)

def EN_GetNextMessage(serialNo, messageType, messageID, messageData):
    return _position_readout_encoder.EN_GetNextMessage(serialNo, messageType, messageID, messageData)

def EN_WaitForMessage(serialNo, messageType, messageID, messageData):
    return _position_readout_encoder.EN_WaitForMessage(serialNo, messageType, messageID, messageData)

def EN_StartPolling(serialNo, milliseconds):
    return _position_readout_encoder.EN_StartPolling(serialNo, milliseconds)

def EN_PollingDuration(serialNo):
    return _position_readout_encoder.EN_PollingDuration(serialNo)

def EN_StopPolling(serialNo):
    return _position_readout_encoder.EN_StopPolling(serialNo)

def EN_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS):
    return _position_readout_encoder.EN_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS)

def EN_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout):
    return _position_readout_encoder.EN_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout)

def EN_HasLastMsgTimerOverrun(serialNo):
    return _position_readout_encoder.EN_HasLastMsgTimerOverrun(serialNo)

def EN_RequestSettings(serialNo):
    return _position_readout_encoder.EN_RequestSettings(serialNo)

def XXX_RequestDevParams(serialNo):
    return _position_readout_encoder.XXX_RequestDevParams(serialNo)

def XXX_GetDevParams(serialNo, devParams):
    return _position_readout_encoder.XXX_GetDevParams(serialNo, devParams)

def XXX_SetDevParams(serialNo, devParams):
    return _position_readout_encoder.XXX_SetDevParams(serialNo, devParams)

