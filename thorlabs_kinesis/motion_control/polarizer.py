# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _polarizer
else:
    import _polarizer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _polarizer.FT_OK
FT_InvalidHandle = _polarizer.FT_InvalidHandle
FT_DeviceNotFound = _polarizer.FT_DeviceNotFound
FT_DeviceNotOpened = _polarizer.FT_DeviceNotOpened
FT_IOError = _polarizer.FT_IOError
FT_InsufficientResources = _polarizer.FT_InsufficientResources
FT_InvalidParameter = _polarizer.FT_InvalidParameter
FT_DeviceNotPresent = _polarizer.FT_DeviceNotPresent
FT_IncorrectDevice = _polarizer.FT_IncorrectDevice
MOT_NotMotor = _polarizer.MOT_NotMotor
MOT_DCMotor = _polarizer.MOT_DCMotor
MOT_StepperMotor = _polarizer.MOT_StepperMotor
MOT_BrushlessMotor = _polarizer.MOT_BrushlessMotor
MOT_CustomMotor = _polarizer.MOT_CustomMotor
paddle1 = _polarizer.paddle1
paddle2 = _polarizer.paddle2
paddle3 = _polarizer.paddle3
_None = _polarizer._None
PaddleBit1 = _polarizer.PaddleBit1
PaddleBit2 = _polarizer.PaddleBit2
PaddleBit4 = _polarizer.PaddleBit4
AllPaddles = _polarizer.AllPaddles
class PolarizerParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Velocity = property(_polarizer.PolarizerParameters_Velocity_get, _polarizer.PolarizerParameters_Velocity_set)
    HomePosition = property(_polarizer.PolarizerParameters_HomePosition_get, _polarizer.PolarizerParameters_HomePosition_set)
    JogSize1 = property(_polarizer.PolarizerParameters_JogSize1_get, _polarizer.PolarizerParameters_JogSize1_set)
    JogSize2 = property(_polarizer.PolarizerParameters_JogSize2_get, _polarizer.PolarizerParameters_JogSize2_set)
    JogSize3 = property(_polarizer.PolarizerParameters_JogSize3_get, _polarizer.PolarizerParameters_JogSize3_set)

    def __init__(self):
        _polarizer.PolarizerParameters_swiginit(self, _polarizer.new_PolarizerParameters())
    __swig_destroy__ = _polarizer.delete_PolarizerParameters

# Register PolarizerParameters in _polarizer:
_polarizer.PolarizerParameters_swigregister(PolarizerParameters)
MOT_TravelDirectionDisabled = _polarizer.MOT_TravelDirectionDisabled
MOT_Forwards = _polarizer.MOT_Forwards
MOT_Reverse = _polarizer.MOT_Reverse
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_polarizer.TLI_DeviceInfo_typeID_get, _polarizer.TLI_DeviceInfo_typeID_set)
    description = property(_polarizer.TLI_DeviceInfo_description_get, _polarizer.TLI_DeviceInfo_description_set)
    serialNo = property(_polarizer.TLI_DeviceInfo_serialNo_get, _polarizer.TLI_DeviceInfo_serialNo_set)
    PID = property(_polarizer.TLI_DeviceInfo_PID_get, _polarizer.TLI_DeviceInfo_PID_set)
    isKnownType = property(_polarizer.TLI_DeviceInfo_isKnownType_get, _polarizer.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_polarizer.TLI_DeviceInfo_motorType_get, _polarizer.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_polarizer.TLI_DeviceInfo_isPiezoDevice_get, _polarizer.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_polarizer.TLI_DeviceInfo_isLaser_get, _polarizer.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_polarizer.TLI_DeviceInfo_isCustomType_get, _polarizer.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_polarizer.TLI_DeviceInfo_isRack_get, _polarizer.TLI_DeviceInfo_isRack_set)
    maxPaddles = property(_polarizer.TLI_DeviceInfo_maxPaddles_get, _polarizer.TLI_DeviceInfo_maxPaddles_set)

    def __init__(self):
        _polarizer.TLI_DeviceInfo_swiginit(self, _polarizer.new_TLI_DeviceInfo())
    __swig_destroy__ = _polarizer.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _polarizer:
_polarizer.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_polarizer.TLI_HardwareInformation_serialNumber_get, _polarizer.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_polarizer.TLI_HardwareInformation_modelNumber_get, _polarizer.TLI_HardwareInformation_modelNumber_set)
    type = property(_polarizer.TLI_HardwareInformation_type_get, _polarizer.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_polarizer.TLI_HardwareInformation_firmwareVersion_get, _polarizer.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_polarizer.TLI_HardwareInformation_notes_get, _polarizer.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_polarizer.TLI_HardwareInformation_deviceDependantData_get, _polarizer.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_polarizer.TLI_HardwareInformation_hardwareVersion_get, _polarizer.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_polarizer.TLI_HardwareInformation_modificationState_get, _polarizer.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_polarizer.TLI_HardwareInformation_numChannels_get, _polarizer.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _polarizer.TLI_HardwareInformation_swiginit(self, _polarizer.new_TLI_HardwareInformation())
    __swig_destroy__ = _polarizer.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _polarizer:
_polarizer.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
MPC_ToggleOnPositiveEdge = _polarizer.MPC_ToggleOnPositiveEdge
MPC_SetPositionOnPositiveEdge = _polarizer.MPC_SetPositionOnPositiveEdge
MPC_OutputHighAtSetPosition = _polarizer.MPC_OutputHighAtSetPosition
MPC_OutputHighWhemMoving = _polarizer.MPC_OutputHighWhemMoving
MPC_InputButton = _polarizer.MPC_InputButton
MPC_InputLogic = _polarizer.MPC_InputLogic
MPC_InputSwap = _polarizer.MPC_InputSwap
MPC_OutputLevel = _polarizer.MPC_OutputLevel
MPC_OutputPulse = _polarizer.MPC_OutputPulse
MPC_OutputSwap = _polarizer.MPC_OutputSwap
class MPC_IOSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    transitTime = property(_polarizer.MPC_IOSettings_transitTime_get, _polarizer.MPC_IOSettings_transitTime_set)
    ADCspeedValue = property(_polarizer.MPC_IOSettings_ADCspeedValue_get, _polarizer.MPC_IOSettings_ADCspeedValue_set)
    digIO1OperMode = property(_polarizer.MPC_IOSettings_digIO1OperMode_get, _polarizer.MPC_IOSettings_digIO1OperMode_set)
    digIO1SignalMode = property(_polarizer.MPC_IOSettings_digIO1SignalMode_get, _polarizer.MPC_IOSettings_digIO1SignalMode_set)
    digIO1PulseWidth = property(_polarizer.MPC_IOSettings_digIO1PulseWidth_get, _polarizer.MPC_IOSettings_digIO1PulseWidth_set)
    digIO2OperMode = property(_polarizer.MPC_IOSettings_digIO2OperMode_get, _polarizer.MPC_IOSettings_digIO2OperMode_set)
    digIO2SignalMode = property(_polarizer.MPC_IOSettings_digIO2SignalMode_get, _polarizer.MPC_IOSettings_digIO2SignalMode_set)
    digIO2PulseWidth = property(_polarizer.MPC_IOSettings_digIO2PulseWidth_get, _polarizer.MPC_IOSettings_digIO2PulseWidth_set)
    reserved1 = property(_polarizer.MPC_IOSettings_reserved1_get, _polarizer.MPC_IOSettings_reserved1_set)
    reserved2 = property(_polarizer.MPC_IOSettings_reserved2_get, _polarizer.MPC_IOSettings_reserved2_set)

    def __init__(self):
        _polarizer.MPC_IOSettings_swiginit(self, _polarizer.new_MPC_IOSettings())
    __swig_destroy__ = _polarizer.delete_MPC_IOSettings

# Register MPC_IOSettings in _polarizer:
_polarizer.MPC_IOSettings_swigregister(MPC_IOSettings)

def TLI_BuildDeviceList():
    return _polarizer.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _polarizer.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _polarizer.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _polarizer.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _polarizer.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _polarizer.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _polarizer.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _polarizer.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _polarizer.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _polarizer.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _polarizer.TLI_UninitializeSimulations()

def MPC_Open(serialNo):
    return _polarizer.MPC_Open(serialNo)

def MPC_Close(serialNo):
    return _polarizer.MPC_Close(serialNo)

def MPC_CheckConnection(serialNo):
    return _polarizer.MPC_CheckConnection(serialNo)

def MPC_Identify(serialNo):
    return _polarizer.MPC_Identify(serialNo)

def MPC_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numchannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _polarizer.MPC_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numchannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def MPC_GetFirmwareVersion(serialNo):
    return _polarizer.MPC_GetFirmwareVersion(serialNo)

def MPC_GetSoftwareVersion(serialNo):
    return _polarizer.MPC_GetSoftwareVersion(serialNo)

def MPC_LoadSettings(serialNo):
    return _polarizer.MPC_LoadSettings(serialNo)

def MPC_LoadNamedSettings(serialNo, settingsName):
    return _polarizer.MPC_LoadNamedSettings(serialNo, settingsName)

def MPC_PersistSettings(serialNo):
    return _polarizer.MPC_PersistSettings(serialNo)

def MPC_ResetParameters(serialNo):
    return _polarizer.MPC_ResetParameters(serialNo)

def MPC_GetPaddleCount(serialNo):
    return _polarizer.MPC_GetPaddleCount(serialNo)

def MPC_GetEnabledPaddles(serialNo):
    return _polarizer.MPC_GetEnabledPaddles(serialNo)

def MPC_IsPaddleEnabled(serialNo, paddle):
    return _polarizer.MPC_IsPaddleEnabled(serialNo, paddle)

def MPC_SetEnabledPaddles(serialNo, paddles):
    return _polarizer.MPC_SetEnabledPaddles(serialNo, paddles)

def MPC_GetMaxTravel(serialNo):
    return _polarizer.MPC_GetMaxTravel(serialNo)

def MPC_GetStepsPerDegree(serialNo):
    return _polarizer.MPC_GetStepsPerDegree(serialNo)

def MPC_Home(serialNo, paddle):
    return _polarizer.MPC_Home(serialNo, paddle)

def MPC_MoveToPosition(serialNo, paddle, position):
    return _polarizer.MPC_MoveToPosition(serialNo, paddle, position)

def MPC_Stop(serialNo, paddle):
    return _polarizer.MPC_Stop(serialNo, paddle)

def MPC_Jog(serialNo, paddle, direction):
    return _polarizer.MPC_Jog(serialNo, paddle, direction)

def MPC_MoveRelative(serialNo, paddle, position):
    return _polarizer.MPC_MoveRelative(serialNo, paddle, position)

def MPC_GetPosition(serialNo, paddle):
    return _polarizer.MPC_GetPosition(serialNo, paddle)

def MPC_RequestPolParams(serialNo):
    return _polarizer.MPC_RequestPolParams(serialNo)

def MPC_GetPolParams(serialNo, polParams):
    return _polarizer.MPC_GetPolParams(serialNo, polParams)

def MPC_SetPolParams(serialNo, polParams):
    return _polarizer.MPC_SetPolParams(serialNo, polParams)

def MPC_SetJogSize(serialNo, paddle, jogSize):
    return _polarizer.MPC_SetJogSize(serialNo, paddle, jogSize)

def MPC_GetJogSize(serialNo, paddle):
    return _polarizer.MPC_GetJogSize(serialNo, paddle)

def MPC_SetHomeOffset(serialNo, homeOffset):
    return _polarizer.MPC_SetHomeOffset(serialNo, homeOffset)

def MPC_GetHomeOffset(serialNo):
    return _polarizer.MPC_GetHomeOffset(serialNo)

def MPC_SetVelocity(serialNo, velocity):
    return _polarizer.MPC_SetVelocity(serialNo, velocity)

def MPC_GetVelocity(serialNo):
    return _polarizer.MPC_GetVelocity(serialNo)

def MPC_RequestStatus(serialNo):
    return _polarizer.MPC_RequestStatus(serialNo)

def MPC_GetStatusBits(serialNo, paddle):
    return _polarizer.MPC_GetStatusBits(serialNo, paddle)

def MPC_StartPolling(serialNo, milliseconds):
    return _polarizer.MPC_StartPolling(serialNo, milliseconds)

def MPC_PollingDuration(serialNo):
    return _polarizer.MPC_PollingDuration(serialNo)

def MPC_StopPolling(serialNo):
    return _polarizer.MPC_StopPolling(serialNo)

def MPC_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS):
    return _polarizer.MPC_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS)

def MPC_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout):
    return _polarizer.MPC_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout)

def MPC_HasLastMsgTimerOverrun(serialNo):
    return _polarizer.MPC_HasLastMsgTimerOverrun(serialNo)

def MPC_RequestSettings(serialNo):
    return _polarizer.MPC_RequestSettings(serialNo)

def MPC_ClearMessageQueue(serialNo):
    return _polarizer.MPC_ClearMessageQueue(serialNo)

def MPC_RegisterMessageCallback(serialNo, functionPointer):
    return _polarizer.MPC_RegisterMessageCallback(serialNo, functionPointer)

def MPC_MessageQueueSize(serialNo):
    return _polarizer.MPC_MessageQueueSize(serialNo)

def MPC_GetNextMessage(serialNo, messageType, messageID, messageData):
    return _polarizer.MPC_GetNextMessage(serialNo, messageType, messageID, messageData)

def MPC_WaitForMessage(serialNo, messageType, messageID, messageData):
    return _polarizer.MPC_WaitForMessage(serialNo, messageType, messageID, messageData)

