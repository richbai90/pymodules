# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _integrated_precision_piezo
else:
    import _integrated_precision_piezo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _integrated_precision_piezo.FT_OK
FT_InvalidHandle = _integrated_precision_piezo.FT_InvalidHandle
FT_DeviceNotFound = _integrated_precision_piezo.FT_DeviceNotFound
FT_DeviceNotOpened = _integrated_precision_piezo.FT_DeviceNotOpened
FT_IOError = _integrated_precision_piezo.FT_IOError
FT_InsufficientResources = _integrated_precision_piezo.FT_InsufficientResources
FT_InvalidParameter = _integrated_precision_piezo.FT_InvalidParameter
FT_DeviceNotPresent = _integrated_precision_piezo.FT_DeviceNotPresent
FT_IncorrectDevice = _integrated_precision_piezo.FT_IncorrectDevice
MOT_NotMotor = _integrated_precision_piezo.MOT_NotMotor
MOT_DCMotor = _integrated_precision_piezo.MOT_DCMotor
MOT_StepperMotor = _integrated_precision_piezo.MOT_StepperMotor
MOT_BrushlessMotor = _integrated_precision_piezo.MOT_BrushlessMotor
MOT_CustomMotor = _integrated_precision_piezo.MOT_CustomMotor
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_integrated_precision_piezo.TLI_DeviceInfo_typeID_get, _integrated_precision_piezo.TLI_DeviceInfo_typeID_set)
    description = property(_integrated_precision_piezo.TLI_DeviceInfo_description_get, _integrated_precision_piezo.TLI_DeviceInfo_description_set)
    serialNo = property(_integrated_precision_piezo.TLI_DeviceInfo_serialNo_get, _integrated_precision_piezo.TLI_DeviceInfo_serialNo_set)
    PID = property(_integrated_precision_piezo.TLI_DeviceInfo_PID_get, _integrated_precision_piezo.TLI_DeviceInfo_PID_set)
    isKnownType = property(_integrated_precision_piezo.TLI_DeviceInfo_isKnownType_get, _integrated_precision_piezo.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_integrated_precision_piezo.TLI_DeviceInfo_motorType_get, _integrated_precision_piezo.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_integrated_precision_piezo.TLI_DeviceInfo_isPiezoDevice_get, _integrated_precision_piezo.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_integrated_precision_piezo.TLI_DeviceInfo_isLaser_get, _integrated_precision_piezo.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_integrated_precision_piezo.TLI_DeviceInfo_isCustomType_get, _integrated_precision_piezo.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_integrated_precision_piezo.TLI_DeviceInfo_isRack_get, _integrated_precision_piezo.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_integrated_precision_piezo.TLI_DeviceInfo_maxChannels_get, _integrated_precision_piezo.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _integrated_precision_piezo.TLI_DeviceInfo_swiginit(self, _integrated_precision_piezo.new_TLI_DeviceInfo())
    __swig_destroy__ = _integrated_precision_piezo.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _integrated_precision_piezo:
_integrated_precision_piezo.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_integrated_precision_piezo.TLI_HardwareInformation_serialNumber_get, _integrated_precision_piezo.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_integrated_precision_piezo.TLI_HardwareInformation_modelNumber_get, _integrated_precision_piezo.TLI_HardwareInformation_modelNumber_set)
    type = property(_integrated_precision_piezo.TLI_HardwareInformation_type_get, _integrated_precision_piezo.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_integrated_precision_piezo.TLI_HardwareInformation_firmwareVersion_get, _integrated_precision_piezo.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_integrated_precision_piezo.TLI_HardwareInformation_notes_get, _integrated_precision_piezo.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_integrated_precision_piezo.TLI_HardwareInformation_deviceDependantData_get, _integrated_precision_piezo.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_integrated_precision_piezo.TLI_HardwareInformation_hardwareVersion_get, _integrated_precision_piezo.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_integrated_precision_piezo.TLI_HardwareInformation_modificationState_get, _integrated_precision_piezo.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_integrated_precision_piezo.TLI_HardwareInformation_numChannels_get, _integrated_precision_piezo.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _integrated_precision_piezo.TLI_HardwareInformation_swiginit(self, _integrated_precision_piezo.new_TLI_HardwareInformation())
    __swig_destroy__ = _integrated_precision_piezo.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _integrated_precision_piezo:
_integrated_precision_piezo.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
PZ_Undefined = _integrated_precision_piezo.PZ_Undefined
PZ_OpenLoop = _integrated_precision_piezo.PZ_OpenLoop
PZ_CloseLoop = _integrated_precision_piezo.PZ_CloseLoop
PZ_OpenLoopSmooth = _integrated_precision_piezo.PZ_OpenLoopSmooth
PZ_CloseLoopSmooth = _integrated_precision_piezo.PZ_CloseLoopSmooth
PZ_SoftwareOnly = _integrated_precision_piezo.PZ_SoftwareOnly
PZ_ExternalSignal = _integrated_precision_piezo.PZ_ExternalSignal
PZ_Potentiometer = _integrated_precision_piezo.PZ_Potentiometer
PZ_All = _integrated_precision_piezo.PZ_All
PZ_Continuous = _integrated_precision_piezo.PZ_Continuous
PZ_Fixed = _integrated_precision_piezo.PZ_Fixed
PZ_OutputTrigEnable = _integrated_precision_piezo.PZ_OutputTrigEnable
PZ_InputTrigEnable = _integrated_precision_piezo.PZ_InputTrigEnable
PZ_OutputTrigSenseHigh = _integrated_precision_piezo.PZ_OutputTrigSenseHigh
PZ_InputTrigSenseHigh = _integrated_precision_piezo.PZ_InputTrigSenseHigh
PZ_OutputGated = _integrated_precision_piezo.PZ_OutputGated
PZ_OutputTrigRepeat = _integrated_precision_piezo.PZ_OutputTrigRepeat
DerivFilterOn = _integrated_precision_piezo.DerivFilterOn
DerivFilterOff = _integrated_precision_piezo.DerivFilterOff
NotchFilterOn = _integrated_precision_piezo.NotchFilterOn
NotchFilterOff = _integrated_precision_piezo.NotchFilterOff
NotchFilter1 = _integrated_precision_piezo.NotchFilter1
NotchFilter2 = _integrated_precision_piezo.NotchFilter2
NotchFilterBoth = _integrated_precision_piezo.NotchFilterBoth
SWOnly = _integrated_precision_piezo.SWOnly
ExtBNC = _integrated_precision_piezo.ExtBNC
Joystick = _integrated_precision_piezo.Joystick
JoystickBnc = _integrated_precision_piezo.JoystickBnc
HV = _integrated_precision_piezo.HV
PosRaw = _integrated_precision_piezo.PosRaw
PosCorrected = _integrated_precision_piezo.PosCorrected
OP_Unfiltered = _integrated_precision_piezo.OP_Unfiltered
OP_200Hz = _integrated_precision_piezo.OP_200Hz
StrainGauge = _integrated_precision_piezo.StrainGauge
Capacitive = _integrated_precision_piezo.Capacitive
Optical = _integrated_precision_piezo.Optical
NonInverted = _integrated_precision_piezo.NonInverted
Inverted = _integrated_precision_piezo.Inverted
Bright = _integrated_precision_piezo.Bright
Dim = _integrated_precision_piezo.Dim
Off = _integrated_precision_piezo.Off
class PPC_PIDConsts(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PIDConstsP = property(_integrated_precision_piezo.PPC_PIDConsts_PIDConstsP_get, _integrated_precision_piezo.PPC_PIDConsts_PIDConstsP_set)
    PIDConstsI = property(_integrated_precision_piezo.PPC_PIDConsts_PIDConstsI_get, _integrated_precision_piezo.PPC_PIDConsts_PIDConstsI_set)
    PIDConstsD = property(_integrated_precision_piezo.PPC_PIDConsts_PIDConstsD_get, _integrated_precision_piezo.PPC_PIDConsts_PIDConstsD_set)
    PIDConstsDFc = property(_integrated_precision_piezo.PPC_PIDConsts_PIDConstsDFc_get, _integrated_precision_piezo.PPC_PIDConsts_PIDConstsDFc_set)
    PIDDerivFilterOn = property(_integrated_precision_piezo.PPC_PIDConsts_PIDDerivFilterOn_get, _integrated_precision_piezo.PPC_PIDConsts_PIDDerivFilterOn_set)
    PIDIndex = property(_integrated_precision_piezo.PPC_PIDConsts_PIDIndex_get, _integrated_precision_piezo.PPC_PIDConsts_PIDIndex_set)

    def __init__(self):
        _integrated_precision_piezo.PPC_PIDConsts_swiginit(self, _integrated_precision_piezo.new_PPC_PIDConsts())
    __swig_destroy__ = _integrated_precision_piezo.delete_PPC_PIDConsts

# Register PPC_PIDConsts in _integrated_precision_piezo:
_integrated_precision_piezo.PPC_PIDConsts_swigregister(PPC_PIDConsts)
class PPC_PIDCriteria(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    criteriaID = property(_integrated_precision_piezo.PPC_PIDCriteria_criteriaID_get, _integrated_precision_piezo.PPC_PIDCriteria_criteriaID_set)
    unusedByte = property(_integrated_precision_piezo.PPC_PIDCriteria_unusedByte_get, _integrated_precision_piezo.PPC_PIDCriteria_unusedByte_set)
    PIDConstIndex = property(_integrated_precision_piezo.PPC_PIDCriteria_PIDConstIndex_get, _integrated_precision_piezo.PPC_PIDCriteria_PIDConstIndex_set)
    priority = property(_integrated_precision_piezo.PPC_PIDCriteria_priority_get, _integrated_precision_piezo.PPC_PIDCriteria_priority_set)
    targetErrorWindow = property(_integrated_precision_piezo.PPC_PIDCriteria_targetErrorWindow_get, _integrated_precision_piezo.PPC_PIDCriteria_targetErrorWindow_set)
    wReservedPar1 = property(_integrated_precision_piezo.PPC_PIDCriteria_wReservedPar1_get, _integrated_precision_piezo.PPC_PIDCriteria_wReservedPar1_set)
    wReservedPar2 = property(_integrated_precision_piezo.PPC_PIDCriteria_wReservedPar2_get, _integrated_precision_piezo.PPC_PIDCriteria_wReservedPar2_set)
    wReservedPar3 = property(_integrated_precision_piezo.PPC_PIDCriteria_wReservedPar3_get, _integrated_precision_piezo.PPC_PIDCriteria_wReservedPar3_set)

    def __init__(self):
        _integrated_precision_piezo.PPC_PIDCriteria_swiginit(self, _integrated_precision_piezo.new_PPC_PIDCriteria())
    __swig_destroy__ = _integrated_precision_piezo.delete_PPC_PIDCriteria

# Register PPC_PIDCriteria in _integrated_precision_piezo:
_integrated_precision_piezo.PPC_PIDCriteria_swigregister(PPC_PIDCriteria)
class PPC_NotchParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filterNo = property(_integrated_precision_piezo.PPC_NotchParams_filterNo_get, _integrated_precision_piezo.PPC_NotchParams_filterNo_set)
    filter1Fc = property(_integrated_precision_piezo.PPC_NotchParams_filter1Fc_get, _integrated_precision_piezo.PPC_NotchParams_filter1Fc_set)
    filter1Q = property(_integrated_precision_piezo.PPC_NotchParams_filter1Q_get, _integrated_precision_piezo.PPC_NotchParams_filter1Q_set)
    notchFilter1On = property(_integrated_precision_piezo.PPC_NotchParams_notchFilter1On_get, _integrated_precision_piezo.PPC_NotchParams_notchFilter1On_set)
    filter2Fc = property(_integrated_precision_piezo.PPC_NotchParams_filter2Fc_get, _integrated_precision_piezo.PPC_NotchParams_filter2Fc_set)
    filter2Q = property(_integrated_precision_piezo.PPC_NotchParams_filter2Q_get, _integrated_precision_piezo.PPC_NotchParams_filter2Q_set)
    notchFilter2On = property(_integrated_precision_piezo.PPC_NotchParams_notchFilter2On_get, _integrated_precision_piezo.PPC_NotchParams_notchFilter2On_set)

    def __init__(self):
        _integrated_precision_piezo.PPC_NotchParams_swiginit(self, _integrated_precision_piezo.new_PPC_NotchParams())
    __swig_destroy__ = _integrated_precision_piezo.delete_PPC_NotchParams

# Register PPC_NotchParams in _integrated_precision_piezo:
_integrated_precision_piezo.PPC_NotchParams_swigregister(PPC_NotchParams)
KSG_TrigDisabled = _integrated_precision_piezo.KSG_TrigDisabled
KSG_TrigIn_GPI = _integrated_precision_piezo.KSG_TrigIn_GPI
KSG_TrigOut_GPO = _integrated_precision_piezo.KSG_TrigOut_GPO
KSG_TrigOut_LessThanLowerLimit = _integrated_precision_piezo.KSG_TrigOut_LessThanLowerLimit
KSG_TrigOut_MoreThanLowerLimit = _integrated_precision_piezo.KSG_TrigOut_MoreThanLowerLimit
KSG_TrigOut_LessThanUpperLimit = _integrated_precision_piezo.KSG_TrigOut_LessThanUpperLimit
KSG_TrigOut_MoreThanUpperLimit = _integrated_precision_piezo.KSG_TrigOut_MoreThanUpperLimit
KSG_TrigOut_BetweenLimits = _integrated_precision_piezo.KSG_TrigOut_BetweenLimits
KSG_TrigOut_OutsideLimits = _integrated_precision_piezo.KSG_TrigOut_OutsideLimits
KSG_TrigPolarityHigh = _integrated_precision_piezo.KSG_TrigPolarityHigh
KSG_TrigPolarityLow = _integrated_precision_piezo.KSG_TrigPolarityLow
class PPC_IOSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    controlSrc = property(_integrated_precision_piezo.PPC_IOSettings_controlSrc_get, _integrated_precision_piezo.PPC_IOSettings_controlSrc_set)
    monitorOPSig = property(_integrated_precision_piezo.PPC_IOSettings_monitorOPSig_get, _integrated_precision_piezo.PPC_IOSettings_monitorOPSig_set)
    monitorOPBandwidth = property(_integrated_precision_piezo.PPC_IOSettings_monitorOPBandwidth_get, _integrated_precision_piezo.PPC_IOSettings_monitorOPBandwidth_set)
    feedbackSrc = property(_integrated_precision_piezo.PPC_IOSettings_feedbackSrc_get, _integrated_precision_piezo.PPC_IOSettings_feedbackSrc_set)
    FPBrightness = property(_integrated_precision_piezo.PPC_IOSettings_FPBrightness_get, _integrated_precision_piezo.PPC_IOSettings_FPBrightness_set)
    feedbackPolarity = property(_integrated_precision_piezo.PPC_IOSettings_feedbackPolarity_get, _integrated_precision_piezo.PPC_IOSettings_feedbackPolarity_set)

    def __init__(self):
        _integrated_precision_piezo.PPC_IOSettings_swiginit(self, _integrated_precision_piezo.new_PPC_IOSettings())
    __swig_destroy__ = _integrated_precision_piezo.delete_PPC_IOSettings

# Register PPC_IOSettings in _integrated_precision_piezo:
_integrated_precision_piezo.PPC_IOSettings_swigregister(PPC_IOSettings)
class KSG_TriggerConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Trigger1Mode = property(_integrated_precision_piezo.KSG_TriggerConfig_Trigger1Mode_get, _integrated_precision_piezo.KSG_TriggerConfig_Trigger1Mode_set)
    Trigger1Polarity = property(_integrated_precision_piezo.KSG_TriggerConfig_Trigger1Polarity_get, _integrated_precision_piezo.KSG_TriggerConfig_Trigger1Polarity_set)
    Trigger2Mode = property(_integrated_precision_piezo.KSG_TriggerConfig_Trigger2Mode_get, _integrated_precision_piezo.KSG_TriggerConfig_Trigger2Mode_set)
    Trigger2Polarity = property(_integrated_precision_piezo.KSG_TriggerConfig_Trigger2Polarity_get, _integrated_precision_piezo.KSG_TriggerConfig_Trigger2Polarity_set)
    LowerLimit = property(_integrated_precision_piezo.KSG_TriggerConfig_LowerLimit_get, _integrated_precision_piezo.KSG_TriggerConfig_LowerLimit_set)
    UpperLimit = property(_integrated_precision_piezo.KSG_TriggerConfig_UpperLimit_get, _integrated_precision_piezo.KSG_TriggerConfig_UpperLimit_set)
    SmoothingSamples = property(_integrated_precision_piezo.KSG_TriggerConfig_SmoothingSamples_get, _integrated_precision_piezo.KSG_TriggerConfig_SmoothingSamples_set)
    reserved = property(_integrated_precision_piezo.KSG_TriggerConfig_reserved_get, _integrated_precision_piezo.KSG_TriggerConfig_reserved_set)

    def __init__(self):
        _integrated_precision_piezo.KSG_TriggerConfig_swiginit(self, _integrated_precision_piezo.new_KSG_TriggerConfig())
    __swig_destroy__ = _integrated_precision_piezo.delete_KSG_TriggerConfig

# Register KSG_TriggerConfig in _integrated_precision_piezo:
_integrated_precision_piezo.KSG_TriggerConfig_swigregister(KSG_TriggerConfig)
KPZ_WM_MoveAtVoltage = _integrated_precision_piezo.KPZ_WM_MoveAtVoltage
KPZ_WM_JogVoltage = _integrated_precision_piezo.KPZ_WM_JogVoltage
KPZ_WM_SetVoltage = _integrated_precision_piezo.KPZ_WM_SetVoltage
KPZ_WM_High = _integrated_precision_piezo.KPZ_WM_High
KPZ_WM_Medium = _integrated_precision_piezo.KPZ_WM_Medium
KPZ_WM_Low = _integrated_precision_piezo.KPZ_WM_Low
KPZ_WM_Positive = _integrated_precision_piezo.KPZ_WM_Positive
KPZ_WM_Negative = _integrated_precision_piezo.KPZ_WM_Negative

def IPP_Open(serialNo):
    return _integrated_precision_piezo.IPP_Open(serialNo)

def IPP_Close(serialNo):
    return _integrated_precision_piezo.IPP_Close(serialNo)

def IPP_CheckConnection(serialNo):
    return _integrated_precision_piezo.IPP_CheckConnection(serialNo)

def IPP_Identify(serialNo):
    return _integrated_precision_piezo.IPP_Identify(serialNo)

def IPP_Disconnect(serialNo):
    return _integrated_precision_piezo.IPP_Disconnect(serialNo)

def IPP_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _integrated_precision_piezo.IPP_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def IPP_GetHardwareInfoBlock(serialNo, hardwareInfo):
    return _integrated_precision_piezo.IPP_GetHardwareInfoBlock(serialNo, hardwareInfo)

def IPP_GetFirmwareVersion(serialNo):
    return _integrated_precision_piezo.IPP_GetFirmwareVersion(serialNo)

def IPP_GetSoftwareVersion(serialNo):
    return _integrated_precision_piezo.IPP_GetSoftwareVersion(serialNo)

def IPP_LoadSettings(serialNo):
    return _integrated_precision_piezo.IPP_LoadSettings(serialNo)

def IPP_LoadNamedSettings(serialNo, settingsName):
    return _integrated_precision_piezo.IPP_LoadNamedSettings(serialNo, settingsName)

def IPP_PersistSettings(serialNo):
    return _integrated_precision_piezo.IPP_PersistSettings(serialNo)

def IPP_DisableChannel(serialNo):
    return _integrated_precision_piezo.IPP_DisableChannel(serialNo)

def IPP_EnableChannel(serialNo):
    return _integrated_precision_piezo.IPP_EnableChannel(serialNo)

def IPP_RegisterMessageCallback(serialNo, functionPointer):
    return _integrated_precision_piezo.IPP_RegisterMessageCallback(serialNo, functionPointer)

def IPP_MessageQueueSize(serialNo):
    return _integrated_precision_piezo.IPP_MessageQueueSize(serialNo)

def IPP_ClearMessageQueue(serialNo):
    return _integrated_precision_piezo.IPP_ClearMessageQueue(serialNo)

def IPP_GetNextMessage(serialNo, messageType, messageID, messageData):
    return _integrated_precision_piezo.IPP_GetNextMessage(serialNo, messageType, messageID, messageData)

def IPP_WaitForMessage(serialNo, messageType, messageID, messageData):
    return _integrated_precision_piezo.IPP_WaitForMessage(serialNo, messageType, messageID, messageData)

def IPP_StartPolling(serialNo, milliseconds):
    return _integrated_precision_piezo.IPP_StartPolling(serialNo, milliseconds)

def IPP_PollingDuration(serialNo):
    return _integrated_precision_piezo.IPP_PollingDuration(serialNo)

def IPP_StopPolling(serialNo):
    return _integrated_precision_piezo.IPP_StopPolling(serialNo)

def IPP_RequestSettings(serialNo):
    return _integrated_precision_piezo.IPP_RequestSettings(serialNo)

def IPP_RequestStatus(serialNo):
    return _integrated_precision_piezo.IPP_RequestStatus(serialNo)

def IPP_RequestStatusBits(serialNo):
    return _integrated_precision_piezo.IPP_RequestStatusBits(serialNo)

def IPP_GetStatusBits(serialNo):
    return _integrated_precision_piezo.IPP_GetStatusBits(serialNo)

def IPP_ResetParameters(serialNo):
    return _integrated_precision_piezo.IPP_ResetParameters(serialNo)

def IPP_GetMinOutputVoltage(serialNo):
    return _integrated_precision_piezo.IPP_GetMinOutputVoltage(serialNo)

def IPP_GetMaxOutputVoltage(serialNo):
    return _integrated_precision_piezo.IPP_GetMaxOutputVoltage(serialNo)

def IPP_GetOutputVoltage(serialNo):
    return _integrated_precision_piezo.IPP_GetOutputVoltage(serialNo)

def IPP_RequestOutputVoltage(serialNo):
    return _integrated_precision_piezo.IPP_RequestOutputVoltage(serialNo)

def IPP_SetOutputVoltage(serialNo, volts):
    return _integrated_precision_piezo.IPP_SetOutputVoltage(serialNo, volts)

def IPP_RequestVoltageSource(serialNo):
    return _integrated_precision_piezo.IPP_RequestVoltageSource(serialNo)

def IPP_GetVoltageSource(serialNo):
    return _integrated_precision_piezo.IPP_GetVoltageSource(serialNo)

def IPP_SetVoltageSource(serialNo, source):
    return _integrated_precision_piezo.IPP_SetVoltageSource(serialNo, source)

def IPP_GetIOSettings(serialNo, ioSettings):
    return _integrated_precision_piezo.IPP_GetIOSettings(serialNo, ioSettings)

def IPP_SetIOSettings(serialNo, ioSettings):
    return _integrated_precision_piezo.IPP_SetIOSettings(serialNo, ioSettings)

def IPP_RequestIOSettings(serialNo):
    return _integrated_precision_piezo.IPP_RequestIOSettings(serialNo)

def IPP_SetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity, lowerLimit, upperLimit, smoothingSamples):
    return _integrated_precision_piezo.IPP_SetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity, lowerLimit, upperLimit, smoothingSamples)

def IPP_GetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity, lowerLimit, upperLimit, smoothingSamples):
    return _integrated_precision_piezo.IPP_GetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity, lowerLimit, upperLimit, smoothingSamples)

def IPP_RequestTriggerConfigParams(serialNo):
    return _integrated_precision_piezo.IPP_RequestTriggerConfigParams(serialNo)

def IPP_GetTriggerConfigParamsBlock(serialNo, triggerConfigParams):
    return _integrated_precision_piezo.IPP_GetTriggerConfigParamsBlock(serialNo, triggerConfigParams)

def IPP_SetTriggerConfigParamsBlock(serialNo, triggerConfigParams):
    return _integrated_precision_piezo.IPP_SetTriggerConfigParamsBlock(serialNo, triggerConfigParams)

def IPP_CanDeviceLockFrontPanel(serialNo):
    return _integrated_precision_piezo.IPP_CanDeviceLockFrontPanel(serialNo)

def IPP_GetFrontPanelLocked(serialNo):
    return _integrated_precision_piezo.IPP_GetFrontPanelLocked(serialNo)

def IPP_RequestFrontPanelLocked(serialNo):
    return _integrated_precision_piezo.IPP_RequestFrontPanelLocked(serialNo)

def IPP_SetFrontPanelLock(serialNo, locked):
    return _integrated_precision_piezo.IPP_SetFrontPanelLock(serialNo, locked)

def IPP_GetPositionControlMode(serialNo):
    return _integrated_precision_piezo.IPP_GetPositionControlMode(serialNo)

def IPP_RequestPositionControlMode(serialNo):
    return _integrated_precision_piezo.IPP_RequestPositionControlMode(serialNo)

def IPP_SetPositionControlMode(serialNo, mode):
    return _integrated_precision_piezo.IPP_SetPositionControlMode(serialNo, mode)

def IPP_RequestPosition(serialNo):
    return _integrated_precision_piezo.IPP_RequestPosition(serialNo)

def IPP_GetPosition(serialNo):
    return _integrated_precision_piezo.IPP_GetPosition(serialNo)

def IPP_SetPosition(serialNo, position):
    return _integrated_precision_piezo.IPP_SetPosition(serialNo, position)

def IPP_RequestPIDConsts(serialNo, index):
    return _integrated_precision_piezo.IPP_RequestPIDConsts(serialNo, index)

def IPP_GetPIDConsts(serialNo, index, pidConsts):
    return _integrated_precision_piezo.IPP_GetPIDConsts(serialNo, index, pidConsts)

def IPP_SetPIDConsts(serialNo, pidConsts):
    return _integrated_precision_piezo.IPP_SetPIDConsts(serialNo, pidConsts)

def IPP_RequestPIDCriteria(serialNo, criteriaID):
    return _integrated_precision_piezo.IPP_RequestPIDCriteria(serialNo, criteriaID)

def IPP_GetPIDCriteria(serialNo, criteriaID, pidCriteria):
    return _integrated_precision_piezo.IPP_GetPIDCriteria(serialNo, criteriaID, pidCriteria)

def IPP_SetPIDCriteria(serialNo, pidCriteria):
    return _integrated_precision_piezo.IPP_SetPIDCriteria(serialNo, pidCriteria)

def IPP_RequestMMIParams(serialNo):
    return _integrated_precision_piezo.IPP_RequestMMIParams(serialNo)

def IPP_GetMMIParams(serialNo, wheelMode, voltageAdjustRate, voltageStep, directionSense, presetVoltage1, presetVoltage2, displayIntensity, displayTimeout, displayDimIntensity):
    return _integrated_precision_piezo.IPP_GetMMIParams(serialNo, wheelMode, voltageAdjustRate, voltageStep, directionSense, presetVoltage1, presetVoltage2, displayIntensity, displayTimeout, displayDimIntensity)

def IPP_SetMMIParams(serialNo, wheelMode, voltageAdjustRate, voltageStep, directionSense, presetVoltage1, presetVoltage2, displayIntensity, displayTimeout, displayDimIntensity):
    return _integrated_precision_piezo.IPP_SetMMIParams(serialNo, wheelMode, voltageAdjustRate, voltageStep, directionSense, presetVoltage1, presetVoltage2, displayIntensity, displayTimeout, displayDimIntensity)

def IPP_SetZero(serialNo):
    return _integrated_precision_piezo.IPP_SetZero(serialNo)

def TLI_BuildDeviceList():
    return _integrated_precision_piezo.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _integrated_precision_piezo.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _integrated_precision_piezo.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _integrated_precision_piezo.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _integrated_precision_piezo.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _integrated_precision_piezo.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _integrated_precision_piezo.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _integrated_precision_piezo.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _integrated_precision_piezo.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _integrated_precision_piezo.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _integrated_precision_piezo.TLI_UninitializeSimulations()

