# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _laser_source
else:
    import _laser_source

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _laser_source.FT_OK
FT_InvalidHandle = _laser_source.FT_InvalidHandle
FT_DeviceNotFound = _laser_source.FT_DeviceNotFound
FT_DeviceNotOpened = _laser_source.FT_DeviceNotOpened
FT_IOError = _laser_source.FT_IOError
FT_InsufficientResources = _laser_source.FT_InsufficientResources
FT_InvalidParameter = _laser_source.FT_InvalidParameter
FT_DeviceNotPresent = _laser_source.FT_DeviceNotPresent
FT_IncorrectDevice = _laser_source.FT_IncorrectDevice
MOT_NotMotor = _laser_source.MOT_NotMotor
MOT_DCMotor = _laser_source.MOT_DCMotor
MOT_StepperMotor = _laser_source.MOT_StepperMotor
MOT_BrushlessMotor = _laser_source.MOT_BrushlessMotor
MOT_CustomMotor = _laser_source.MOT_CustomMotor
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_laser_source.TLI_DeviceInfo_typeID_get, _laser_source.TLI_DeviceInfo_typeID_set)
    description = property(_laser_source.TLI_DeviceInfo_description_get, _laser_source.TLI_DeviceInfo_description_set)
    serialNo = property(_laser_source.TLI_DeviceInfo_serialNo_get, _laser_source.TLI_DeviceInfo_serialNo_set)
    PID = property(_laser_source.TLI_DeviceInfo_PID_get, _laser_source.TLI_DeviceInfo_PID_set)
    isKnownType = property(_laser_source.TLI_DeviceInfo_isKnownType_get, _laser_source.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_laser_source.TLI_DeviceInfo_motorType_get, _laser_source.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_laser_source.TLI_DeviceInfo_isPiezoDevice_get, _laser_source.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_laser_source.TLI_DeviceInfo_isLaser_get, _laser_source.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_laser_source.TLI_DeviceInfo_isCustomType_get, _laser_source.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_laser_source.TLI_DeviceInfo_isRack_get, _laser_source.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_laser_source.TLI_DeviceInfo_maxChannels_get, _laser_source.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _laser_source.TLI_DeviceInfo_swiginit(self, _laser_source.new_TLI_DeviceInfo())
    __swig_destroy__ = _laser_source.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _laser_source:
_laser_source.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_laser_source.TLI_HardwareInformation_serialNumber_get, _laser_source.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_laser_source.TLI_HardwareInformation_modelNumber_get, _laser_source.TLI_HardwareInformation_modelNumber_set)
    type = property(_laser_source.TLI_HardwareInformation_type_get, _laser_source.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_laser_source.TLI_HardwareInformation_firmwareVersion_get, _laser_source.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_laser_source.TLI_HardwareInformation_notes_get, _laser_source.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_laser_source.TLI_HardwareInformation_deviceDependantData_get, _laser_source.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_laser_source.TLI_HardwareInformation_hardwareVersion_get, _laser_source.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_laser_source.TLI_HardwareInformation_modificationState_get, _laser_source.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_laser_source.TLI_HardwareInformation_numChannels_get, _laser_source.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _laser_source.TLI_HardwareInformation_swiginit(self, _laser_source.new_TLI_HardwareInformation())
    __swig_destroy__ = _laser_source.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _laser_source:
_laser_source.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
LS_SoftwareOnly = _laser_source.LS_SoftwareOnly
LS_ExternalSignal = _laser_source.LS_ExternalSignal
LS_WheelAndSoftware = _laser_source.LS_WheelAndSoftware
class KLS_MMIParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    displayIntensity = property(_laser_source.KLS_MMIParams_displayIntensity_get, _laser_source.KLS_MMIParams_displayIntensity_set)
    reserved = property(_laser_source.KLS_MMIParams_reserved_get, _laser_source.KLS_MMIParams_reserved_set)

    def __init__(self):
        _laser_source.KLS_MMIParams_swiginit(self, _laser_source.new_KLS_MMIParams())
    __swig_destroy__ = _laser_source.delete_KLS_MMIParams

# Register KLS_MMIParams in _laser_source:
_laser_source.KLS_MMIParams_swigregister(KLS_MMIParams)
KLS_ConstantPower = _laser_source.KLS_ConstantPower
KLS_ConstantCurrent = _laser_source.KLS_ConstantCurrent
KLS_Disabled = _laser_source.KLS_Disabled
KLS_Input = _laser_source.KLS_Input
KLS_Output = _laser_source.KLS_Output
KLS_LaserOn = _laser_source.KLS_LaserOn
KLS_InterlockEnabled = _laser_source.KLS_InterlockEnabled
KLS_SetPointChange = _laser_source.KLS_SetPointChange
KLS_HighStability = _laser_source.KLS_HighStability
KLS_LowStability = _laser_source.KLS_LowStability
KLS_TrigPol_High = _laser_source.KLS_TrigPol_High
KLS_TrigPol_Low = _laser_source.KLS_TrigPol_Low
class KLS_TrigIOParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode1 = property(_laser_source.KLS_TrigIOParams_mode1_get, _laser_source.KLS_TrigIOParams_mode1_set)
    polarity1 = property(_laser_source.KLS_TrigIOParams_polarity1_get, _laser_source.KLS_TrigIOParams_polarity1_set)
    reserved1 = property(_laser_source.KLS_TrigIOParams_reserved1_get, _laser_source.KLS_TrigIOParams_reserved1_set)
    mode2 = property(_laser_source.KLS_TrigIOParams_mode2_get, _laser_source.KLS_TrigIOParams_mode2_set)
    polarity2 = property(_laser_source.KLS_TrigIOParams_polarity2_get, _laser_source.KLS_TrigIOParams_polarity2_set)
    reserved2 = property(_laser_source.KLS_TrigIOParams_reserved2_get, _laser_source.KLS_TrigIOParams_reserved2_set)

    def __init__(self):
        _laser_source.KLS_TrigIOParams_swiginit(self, _laser_source.new_KLS_TrigIOParams())
    __swig_destroy__ = _laser_source.delete_KLS_TrigIOParams

# Register KLS_TrigIOParams in _laser_source:
_laser_source.KLS_TrigIOParams_swigregister(KLS_TrigIOParams)

def TLI_BuildDeviceList():
    return _laser_source.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _laser_source.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _laser_source.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _laser_source.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _laser_source.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _laser_source.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _laser_source.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _laser_source.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _laser_source.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _laser_source.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _laser_source.TLI_UninitializeSimulations()

def LS_Open(serialNo):
    return _laser_source.LS_Open(serialNo)

def LS_Close(serialNo):
    return _laser_source.LS_Close(serialNo)

def LS_CheckConnection(serialNo):
    return _laser_source.LS_CheckConnection(serialNo)

def LS_Identify(serialNo):
    return _laser_source.LS_Identify(serialNo)

def LS_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _laser_source.LS_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def LS_GetHardwareInfoBlock(serialNo, hardwareInfo):
    return _laser_source.LS_GetHardwareInfoBlock(serialNo, hardwareInfo)

def LS_GetFirmwareVersion(serialNo):
    return _laser_source.LS_GetFirmwareVersion(serialNo)

def LS_GetSoftwareVersion(serialNo):
    return _laser_source.LS_GetSoftwareVersion(serialNo)

def LS_LoadSettings(serialNo):
    return _laser_source.LS_LoadSettings(serialNo)

def LS_LoadNamedSettings(serialNo, settingsName):
    return _laser_source.LS_LoadNamedSettings(serialNo, settingsName)

def LS_PersistSettings(serialNo):
    return _laser_source.LS_PersistSettings(serialNo)

def LS_Disable(serialNo):
    return _laser_source.LS_Disable(serialNo)

def LS_Enable(serialNo):
    return _laser_source.LS_Enable(serialNo)

def LS_ClearMessageQueue(serialNo):
    return _laser_source.LS_ClearMessageQueue(serialNo)

def LS_CanDeviceLockFrontPanel(serialNo):
    return _laser_source.LS_CanDeviceLockFrontPanel(serialNo)

def LS_GetFrontPanelLocked(serialNo):
    return _laser_source.LS_GetFrontPanelLocked(serialNo)

def LS_RequestFrontPanelLocked(serialNo):
    return _laser_source.LS_RequestFrontPanelLocked(serialNo)

def LS_SetFrontPanelLock(serialNo, locked):
    return _laser_source.LS_SetFrontPanelLock(serialNo, locked)

def LS_RegisterMessageCallback(serialNo, functionPointer):
    return _laser_source.LS_RegisterMessageCallback(serialNo, functionPointer)

def LS_MessageQueueSize(serialNo):
    return _laser_source.LS_MessageQueueSize(serialNo)

def LS_GetNextMessage(serialNo, messageType, messageID, messageData):
    return _laser_source.LS_GetNextMessage(serialNo, messageType, messageID, messageData)

def LS_WaitForMessage(serialNo, messageType, messageID, messageData):
    return _laser_source.LS_WaitForMessage(serialNo, messageType, messageID, messageData)

def LS_DisableOutput(serialNo):
    return _laser_source.LS_DisableOutput(serialNo)

def LS_EnableOutput(serialNo):
    return _laser_source.LS_EnableOutput(serialNo)

def LS_RequestControlSource(serialNo):
    return _laser_source.LS_RequestControlSource(serialNo)

def LS_GetControlSource(serialNo):
    return _laser_source.LS_GetControlSource(serialNo)

def LS_SetControlSource(serialNo, source):
    return _laser_source.LS_SetControlSource(serialNo, source)

def LS_RequestMMIParams(serialNo):
    return _laser_source.LS_RequestMMIParams(serialNo)

def LS_GetMMIParamsBlock(serialNo, params):
    return _laser_source.LS_GetMMIParamsBlock(serialNo, params)

def LS_SetMMIParamsBlock(serialNo, params):
    return _laser_source.LS_SetMMIParamsBlock(serialNo, params)

def LS_RequestOPMode(serialNo):
    return _laser_source.LS_RequestOPMode(serialNo)

def LS_GetOPMode(serialNo, mode):
    return _laser_source.LS_GetOPMode(serialNo, mode)

def LS_SetOPMode(serialNo, mode):
    return _laser_source.LS_SetOPMode(serialNo, mode)

def LS_RequestTrigIOParams(serialNo):
    return _laser_source.LS_RequestTrigIOParams(serialNo)

def LS_GetTrigIOParams(serialNo, mode1, polarity1, mode2, polarity2):
    return _laser_source.LS_GetTrigIOParams(serialNo, mode1, polarity1, mode2, polarity2)

def LS_SetTrigIOParams(serialNo, mode1, polarity1, mode2, polarity2):
    return _laser_source.LS_SetTrigIOParams(serialNo, mode1, polarity1, mode2, polarity2)

def LS_GetTrigIOParamsBlock(serialNo, params):
    return _laser_source.LS_GetTrigIOParamsBlock(serialNo, params)

def LS_SetTrigIOParamsBlock(serialNo, params):
    return _laser_source.LS_SetTrigIOParamsBlock(serialNo, params)

def LS_GetInterlockState(serialNo):
    return _laser_source.LS_GetInterlockState(serialNo)

def LS_RequestLimits(serialNo):
    return _laser_source.LS_RequestLimits(serialNo)

def LS_RequestWavelength(serialNo):
    return _laser_source.LS_RequestWavelength(serialNo)

def LS_GetWavelength(serialNo):
    return _laser_source.LS_GetWavelength(serialNo)

def LS_GetLimits(serialNo, maxPower, maxCurrent):
    return _laser_source.LS_GetLimits(serialNo, maxPower, maxCurrent)

def LS_RequestSetPower(serialNo):
    return _laser_source.LS_RequestSetPower(serialNo)

def LS_GetPowerSet(serialNo):
    return _laser_source.LS_GetPowerSet(serialNo)

def LS_SetPower(serialNo, power):
    return _laser_source.LS_SetPower(serialNo, power)

def LS_RequestStatus(serialNo):
    return _laser_source.LS_RequestStatus(serialNo)

def LS_RequestReadings(serialNo):
    return _laser_source.LS_RequestReadings(serialNo)

def LS_RequestStatusBits(serialNo):
    return _laser_source.LS_RequestStatusBits(serialNo)

def LS_GetPowerReading(serialNo):
    return _laser_source.LS_GetPowerReading(serialNo)

def LS_GetCurrentReading(serialNo):
    return _laser_source.LS_GetCurrentReading(serialNo)

def LS_GetStatusBits(serialNo):
    return _laser_source.LS_GetStatusBits(serialNo)

def LS_StartPolling(serialNo, milliseconds):
    return _laser_source.LS_StartPolling(serialNo, milliseconds)

def LS_PollingDuration(serialNo):
    return _laser_source.LS_PollingDuration(serialNo)

def LS_StopPolling(serialNo):
    return _laser_source.LS_StopPolling(serialNo)

def LS_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS):
    return _laser_source.LS_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS)

def LS_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout):
    return _laser_source.LS_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout)

def LS_HasLastMsgTimerOverrun(serialNo):
    return _laser_source.LS_HasLastMsgTimerOverrun(serialNo)

def LS_RequestSettings(serialNo):
    return _laser_source.LS_RequestSettings(serialNo)

