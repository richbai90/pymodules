# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _piezo_strain_gauge
else:
    import _piezo_strain_gauge

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _piezo_strain_gauge.FT_OK
FT_InvalidHandle = _piezo_strain_gauge.FT_InvalidHandle
FT_DeviceNotFound = _piezo_strain_gauge.FT_DeviceNotFound
FT_DeviceNotOpened = _piezo_strain_gauge.FT_DeviceNotOpened
FT_IOError = _piezo_strain_gauge.FT_IOError
FT_InsufficientResources = _piezo_strain_gauge.FT_InsufficientResources
FT_InvalidParameter = _piezo_strain_gauge.FT_InvalidParameter
FT_DeviceNotPresent = _piezo_strain_gauge.FT_DeviceNotPresent
FT_IncorrectDevice = _piezo_strain_gauge.FT_IncorrectDevice
MOT_NotMotor = _piezo_strain_gauge.MOT_NotMotor
MOT_DCMotor = _piezo_strain_gauge.MOT_DCMotor
MOT_StepperMotor = _piezo_strain_gauge.MOT_StepperMotor
MOT_BrushlessMotor = _piezo_strain_gauge.MOT_BrushlessMotor
MOT_CustomMotor = _piezo_strain_gauge.MOT_CustomMotor
KPZ_WM_Positive = _piezo_strain_gauge.KPZ_WM_Positive
KPZ_WM_Negative = _piezo_strain_gauge.KPZ_WM_Negative
KPZ_WM_MoveAtVoltage = _piezo_strain_gauge.KPZ_WM_MoveAtVoltage
KPZ_WM_JogVoltage = _piezo_strain_gauge.KPZ_WM_JogVoltage
KPZ_WM_SetVoltage = _piezo_strain_gauge.KPZ_WM_SetVoltage
KPZ_WM_High = _piezo_strain_gauge.KPZ_WM_High
KPZ_WM_Medium = _piezo_strain_gauge.KPZ_WM_Medium
KPZ_WM_Low = _piezo_strain_gauge.KPZ_WM_Low
KPC_TrigDisabled = _piezo_strain_gauge.KPC_TrigDisabled
KPC_TrigIn_GPI = _piezo_strain_gauge.KPC_TrigIn_GPI
KPC_TrigIn_VoltageStepUp = _piezo_strain_gauge.KPC_TrigIn_VoltageStepUp
KPC_TrigIn_VoltageStepDown = _piezo_strain_gauge.KPC_TrigIn_VoltageStepDown
KPC_TrigOut_GPO = _piezo_strain_gauge.KPC_TrigOut_GPO
KPC_TrigOut_LessThanLowerLimit = _piezo_strain_gauge.KPC_TrigOut_LessThanLowerLimit
KPC_TrigOut_MoreThanLowerLimit = _piezo_strain_gauge.KPC_TrigOut_MoreThanLowerLimit
KPC_TrigOut_LessThanUpperLimit = _piezo_strain_gauge.KPC_TrigOut_LessThanUpperLimit
KPC_TrigOut_MoreThanUpperLimit = _piezo_strain_gauge.KPC_TrigOut_MoreThanUpperLimit
KPC_TrigOut_BetweenLimits = _piezo_strain_gauge.KPC_TrigOut_BetweenLimits
KPC_TrigOut_OutsideLimits = _piezo_strain_gauge.KPC_TrigOut_OutsideLimits
KPC_TrigPolarityHigh = _piezo_strain_gauge.KPC_TrigPolarityHigh
KPC_TrigPolarityLow = _piezo_strain_gauge.KPC_TrigPolarityLow
KPC_Software = _piezo_strain_gauge.KPC_Software
KPC_Voltage = _piezo_strain_gauge.KPC_Voltage
KPC_Position = _piezo_strain_gauge.KPC_Position
KPC_DisplayPosition = _piezo_strain_gauge.KPC_DisplayPosition
KPC_DisplayForce = _piezo_strain_gauge.KPC_DisplayForce
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_piezo_strain_gauge.TLI_DeviceInfo_typeID_get, _piezo_strain_gauge.TLI_DeviceInfo_typeID_set)
    description = property(_piezo_strain_gauge.TLI_DeviceInfo_description_get, _piezo_strain_gauge.TLI_DeviceInfo_description_set)
    serialNo = property(_piezo_strain_gauge.TLI_DeviceInfo_serialNo_get, _piezo_strain_gauge.TLI_DeviceInfo_serialNo_set)
    PID = property(_piezo_strain_gauge.TLI_DeviceInfo_PID_get, _piezo_strain_gauge.TLI_DeviceInfo_PID_set)
    isKnownType = property(_piezo_strain_gauge.TLI_DeviceInfo_isKnownType_get, _piezo_strain_gauge.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_piezo_strain_gauge.TLI_DeviceInfo_motorType_get, _piezo_strain_gauge.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_piezo_strain_gauge.TLI_DeviceInfo_isPiezoDevice_get, _piezo_strain_gauge.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_piezo_strain_gauge.TLI_DeviceInfo_isLaser_get, _piezo_strain_gauge.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_piezo_strain_gauge.TLI_DeviceInfo_isCustomType_get, _piezo_strain_gauge.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_piezo_strain_gauge.TLI_DeviceInfo_isRack_get, _piezo_strain_gauge.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_piezo_strain_gauge.TLI_DeviceInfo_maxChannels_get, _piezo_strain_gauge.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _piezo_strain_gauge.TLI_DeviceInfo_swiginit(self, _piezo_strain_gauge.new_TLI_DeviceInfo())
    __swig_destroy__ = _piezo_strain_gauge.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _piezo_strain_gauge:
_piezo_strain_gauge.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_piezo_strain_gauge.TLI_HardwareInformation_serialNumber_get, _piezo_strain_gauge.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_piezo_strain_gauge.TLI_HardwareInformation_modelNumber_get, _piezo_strain_gauge.TLI_HardwareInformation_modelNumber_set)
    type = property(_piezo_strain_gauge.TLI_HardwareInformation_type_get, _piezo_strain_gauge.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_piezo_strain_gauge.TLI_HardwareInformation_firmwareVersion_get, _piezo_strain_gauge.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_piezo_strain_gauge.TLI_HardwareInformation_notes_get, _piezo_strain_gauge.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_piezo_strain_gauge.TLI_HardwareInformation_deviceDependantData_get, _piezo_strain_gauge.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_piezo_strain_gauge.TLI_HardwareInformation_hardwareVersion_get, _piezo_strain_gauge.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_piezo_strain_gauge.TLI_HardwareInformation_modificationState_get, _piezo_strain_gauge.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_piezo_strain_gauge.TLI_HardwareInformation_numChannels_get, _piezo_strain_gauge.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _piezo_strain_gauge.TLI_HardwareInformation_swiginit(self, _piezo_strain_gauge.new_TLI_HardwareInformation())
    __swig_destroy__ = _piezo_strain_gauge.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _piezo_strain_gauge:
_piezo_strain_gauge.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
PZ_ControlModeUndefined = _piezo_strain_gauge.PZ_ControlModeUndefined
PZ_OpenLoop = _piezo_strain_gauge.PZ_OpenLoop
PZ_CloseLoop = _piezo_strain_gauge.PZ_CloseLoop
PZ_OpenLoopSmooth = _piezo_strain_gauge.PZ_OpenLoopSmooth
PZ_CloseLoopSmooth = _piezo_strain_gauge.PZ_CloseLoopSmooth
PZ_SoftwareOnly = _piezo_strain_gauge.PZ_SoftwareOnly
PZ_ExternalSignal = _piezo_strain_gauge.PZ_ExternalSignal
PZ_Potentiometer = _piezo_strain_gauge.PZ_Potentiometer
PZ_All = _piezo_strain_gauge.PZ_All
PZ_Continuous = _piezo_strain_gauge.PZ_Continuous
PZ_Fixed = _piezo_strain_gauge.PZ_Fixed
PZ_OutputTrigEnable = _piezo_strain_gauge.PZ_OutputTrigEnable
PZ_InputTrigEnable = _piezo_strain_gauge.PZ_InputTrigEnable
PZ_OutputTrigSenseHigh = _piezo_strain_gauge.PZ_OutputTrigSenseHigh
PZ_InputTrigSenseHigh = _piezo_strain_gauge.PZ_InputTrigSenseHigh
PZ_OutputGated = _piezo_strain_gauge.PZ_OutputGated
PZ_OutputTrigRepeat = _piezo_strain_gauge.PZ_OutputTrigRepeat
KPC_Disabled = _piezo_strain_gauge.KPC_Disabled
KPC_AnalogueCh1 = _piezo_strain_gauge.KPC_AnalogueCh1
KPC_AnalogueCh2 = _piezo_strain_gauge.KPC_AnalogueCh2
KPC_ExtSignalSMA = _piezo_strain_gauge.KPC_ExtSignalSMA
class KPC_IOSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _hubAnalogueInput = property(_piezo_strain_gauge.KPC_IOSettings__hubAnalogueInput_get, _piezo_strain_gauge.KPC_IOSettings__hubAnalogueInput_set)
    _maximumOutputVoltage = property(_piezo_strain_gauge.KPC_IOSettings__maximumOutputVoltage_get, _piezo_strain_gauge.KPC_IOSettings__maximumOutputVoltage_set)
    MonitorFilterFrequency = property(_piezo_strain_gauge.KPC_IOSettings_MonitorFilterFrequency_get, _piezo_strain_gauge.KPC_IOSettings_MonitorFilterFrequency_set)
    HardwareMaximumOutputVoltage = property(_piezo_strain_gauge.KPC_IOSettings_HardwareMaximumOutputVoltage_get, _piezo_strain_gauge.KPC_IOSettings_HardwareMaximumOutputVoltage_set)
    reserved = property(_piezo_strain_gauge.KPC_IOSettings_reserved_get, _piezo_strain_gauge.KPC_IOSettings_reserved_set)

    def __init__(self):
        _piezo_strain_gauge.KPC_IOSettings_swiginit(self, _piezo_strain_gauge.new_KPC_IOSettings())
    __swig_destroy__ = _piezo_strain_gauge.delete_KPC_IOSettings

# Register KPC_IOSettings in _piezo_strain_gauge:
_piezo_strain_gauge.KPC_IOSettings_swigregister(KPC_IOSettings)
class PZ_FeedbackLoopConstants(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    proportionalTerm = property(_piezo_strain_gauge.PZ_FeedbackLoopConstants_proportionalTerm_get, _piezo_strain_gauge.PZ_FeedbackLoopConstants_proportionalTerm_set)
    integralTerm = property(_piezo_strain_gauge.PZ_FeedbackLoopConstants_integralTerm_get, _piezo_strain_gauge.PZ_FeedbackLoopConstants_integralTerm_set)

    def __init__(self):
        _piezo_strain_gauge.PZ_FeedbackLoopConstants_swiginit(self, _piezo_strain_gauge.new_PZ_FeedbackLoopConstants())
    __swig_destroy__ = _piezo_strain_gauge.delete_PZ_FeedbackLoopConstants

# Register PZ_FeedbackLoopConstants in _piezo_strain_gauge:
_piezo_strain_gauge.PZ_FeedbackLoopConstants_swigregister(PZ_FeedbackLoopConstants)
class PZ_LUTWaveParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_piezo_strain_gauge.PZ_LUTWaveParameters_mode_get, _piezo_strain_gauge.PZ_LUTWaveParameters_mode_set)
    cycleLength = property(_piezo_strain_gauge.PZ_LUTWaveParameters_cycleLength_get, _piezo_strain_gauge.PZ_LUTWaveParameters_cycleLength_set)
    numCycles = property(_piezo_strain_gauge.PZ_LUTWaveParameters_numCycles_get, _piezo_strain_gauge.PZ_LUTWaveParameters_numCycles_set)
    LUTValueDelay = property(_piezo_strain_gauge.PZ_LUTWaveParameters_LUTValueDelay_get, _piezo_strain_gauge.PZ_LUTWaveParameters_LUTValueDelay_set)
    preCycleDelay = property(_piezo_strain_gauge.PZ_LUTWaveParameters_preCycleDelay_get, _piezo_strain_gauge.PZ_LUTWaveParameters_preCycleDelay_set)
    postCycleDelay = property(_piezo_strain_gauge.PZ_LUTWaveParameters_postCycleDelay_get, _piezo_strain_gauge.PZ_LUTWaveParameters_postCycleDelay_set)
    outTriggerStart = property(_piezo_strain_gauge.PZ_LUTWaveParameters_outTriggerStart_get, _piezo_strain_gauge.PZ_LUTWaveParameters_outTriggerStart_set)
    outTriggerDuration = property(_piezo_strain_gauge.PZ_LUTWaveParameters_outTriggerDuration_get, _piezo_strain_gauge.PZ_LUTWaveParameters_outTriggerDuration_set)
    numOutTriggerRepeat = property(_piezo_strain_gauge.PZ_LUTWaveParameters_numOutTriggerRepeat_get, _piezo_strain_gauge.PZ_LUTWaveParameters_numOutTriggerRepeat_set)

    def __init__(self):
        _piezo_strain_gauge.PZ_LUTWaveParameters_swiginit(self, _piezo_strain_gauge.new_PZ_LUTWaveParameters())
    __swig_destroy__ = _piezo_strain_gauge.delete_PZ_LUTWaveParameters

# Register PZ_LUTWaveParameters in _piezo_strain_gauge:
_piezo_strain_gauge.PZ_LUTWaveParameters_swigregister(PZ_LUTWaveParameters)
class KPC_MMIParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    JoystickMode = property(_piezo_strain_gauge.KPC_MMIParams_JoystickMode_get, _piezo_strain_gauge.KPC_MMIParams_JoystickMode_set)
    VoltageAdjustRate = property(_piezo_strain_gauge.KPC_MMIParams_VoltageAdjustRate_get, _piezo_strain_gauge.KPC_MMIParams_VoltageAdjustRate_set)
    VoltageStep = property(_piezo_strain_gauge.KPC_MMIParams_VoltageStep_get, _piezo_strain_gauge.KPC_MMIParams_VoltageStep_set)
    PositionStep = property(_piezo_strain_gauge.KPC_MMIParams_PositionStep_get, _piezo_strain_gauge.KPC_MMIParams_PositionStep_set)
    JoystickDirectionSense = property(_piezo_strain_gauge.KPC_MMIParams_JoystickDirectionSense_get, _piezo_strain_gauge.KPC_MMIParams_JoystickDirectionSense_set)
    PresetVolt1 = property(_piezo_strain_gauge.KPC_MMIParams_PresetVolt1_get, _piezo_strain_gauge.KPC_MMIParams_PresetVolt1_set)
    PresetVolt2 = property(_piezo_strain_gauge.KPC_MMIParams_PresetVolt2_get, _piezo_strain_gauge.KPC_MMIParams_PresetVolt2_set)
    PresetPos1 = property(_piezo_strain_gauge.KPC_MMIParams_PresetPos1_get, _piezo_strain_gauge.KPC_MMIParams_PresetPos1_set)
    PresetPos2 = property(_piezo_strain_gauge.KPC_MMIParams_PresetPos2_get, _piezo_strain_gauge.KPC_MMIParams_PresetPos2_set)
    DisplayIntensity = property(_piezo_strain_gauge.KPC_MMIParams_DisplayIntensity_get, _piezo_strain_gauge.KPC_MMIParams_DisplayIntensity_set)
    DisplayTimeout = property(_piezo_strain_gauge.KPC_MMIParams_DisplayTimeout_get, _piezo_strain_gauge.KPC_MMIParams_DisplayTimeout_set)
    DisplayDimIntensity = property(_piezo_strain_gauge.KPC_MMIParams_DisplayDimIntensity_get, _piezo_strain_gauge.KPC_MMIParams_DisplayDimIntensity_set)
    reserved = property(_piezo_strain_gauge.KPC_MMIParams_reserved_get, _piezo_strain_gauge.KPC_MMIParams_reserved_set)

    def __init__(self):
        _piezo_strain_gauge.KPC_MMIParams_swiginit(self, _piezo_strain_gauge.new_KPC_MMIParams())
    __swig_destroy__ = _piezo_strain_gauge.delete_KPC_MMIParams

# Register KPC_MMIParams in _piezo_strain_gauge:
_piezo_strain_gauge.KPC_MMIParams_swigregister(KPC_MMIParams)
class KPC_TriggerConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Trigger1Mode = property(_piezo_strain_gauge.KPC_TriggerConfig_Trigger1Mode_get, _piezo_strain_gauge.KPC_TriggerConfig_Trigger1Mode_set)
    Trigger1Polarity = property(_piezo_strain_gauge.KPC_TriggerConfig_Trigger1Polarity_get, _piezo_strain_gauge.KPC_TriggerConfig_Trigger1Polarity_set)
    Trigger2Mode = property(_piezo_strain_gauge.KPC_TriggerConfig_Trigger2Mode_get, _piezo_strain_gauge.KPC_TriggerConfig_Trigger2Mode_set)
    Trigger2Polarity = property(_piezo_strain_gauge.KPC_TriggerConfig_Trigger2Polarity_get, _piezo_strain_gauge.KPC_TriggerConfig_Trigger2Polarity_set)
    LowerLimit = property(_piezo_strain_gauge.KPC_TriggerConfig_LowerLimit_get, _piezo_strain_gauge.KPC_TriggerConfig_LowerLimit_set)
    UpperLimit = property(_piezo_strain_gauge.KPC_TriggerConfig_UpperLimit_get, _piezo_strain_gauge.KPC_TriggerConfig_UpperLimit_set)
    SmoothingSamples = property(_piezo_strain_gauge.KPC_TriggerConfig_SmoothingSamples_get, _piezo_strain_gauge.KPC_TriggerConfig_SmoothingSamples_set)
    MonitorOutput = property(_piezo_strain_gauge.KPC_TriggerConfig_MonitorOutput_get, _piezo_strain_gauge.KPC_TriggerConfig_MonitorOutput_set)
    MonitorFilterFrequency = property(_piezo_strain_gauge.KPC_TriggerConfig_MonitorFilterFrequency_get, _piezo_strain_gauge.KPC_TriggerConfig_MonitorFilterFrequency_set)
    MonitorOutputSoftwareValue = property(_piezo_strain_gauge.KPC_TriggerConfig_MonitorOutputSoftwareValue_get, _piezo_strain_gauge.KPC_TriggerConfig_MonitorOutputSoftwareValue_set)
    reserved = property(_piezo_strain_gauge.KPC_TriggerConfig_reserved_get, _piezo_strain_gauge.KPC_TriggerConfig_reserved_set)

    def __init__(self):
        _piezo_strain_gauge.KPC_TriggerConfig_swiginit(self, _piezo_strain_gauge.new_KPC_TriggerConfig())
    __swig_destroy__ = _piezo_strain_gauge.delete_KPC_TriggerConfig

# Register KPC_TriggerConfig in _piezo_strain_gauge:
_piezo_strain_gauge.KPC_TriggerConfig_swigregister(KPC_TriggerConfig)

def TLI_BuildDeviceList():
    return _piezo_strain_gauge.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _piezo_strain_gauge.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _piezo_strain_gauge.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _piezo_strain_gauge.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _piezo_strain_gauge.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _piezo_strain_gauge.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _piezo_strain_gauge.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _piezo_strain_gauge.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _piezo_strain_gauge.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _piezo_strain_gauge.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _piezo_strain_gauge.TLI_UninitializeSimulations()

def KPC_Open(serialNo):
    return _piezo_strain_gauge.KPC_Open(serialNo)

def KPC_Close(serialNo):
    return _piezo_strain_gauge.KPC_Close(serialNo)

def KPC_CheckConnection(serialNo):
    return _piezo_strain_gauge.KPC_CheckConnection(serialNo)

def KPC_Disconnect(serialNo):
    return _piezo_strain_gauge.KPC_Disconnect(serialNo)

def KPC_Identify(serialNo):
    return _piezo_strain_gauge.KPC_Identify(serialNo)

def KPC_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _piezo_strain_gauge.KPC_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def KPC_GetHardwareInfoBlock(serialNo, hardwareInfo):
    return _piezo_strain_gauge.KPC_GetHardwareInfoBlock(serialNo, hardwareInfo)

def KPC_GetFirmwareVersion(serialNo):
    return _piezo_strain_gauge.KPC_GetFirmwareVersion(serialNo)

def KPC_GetSoftwareVersion(serialNo):
    return _piezo_strain_gauge.KPC_GetSoftwareVersion(serialNo)

def KPC_LoadSettings(serialNo):
    return _piezo_strain_gauge.KPC_LoadSettings(serialNo)

def KPC_LoadNamedSettings(serialNo, settingsName):
    return _piezo_strain_gauge.KPC_LoadNamedSettings(serialNo, settingsName)

def KPC_PersistSettings(serialNo):
    return _piezo_strain_gauge.KPC_PersistSettings(serialNo)

def KPC_Disable(serialNo):
    return _piezo_strain_gauge.KPC_Disable(serialNo)

def KPC_Enable(serialNo):
    return _piezo_strain_gauge.KPC_Enable(serialNo)

def KPC_CanDeviceLockFrontPanel(serialNo):
    return _piezo_strain_gauge.KPC_CanDeviceLockFrontPanel(serialNo)

def KPC_GetFrontPanelLocked(serialNo):
    return _piezo_strain_gauge.KPC_GetFrontPanelLocked(serialNo)

def KPC_RequestFrontPanelLocked(serialNo):
    return _piezo_strain_gauge.KPC_RequestFrontPanelLocked(serialNo)

def KPC_SetFrontPanelLock(serialNo, locked):
    return _piezo_strain_gauge.KPC_SetFrontPanelLock(serialNo, locked)

def KPC_ClearMessageQueue(serialNo):
    return _piezo_strain_gauge.KPC_ClearMessageQueue(serialNo)

def KPC_RegisterMessageCallback(serialNo, functionPointer):
    return _piezo_strain_gauge.KPC_RegisterMessageCallback(serialNo, functionPointer)

def KPC_MessageQueueSize(serialNo):
    return _piezo_strain_gauge.KPC_MessageQueueSize(serialNo)

def KPC_GetNextMessage(serialNo, messageType, messageID, messageData):
    return _piezo_strain_gauge.KPC_GetNextMessage(serialNo, messageType, messageID, messageData)

def KPC_WaitForMessage(serialNo, messageType, messageID, messageData):
    return _piezo_strain_gauge.KPC_WaitForMessage(serialNo, messageType, messageID, messageData)

def KPC_RequestSettings(serialNo):
    return _piezo_strain_gauge.KPC_RequestSettings(serialNo)

def KPC_RequestStatus(serialNo):
    return _piezo_strain_gauge.KPC_RequestStatus(serialNo)

def KPC_RequestStatusBits(serialNo):
    return _piezo_strain_gauge.KPC_RequestStatusBits(serialNo)

def KPC_GetStatusBits(serialNo):
    return _piezo_strain_gauge.KPC_GetStatusBits(serialNo)

def KPC_RequestActualPosition(serialNo):
    return _piezo_strain_gauge.KPC_RequestActualPosition(serialNo)

def KPC_RequestPosition(serialNo):
    return _piezo_strain_gauge.KPC_RequestPosition(serialNo)

def KPC_StartPolling(serialNo, milliseconds):
    return _piezo_strain_gauge.KPC_StartPolling(serialNo, milliseconds)

def KPC_PollingDuration(serialNo):
    return _piezo_strain_gauge.KPC_PollingDuration(serialNo)

def KPC_StopPolling(serialNo):
    return _piezo_strain_gauge.KPC_StopPolling(serialNo)

def KPC_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS):
    return _piezo_strain_gauge.KPC_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS)

def KPC_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout):
    return _piezo_strain_gauge.KPC_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout)

def KPC_HasLastMsgTimerOverrun(serialNo):
    return _piezo_strain_gauge.KPC_HasLastMsgTimerOverrun(serialNo)

def KPC_GetPositionControlMode(serialNo):
    return _piezo_strain_gauge.KPC_GetPositionControlMode(serialNo)

def KPC_RequestPositionControlMode(serialNo):
    return _piezo_strain_gauge.KPC_RequestPositionControlMode(serialNo)

def KPC_SetPositionControlMode(serialNo, mode):
    return _piezo_strain_gauge.KPC_SetPositionControlMode(serialNo, mode)

def KPC_SetZero(serialNo):
    return _piezo_strain_gauge.KPC_SetZero(serialNo)

def KPC_GetMaxOutputVoltage(serialNo):
    return _piezo_strain_gauge.KPC_GetMaxOutputVoltage(serialNo)

def KPC_RequestMaxOutputVoltage(serialNo):
    return _piezo_strain_gauge.KPC_RequestMaxOutputVoltage(serialNo)

def KPC_SetMaxOutputVoltage(serialNo, maxVoltage):
    return _piezo_strain_gauge.KPC_SetMaxOutputVoltage(serialNo, maxVoltage)

def KPC_GetHardwareMaxOutputVoltage(serialNo):
    return _piezo_strain_gauge.KPC_GetHardwareMaxOutputVoltage(serialNo)

def KPC_RequestHardwareMaxOutputVoltage(serialNo):
    return _piezo_strain_gauge.KPC_RequestHardwareMaxOutputVoltage(serialNo)

def KPC_SetHardwareMaxOutputVoltage(serialNo, hardwareMaxVoltage):
    return _piezo_strain_gauge.KPC_SetHardwareMaxOutputVoltage(serialNo, hardwareMaxVoltage)

def KPC_GetOutputVoltage(serialNo):
    return _piezo_strain_gauge.KPC_GetOutputVoltage(serialNo)

def KPC_RequestOutputVoltage(serialNo):
    return _piezo_strain_gauge.KPC_RequestOutputVoltage(serialNo)

def KPC_SetOutputVoltage(serialNo, volts):
    return _piezo_strain_gauge.KPC_SetOutputVoltage(serialNo, volts)

def KPC_RequestVoltageSource(serialNo):
    return _piezo_strain_gauge.KPC_RequestVoltageSource(serialNo)

def KPC_GetVoltageSource(serialNo):
    return _piezo_strain_gauge.KPC_GetVoltageSource(serialNo)

def KPC_SetVoltageSource(serialNo, source):
    return _piezo_strain_gauge.KPC_SetVoltageSource(serialNo, source)

def KPC_GetPosition(serialNo):
    return _piezo_strain_gauge.KPC_GetPosition(serialNo)

def KPC_SetPosition(serialNo, position):
    return _piezo_strain_gauge.KPC_SetPosition(serialNo, position)

def KPC_SetPositionToTolerance(serialNo, position, tolerance):
    return _piezo_strain_gauge.KPC_SetPositionToTolerance(serialNo, position, tolerance)

def KPC_RequestFeedbackLoopPIconsts(serialNo):
    return _piezo_strain_gauge.KPC_RequestFeedbackLoopPIconsts(serialNo)

def KPC_GetFeedbackLoopPIconsts(serialNo, proportionalTerm, integralTerm):
    return _piezo_strain_gauge.KPC_GetFeedbackLoopPIconsts(serialNo, proportionalTerm, integralTerm)

def KPC_SetFeedbackLoopPIconsts(serialNo, proportionalTerm, integralTerm):
    return _piezo_strain_gauge.KPC_SetFeedbackLoopPIconsts(serialNo, proportionalTerm, integralTerm)

def KPC_GetFeedbackLoopPIconstsBlock(serialNo, proportionalAndIntegralConstants):
    return _piezo_strain_gauge.KPC_GetFeedbackLoopPIconstsBlock(serialNo, proportionalAndIntegralConstants)

def KPC_SetFeedbackLoopPIconstsBlock(serialNo, proportionalAndIntegralConstants):
    return _piezo_strain_gauge.KPC_SetFeedbackLoopPIconstsBlock(serialNo, proportionalAndIntegralConstants)

def KPC_SetLUTwaveParams(serialNo, LUTwaveParams):
    return _piezo_strain_gauge.KPC_SetLUTwaveParams(serialNo, LUTwaveParams)

def KPC_SetLUTwaveSample(serialNo, index, value):
    return _piezo_strain_gauge.KPC_SetLUTwaveSample(serialNo, index, value)

def KPC_StartLUTwave(serialNo):
    return _piezo_strain_gauge.KPC_StartLUTwave(serialNo)

def KPC_StopLUTwave(serialNo):
    return _piezo_strain_gauge.KPC_StopLUTwave(serialNo)

def KPC_RequestLEDBrightness(serialNo):
    return _piezo_strain_gauge.KPC_RequestLEDBrightness(serialNo)

def KPC_GetLEDBrightness(serialNo):
    return _piezo_strain_gauge.KPC_GetLEDBrightness(serialNo)

def KPC_SetLEDBrightness(serialNo, brightness):
    return _piezo_strain_gauge.KPC_SetLEDBrightness(serialNo, brightness)

def KPC_RequestIOSettings(serialNo):
    return _piezo_strain_gauge.KPC_RequestIOSettings(serialNo)

def KPC_GetIOSettings(serialNo):
    return _piezo_strain_gauge.KPC_GetIOSettings(serialNo)

def KPC_SetIOSettings(serialNo, ioSettings):
    return _piezo_strain_gauge.KPC_SetIOSettings(serialNo, ioSettings)

def KPC_GetHubAnalogInput(serialNo):
    return _piezo_strain_gauge.KPC_GetHubAnalogInput(serialNo)

def KPC_SetHubAnalogInput(serialNo, hubAnalogInput):
    return _piezo_strain_gauge.KPC_SetHubAnalogInput(serialNo, hubAnalogInput)

def KPC_RequestMMIParams(serialNo):
    return _piezo_strain_gauge.KPC_RequestMMIParams(serialNo)

def KPC_GetMMIParamsExt(serialNo, wheelMode, voltageAdjustRate, voltageStep, positionStep, directionSense, presetVoltage1, presetVoltage2, presetPosition1, presetPosition2, displayIntensity, displayTimeout, displayDimIntensity):
    return _piezo_strain_gauge.KPC_GetMMIParamsExt(serialNo, wheelMode, voltageAdjustRate, voltageStep, positionStep, directionSense, presetVoltage1, presetVoltage2, presetPosition1, presetPosition2, displayIntensity, displayTimeout, displayDimIntensity)

def KPC_GetMMIParams(serialNo, wheelMode, voltageAdjustRate, voltageStep, positionStep, directionSense, presetVoltage1, presetVoltage2, presetPosition1, presetPosition2, displayIntensity):
    return _piezo_strain_gauge.KPC_GetMMIParams(serialNo, wheelMode, voltageAdjustRate, voltageStep, positionStep, directionSense, presetVoltage1, presetVoltage2, presetPosition1, presetPosition2, displayIntensity)

def KPC_SetMMIParamsExt(serialNo, wheelMode, voltageAdjustRate, voltageStep, PositionStep, directionSense, presetVoltage1, presetVoltage2, presetPositiion1, presetPosition2, displayIntensity, displayTimeout, displayDimIntensity):
    return _piezo_strain_gauge.KPC_SetMMIParamsExt(serialNo, wheelMode, voltageAdjustRate, voltageStep, PositionStep, directionSense, presetVoltage1, presetVoltage2, presetPositiion1, presetPosition2, displayIntensity, displayTimeout, displayDimIntensity)

def KPC_SetMMIParams(serialNo, wheelMode, voltageAdjustRate, voltageStep, positionStep, directionSense, presetVoltage1, presetVoltage2, presetPosition1, presetPosition2, displayIntensity):
    return _piezo_strain_gauge.KPC_SetMMIParams(serialNo, wheelMode, voltageAdjustRate, voltageStep, positionStep, directionSense, presetVoltage1, presetVoltage2, presetPosition1, presetPosition2, displayIntensity)

def KPC_GetMMIParamsBlock(serialNo, mmiParams):
    return _piezo_strain_gauge.KPC_GetMMIParamsBlock(serialNo, mmiParams)

def KPC_SetMMIParamsBlock(serialNo, mmiParams):
    return _piezo_strain_gauge.KPC_SetMMIParamsBlock(serialNo, mmiParams)

def KPC_RequestTriggerConfigParams(serialNo):
    return _piezo_strain_gauge.KPC_RequestTriggerConfigParams(serialNo)

def KPC_GetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity, lowerLimit, upperLimit, smoothingSamples, monitorOutput, monitorFilterFrequency, monitorOutputSoftwareValue):
    return _piezo_strain_gauge.KPC_GetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity, lowerLimit, upperLimit, smoothingSamples, monitorOutput, monitorFilterFrequency, monitorOutputSoftwareValue)

def KPC_SetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity, lowerLimit, upperLimit, smoothingSamples, monitorOutput, monitorFilterFrequency, monitorOutputSoftwareValue):
    return _piezo_strain_gauge.KPC_SetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity, lowerLimit, upperLimit, smoothingSamples, monitorOutput, monitorFilterFrequency, monitorOutputSoftwareValue)

def KPC_GetTriggerConfigParamsBlock(serialNo, triggerConfigParams):
    return _piezo_strain_gauge.KPC_GetTriggerConfigParamsBlock(serialNo, triggerConfigParams)

def KPC_SetTriggerConfigParamsBlock(serialNo, triggerConfigParams):
    return _piezo_strain_gauge.KPC_SetTriggerConfigParamsBlock(serialNo, triggerConfigParams)

def KPC_RequestDigitalOutputs(serialNo):
    return _piezo_strain_gauge.KPC_RequestDigitalOutputs(serialNo)

def KPC_GetDigitalOutputs(serialNo):
    return _piezo_strain_gauge.KPC_GetDigitalOutputs(serialNo)

def KPC_SetDigitalOutputs(serialNo, outputsBits):
    return _piezo_strain_gauge.KPC_SetDigitalOutputs(serialNo, outputsBits)

def KPC_RequestMaximumTravel(serialNo):
    return _piezo_strain_gauge.KPC_RequestMaximumTravel(serialNo)

def KPC_RequestDisplayMode(serialNo):
    return _piezo_strain_gauge.KPC_RequestDisplayMode(serialNo)

def KPC_GetDisplayMode(serialNo):
    return _piezo_strain_gauge.KPC_GetDisplayMode(serialNo)

def KPC_SetDisplayMode(serialNo, mode):
    return _piezo_strain_gauge.KPC_SetDisplayMode(serialNo, mode)

def KPC_RequestForceCalibration(serialNo):
    return _piezo_strain_gauge.KPC_RequestForceCalibration(serialNo)

def KPC_GetForceCalibration(serialNo):
    return _piezo_strain_gauge.KPC_GetForceCalibration(serialNo)

def KPC_SetForceCalibration(serialNo, forceCalibration):
    return _piezo_strain_gauge.KPC_SetForceCalibration(serialNo, forceCalibration)

def KPC_ResetParameters(serialNo):
    return _piezo_strain_gauge.KPC_ResetParameters(serialNo)

def KPC_GetMaximumTravel(serialNo):
    return _piezo_strain_gauge.KPC_GetMaximumTravel(serialNo)

