# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _stepper_motor
else:
    import _stepper_motor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _stepper_motor.FT_OK
FT_InvalidHandle = _stepper_motor.FT_InvalidHandle
FT_DeviceNotFound = _stepper_motor.FT_DeviceNotFound
FT_DeviceNotOpened = _stepper_motor.FT_DeviceNotOpened
FT_IOError = _stepper_motor.FT_IOError
FT_InsufficientResources = _stepper_motor.FT_InsufficientResources
FT_InvalidParameter = _stepper_motor.FT_InvalidParameter
FT_DeviceNotPresent = _stepper_motor.FT_DeviceNotPresent
FT_IncorrectDevice = _stepper_motor.FT_IncorrectDevice
MOT_NotMotor = _stepper_motor.MOT_NotMotor
MOT_DCMotor = _stepper_motor.MOT_DCMotor
MOT_StepperMotor = _stepper_motor.MOT_StepperMotor
MOT_BrushlessMotor = _stepper_motor.MOT_BrushlessMotor
MOT_CustomMotor = _stepper_motor.MOT_CustomMotor
MOT_TravelModeUndefined = _stepper_motor.MOT_TravelModeUndefined
MOT_Linear = _stepper_motor.MOT_Linear
MOT_Rotational = _stepper_motor.MOT_Rotational
MOT_TravelDirectionUndefined = _stepper_motor.MOT_TravelDirectionUndefined
MOT_Forwards = _stepper_motor.MOT_Forwards
MOT_Backwards = _stepper_motor.MOT_Backwards
ZST6 = _stepper_motor.ZST6
ZST13 = _stepper_motor.ZST13
ZST25 = _stepper_motor.ZST25
ZST206 = _stepper_motor.ZST206
ZST213 = _stepper_motor.ZST213
ZST225 = _stepper_motor.ZST225
ZFS206 = _stepper_motor.ZFS206
ZFS213 = _stepper_motor.ZFS213
ZFS225 = _stepper_motor.ZFS225
DRV013_25MM = _stepper_motor.DRV013_25MM
DRV014_50MM = _stepper_motor.DRV014_50MM
NR360 = _stepper_motor.NR360
PLS_X25MM = _stepper_motor.PLS_X25MM
PLS_X25MM_HiRes = _stepper_motor.PLS_X25MM_HiRes
FW103 = _stepper_motor.FW103
MOT_LimitSwitchDirectionUndefined = _stepper_motor.MOT_LimitSwitchDirectionUndefined
MOT_ReverseLimitSwitch = _stepper_motor.MOT_ReverseLimitSwitch
MOT_ForwardLimitSwitch = _stepper_motor.MOT_ForwardLimitSwitch
MOT_Normal = _stepper_motor.MOT_Normal
MOT_Reverse = _stepper_motor.MOT_Reverse
MOT_JogModeUndefined = _stepper_motor.MOT_JogModeUndefined
MOT_Continuous = _stepper_motor.MOT_Continuous
MOT_SingleStep = _stepper_motor.MOT_SingleStep
MOT_StopModeUndefined = _stepper_motor.MOT_StopModeUndefined
MOT_Immediate = _stepper_motor.MOT_Immediate
MOT_Profiled = _stepper_motor.MOT_Profiled
MOT_LimitSwitchModeUndefined = _stepper_motor.MOT_LimitSwitchModeUndefined
MOT_LimitSwitchIgnoreSwitch = _stepper_motor.MOT_LimitSwitchIgnoreSwitch
MOT_LimitSwitchMakeOnContact = _stepper_motor.MOT_LimitSwitchMakeOnContact
MOT_LimitSwitchBreakOnContact = _stepper_motor.MOT_LimitSwitchBreakOnContact
MOT_LimitSwitchMakeOnHome = _stepper_motor.MOT_LimitSwitchMakeOnHome
MOT_LimitSwitchBreakOnHome = _stepper_motor.MOT_LimitSwitchBreakOnHome
MOT_PMD_Reserved = _stepper_motor.MOT_PMD_Reserved
MOT_LimitSwitchIgnoreSwitchSwapped = _stepper_motor.MOT_LimitSwitchIgnoreSwitchSwapped
MOT_LimitSwitchMakeOnContactSwapped = _stepper_motor.MOT_LimitSwitchMakeOnContactSwapped
MOT_LimitSwitchBreakOnContactSwapped = _stepper_motor.MOT_LimitSwitchBreakOnContactSwapped
MOT_LimitSwitchMakeOnHomeSwapped = _stepper_motor.MOT_LimitSwitchMakeOnHomeSwapped
MOT_LimitSwitchBreakOnHomeSwapped = _stepper_motor.MOT_LimitSwitchBreakOnHomeSwapped
MOT_LimitSwitchSWModeUndefined = _stepper_motor.MOT_LimitSwitchSWModeUndefined
MOT_LimitSwitchIgnored = _stepper_motor.MOT_LimitSwitchIgnored
MOT_LimitSwitchStopImmediate = _stepper_motor.MOT_LimitSwitchStopImmediate
MOT_LimitSwitchStopProfiled = _stepper_motor.MOT_LimitSwitchStopProfiled
MOT_LimitSwitchIgnored_Rotational = _stepper_motor.MOT_LimitSwitchIgnored_Rotational
MOT_LimitSwitchStopImmediate_Rotational = _stepper_motor.MOT_LimitSwitchStopImmediate_Rotational
MOT_LimitSwitchStopProfiled_Rotational = _stepper_motor.MOT_LimitSwitchStopProfiled_Rotational
DisallowIllegalMoves = _stepper_motor.DisallowIllegalMoves
AllowPartialMoves = _stepper_motor.AllowPartialMoves
AllowAllMoves = _stepper_motor.AllowAllMoves
KMOT_WM_Positive = _stepper_motor.KMOT_WM_Positive
KMOT_WM_Negative = _stepper_motor.KMOT_WM_Negative
KMOT_WM_Velocity = _stepper_motor.KMOT_WM_Velocity
KMOT_WM_Jog = _stepper_motor.KMOT_WM_Jog
KMOT_WM_MoveAbsolute = _stepper_motor.KMOT_WM_MoveAbsolute
KMOT_TrigDisabled = _stepper_motor.KMOT_TrigDisabled
KMOT_TrigIn_GPI = _stepper_motor.KMOT_TrigIn_GPI
KMOT_TrigIn_RelativeMove = _stepper_motor.KMOT_TrigIn_RelativeMove
KMOT_TrigIn_AbsoluteMove = _stepper_motor.KMOT_TrigIn_AbsoluteMove
KMOT_TrigIn_Home = _stepper_motor.KMOT_TrigIn_Home
KMOT_TrigIn_Stop = _stepper_motor.KMOT_TrigIn_Stop
KMOT_TrigIn_StartScan = _stepper_motor.KMOT_TrigIn_StartScan
KMOT_TrigIn_ShuttleMove = _stepper_motor.KMOT_TrigIn_ShuttleMove
KMOT_TrigOut_GPO = _stepper_motor.KMOT_TrigOut_GPO
KMOT_TrigOut_InMotion = _stepper_motor.KMOT_TrigOut_InMotion
KMOT_TrigOut_AtMaxVelocity = _stepper_motor.KMOT_TrigOut_AtMaxVelocity
KMOT_TrigOut_AtPositionSteps = _stepper_motor.KMOT_TrigOut_AtPositionSteps
KMOT_TrigOut_Synch = _stepper_motor.KMOT_TrigOut_Synch
KMOT_TrigPolarityHigh = _stepper_motor.KMOT_TrigPolarityHigh
KMOT_TrigPolarityLow = _stepper_motor.KMOT_TrigPolarityLow
MOT_PIDLoopModeDisabled = _stepper_motor.MOT_PIDLoopModeDisabled
MOT_PIDOpenLoopMode = _stepper_motor.MOT_PIDOpenLoopMode
MOT_PIDClosedLoopMode = _stepper_motor.MOT_PIDClosedLoopMode
LinearRange = _stepper_motor.LinearRange
RotationalUnlimited = _stepper_motor.RotationalUnlimited
RotationalWrapping = _stepper_motor.RotationalWrapping
Quickest = _stepper_motor.Quickest
Forwards = _stepper_motor.Forwards
Reverse = _stepper_motor.Reverse
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_stepper_motor.TLI_DeviceInfo_typeID_get, _stepper_motor.TLI_DeviceInfo_typeID_set)
    description = property(_stepper_motor.TLI_DeviceInfo_description_get, _stepper_motor.TLI_DeviceInfo_description_set)
    serialNo = property(_stepper_motor.TLI_DeviceInfo_serialNo_get, _stepper_motor.TLI_DeviceInfo_serialNo_set)
    PID = property(_stepper_motor.TLI_DeviceInfo_PID_get, _stepper_motor.TLI_DeviceInfo_PID_set)
    isKnownType = property(_stepper_motor.TLI_DeviceInfo_isKnownType_get, _stepper_motor.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_stepper_motor.TLI_DeviceInfo_motorType_get, _stepper_motor.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_stepper_motor.TLI_DeviceInfo_isPiezoDevice_get, _stepper_motor.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_stepper_motor.TLI_DeviceInfo_isLaser_get, _stepper_motor.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_stepper_motor.TLI_DeviceInfo_isCustomType_get, _stepper_motor.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_stepper_motor.TLI_DeviceInfo_isRack_get, _stepper_motor.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_stepper_motor.TLI_DeviceInfo_maxChannels_get, _stepper_motor.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _stepper_motor.TLI_DeviceInfo_swiginit(self, _stepper_motor.new_TLI_DeviceInfo())
    __swig_destroy__ = _stepper_motor.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _stepper_motor:
_stepper_motor.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_stepper_motor.TLI_HardwareInformation_serialNumber_get, _stepper_motor.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_stepper_motor.TLI_HardwareInformation_modelNumber_get, _stepper_motor.TLI_HardwareInformation_modelNumber_set)
    type = property(_stepper_motor.TLI_HardwareInformation_type_get, _stepper_motor.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_stepper_motor.TLI_HardwareInformation_firmwareVersion_get, _stepper_motor.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_stepper_motor.TLI_HardwareInformation_notes_get, _stepper_motor.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_stepper_motor.TLI_HardwareInformation_deviceDependantData_get, _stepper_motor.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_stepper_motor.TLI_HardwareInformation_hardwareVersion_get, _stepper_motor.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_stepper_motor.TLI_HardwareInformation_modificationState_get, _stepper_motor.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_stepper_motor.TLI_HardwareInformation_numChannels_get, _stepper_motor.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _stepper_motor.TLI_HardwareInformation_swiginit(self, _stepper_motor.new_TLI_HardwareInformation())
    __swig_destroy__ = _stepper_motor.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _stepper_motor:
_stepper_motor.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
class MOT_VelocityParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    minVelocity = property(_stepper_motor.MOT_VelocityParameters_minVelocity_get, _stepper_motor.MOT_VelocityParameters_minVelocity_set)
    acceleration = property(_stepper_motor.MOT_VelocityParameters_acceleration_get, _stepper_motor.MOT_VelocityParameters_acceleration_set)
    maxVelocity = property(_stepper_motor.MOT_VelocityParameters_maxVelocity_get, _stepper_motor.MOT_VelocityParameters_maxVelocity_set)

    def __init__(self):
        _stepper_motor.MOT_VelocityParameters_swiginit(self, _stepper_motor.new_MOT_VelocityParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_VelocityParameters

# Register MOT_VelocityParameters in _stepper_motor:
_stepper_motor.MOT_VelocityParameters_swigregister(MOT_VelocityParameters)
class MOT_JogParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_stepper_motor.MOT_JogParameters_mode_get, _stepper_motor.MOT_JogParameters_mode_set)
    stepSize = property(_stepper_motor.MOT_JogParameters_stepSize_get, _stepper_motor.MOT_JogParameters_stepSize_set)
    velParams = property(_stepper_motor.MOT_JogParameters_velParams_get, _stepper_motor.MOT_JogParameters_velParams_set)
    stopMode = property(_stepper_motor.MOT_JogParameters_stopMode_get, _stepper_motor.MOT_JogParameters_stopMode_set)

    def __init__(self):
        _stepper_motor.MOT_JogParameters_swiginit(self, _stepper_motor.new_MOT_JogParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_JogParameters

# Register MOT_JogParameters in _stepper_motor:
_stepper_motor.MOT_JogParameters_swigregister(MOT_JogParameters)
class MOT_HomingParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    direction = property(_stepper_motor.MOT_HomingParameters_direction_get, _stepper_motor.MOT_HomingParameters_direction_set)
    limitSwitch = property(_stepper_motor.MOT_HomingParameters_limitSwitch_get, _stepper_motor.MOT_HomingParameters_limitSwitch_set)
    velocity = property(_stepper_motor.MOT_HomingParameters_velocity_get, _stepper_motor.MOT_HomingParameters_velocity_set)
    offsetDistance = property(_stepper_motor.MOT_HomingParameters_offsetDistance_get, _stepper_motor.MOT_HomingParameters_offsetDistance_set)

    def __init__(self):
        _stepper_motor.MOT_HomingParameters_swiginit(self, _stepper_motor.new_MOT_HomingParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_HomingParameters

# Register MOT_HomingParameters in _stepper_motor:
_stepper_motor.MOT_HomingParameters_swigregister(MOT_HomingParameters)
class MOT_LimitSwitchParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    clockwiseHardwareLimit = property(_stepper_motor.MOT_LimitSwitchParameters_clockwiseHardwareLimit_get, _stepper_motor.MOT_LimitSwitchParameters_clockwiseHardwareLimit_set)
    anticlockwiseHardwareLimit = property(_stepper_motor.MOT_LimitSwitchParameters_anticlockwiseHardwareLimit_get, _stepper_motor.MOT_LimitSwitchParameters_anticlockwiseHardwareLimit_set)
    clockwisePosition = property(_stepper_motor.MOT_LimitSwitchParameters_clockwisePosition_get, _stepper_motor.MOT_LimitSwitchParameters_clockwisePosition_set)
    anticlockwisePosition = property(_stepper_motor.MOT_LimitSwitchParameters_anticlockwisePosition_get, _stepper_motor.MOT_LimitSwitchParameters_anticlockwisePosition_set)
    softLimitMode = property(_stepper_motor.MOT_LimitSwitchParameters_softLimitMode_get, _stepper_motor.MOT_LimitSwitchParameters_softLimitMode_set)

    def __init__(self):
        _stepper_motor.MOT_LimitSwitchParameters_swiginit(self, _stepper_motor.new_MOT_LimitSwitchParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_LimitSwitchParameters

# Register MOT_LimitSwitchParameters in _stepper_motor:
_stepper_motor.MOT_LimitSwitchParameters_swigregister(MOT_LimitSwitchParameters)
class MOT_PowerParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    restPercentage = property(_stepper_motor.MOT_PowerParameters_restPercentage_get, _stepper_motor.MOT_PowerParameters_restPercentage_set)
    movePercentage = property(_stepper_motor.MOT_PowerParameters_movePercentage_get, _stepper_motor.MOT_PowerParameters_movePercentage_set)

    def __init__(self):
        _stepper_motor.MOT_PowerParameters_swiginit(self, _stepper_motor.new_MOT_PowerParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_PowerParameters

# Register MOT_PowerParameters in _stepper_motor:
_stepper_motor.MOT_PowerParameters_swigregister(MOT_PowerParameters)
class KMOT_MMIParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    WheelMode = property(_stepper_motor.KMOT_MMIParams_WheelMode_get, _stepper_motor.KMOT_MMIParams_WheelMode_set)
    WheelMaxVelocity = property(_stepper_motor.KMOT_MMIParams_WheelMaxVelocity_get, _stepper_motor.KMOT_MMIParams_WheelMaxVelocity_set)
    WheelAcceleration = property(_stepper_motor.KMOT_MMIParams_WheelAcceleration_get, _stepper_motor.KMOT_MMIParams_WheelAcceleration_set)
    WheelDirectionSense = property(_stepper_motor.KMOT_MMIParams_WheelDirectionSense_get, _stepper_motor.KMOT_MMIParams_WheelDirectionSense_set)
    PresetPos1 = property(_stepper_motor.KMOT_MMIParams_PresetPos1_get, _stepper_motor.KMOT_MMIParams_PresetPos1_set)
    PresetPos2 = property(_stepper_motor.KMOT_MMIParams_PresetPos2_get, _stepper_motor.KMOT_MMIParams_PresetPos2_set)
    DisplayIntensity = property(_stepper_motor.KMOT_MMIParams_DisplayIntensity_get, _stepper_motor.KMOT_MMIParams_DisplayIntensity_set)
    DisplayTimeout = property(_stepper_motor.KMOT_MMIParams_DisplayTimeout_get, _stepper_motor.KMOT_MMIParams_DisplayTimeout_set)
    DisplayDimIntensity = property(_stepper_motor.KMOT_MMIParams_DisplayDimIntensity_get, _stepper_motor.KMOT_MMIParams_DisplayDimIntensity_set)
    reserved = property(_stepper_motor.KMOT_MMIParams_reserved_get, _stepper_motor.KMOT_MMIParams_reserved_set)

    def __init__(self):
        _stepper_motor.KMOT_MMIParams_swiginit(self, _stepper_motor.new_KMOT_MMIParams())
    __swig_destroy__ = _stepper_motor.delete_KMOT_MMIParams

# Register KMOT_MMIParams in _stepper_motor:
_stepper_motor.KMOT_MMIParams_swigregister(KMOT_MMIParams)
class KMOT_TriggerConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Trigger1Mode = property(_stepper_motor.KMOT_TriggerConfig_Trigger1Mode_get, _stepper_motor.KMOT_TriggerConfig_Trigger1Mode_set)
    Trigger1Polarity = property(_stepper_motor.KMOT_TriggerConfig_Trigger1Polarity_get, _stepper_motor.KMOT_TriggerConfig_Trigger1Polarity_set)
    Trigger2Mode = property(_stepper_motor.KMOT_TriggerConfig_Trigger2Mode_get, _stepper_motor.KMOT_TriggerConfig_Trigger2Mode_set)
    Trigger2Polarity = property(_stepper_motor.KMOT_TriggerConfig_Trigger2Polarity_get, _stepper_motor.KMOT_TriggerConfig_Trigger2Polarity_set)
    reserved = property(_stepper_motor.KMOT_TriggerConfig_reserved_get, _stepper_motor.KMOT_TriggerConfig_reserved_set)

    def __init__(self):
        _stepper_motor.KMOT_TriggerConfig_swiginit(self, _stepper_motor.new_KMOT_TriggerConfig())
    __swig_destroy__ = _stepper_motor.delete_KMOT_TriggerConfig

# Register KMOT_TriggerConfig in _stepper_motor:
_stepper_motor.KMOT_TriggerConfig_swigregister(KMOT_TriggerConfig)
class KMOT_TriggerParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TriggerStartPositionFwd = property(_stepper_motor.KMOT_TriggerParams_TriggerStartPositionFwd_get, _stepper_motor.KMOT_TriggerParams_TriggerStartPositionFwd_set)
    TriggerIntervalFwd = property(_stepper_motor.KMOT_TriggerParams_TriggerIntervalFwd_get, _stepper_motor.KMOT_TriggerParams_TriggerIntervalFwd_set)
    TriggerPulseCountFwd = property(_stepper_motor.KMOT_TriggerParams_TriggerPulseCountFwd_get, _stepper_motor.KMOT_TriggerParams_TriggerPulseCountFwd_set)
    TriggerStartPositionRev = property(_stepper_motor.KMOT_TriggerParams_TriggerStartPositionRev_get, _stepper_motor.KMOT_TriggerParams_TriggerStartPositionRev_set)
    TriggerIntervalRev = property(_stepper_motor.KMOT_TriggerParams_TriggerIntervalRev_get, _stepper_motor.KMOT_TriggerParams_TriggerIntervalRev_set)
    TriggerPulseCountRev = property(_stepper_motor.KMOT_TriggerParams_TriggerPulseCountRev_get, _stepper_motor.KMOT_TriggerParams_TriggerPulseCountRev_set)
    TriggerPulseWidth = property(_stepper_motor.KMOT_TriggerParams_TriggerPulseWidth_get, _stepper_motor.KMOT_TriggerParams_TriggerPulseWidth_set)
    CycleCount = property(_stepper_motor.KMOT_TriggerParams_CycleCount_get, _stepper_motor.KMOT_TriggerParams_CycleCount_set)
    reserved = property(_stepper_motor.KMOT_TriggerParams_reserved_get, _stepper_motor.KMOT_TriggerParams_reserved_set)

    def __init__(self):
        _stepper_motor.KMOT_TriggerParams_swiginit(self, _stepper_motor.new_KMOT_TriggerParams())
    __swig_destroy__ = _stepper_motor.delete_KMOT_TriggerParams

# Register KMOT_TriggerParams in _stepper_motor:
_stepper_motor.KMOT_TriggerParams_swigregister(KMOT_TriggerParams)
class MOT_PIDLoopEncoderParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    loopMode = property(_stepper_motor.MOT_PIDLoopEncoderParams_loopMode_get, _stepper_motor.MOT_PIDLoopEncoderParams_loopMode_set)
    proportionalGain = property(_stepper_motor.MOT_PIDLoopEncoderParams_proportionalGain_get, _stepper_motor.MOT_PIDLoopEncoderParams_proportionalGain_set)
    integralGain = property(_stepper_motor.MOT_PIDLoopEncoderParams_integralGain_get, _stepper_motor.MOT_PIDLoopEncoderParams_integralGain_set)
    differentialGain = property(_stepper_motor.MOT_PIDLoopEncoderParams_differentialGain_get, _stepper_motor.MOT_PIDLoopEncoderParams_differentialGain_set)
    PIDOutputLimit = property(_stepper_motor.MOT_PIDLoopEncoderParams_PIDOutputLimit_get, _stepper_motor.MOT_PIDLoopEncoderParams_PIDOutputLimit_set)
    PIDTolerance = property(_stepper_motor.MOT_PIDLoopEncoderParams_PIDTolerance_get, _stepper_motor.MOT_PIDLoopEncoderParams_PIDTolerance_set)

    def __init__(self):
        _stepper_motor.MOT_PIDLoopEncoderParams_swiginit(self, _stepper_motor.new_MOT_PIDLoopEncoderParams())
    __swig_destroy__ = _stepper_motor.delete_MOT_PIDLoopEncoderParams

# Register MOT_PIDLoopEncoderParams in _stepper_motor:
_stepper_motor.MOT_PIDLoopEncoderParams_swigregister(MOT_PIDLoopEncoderParams)

def TLI_BuildDeviceList():
    return _stepper_motor.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _stepper_motor.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _stepper_motor.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _stepper_motor.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _stepper_motor.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _stepper_motor.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _stepper_motor.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _stepper_motor.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _stepper_motor.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _stepper_motor.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _stepper_motor.TLI_UninitializeSimulations()

def SCC_Open(serialNo):
    return _stepper_motor.SCC_Open(serialNo)

def SCC_Close(serialNo):
    return _stepper_motor.SCC_Close(serialNo)

def SCC_CheckConnection(serialNo):
    return _stepper_motor.SCC_CheckConnection(serialNo)

def SCC_Identify(serialNo):
    return _stepper_motor.SCC_Identify(serialNo)

def SCC_SetStageType(serialNo, stageId):
    return _stepper_motor.SCC_SetStageType(serialNo, stageId)

def SCC_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _stepper_motor.SCC_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def SCC_GetHardwareInfoBlock(serialNo, hardwareInfo):
    return _stepper_motor.SCC_GetHardwareInfoBlock(serialNo, hardwareInfo)

def SCC_GetSoftwareVersion(serialNo):
    return _stepper_motor.SCC_GetSoftwareVersion(serialNo)

def SCC_SetCalibrationFile(serialNo, filename, enabled):
    return _stepper_motor.SCC_SetCalibrationFile(serialNo, filename, enabled)

def SCC_IsCalibrationActive(serialNo):
    return _stepper_motor.SCC_IsCalibrationActive(serialNo)

def SCC_GetCalibrationFile(serialNo, filename, sizeOfBuffer):
    return _stepper_motor.SCC_GetCalibrationFile(serialNo, filename, sizeOfBuffer)

def SCC_GetHubBay(serialNo):
    return _stepper_motor.SCC_GetHubBay(serialNo)

def SCC_LoadSettings(serialNo):
    return _stepper_motor.SCC_LoadSettings(serialNo)

def SCC_LoadNamedSettings(serialNo, settingsName):
    return _stepper_motor.SCC_LoadNamedSettings(serialNo, settingsName)

def SCC_PersistSettings(serialNo):
    return _stepper_motor.SCC_PersistSettings(serialNo)

def SCC_DisableChannel(serialNo):
    return _stepper_motor.SCC_DisableChannel(serialNo)

def SCC_EnableChannel(serialNo):
    return _stepper_motor.SCC_EnableChannel(serialNo)

def SCC_CanDeviceLockFrontPanel(serialNo):
    return _stepper_motor.SCC_CanDeviceLockFrontPanel(serialNo)

def SCC_GetFrontPanelLocked(serialNo):
    return _stepper_motor.SCC_GetFrontPanelLocked(serialNo)

def SCC_RequestFrontPanelLocked(serialNo):
    return _stepper_motor.SCC_RequestFrontPanelLocked(serialNo)

def SCC_SetFrontPanelLock(serialNo, locked):
    return _stepper_motor.SCC_SetFrontPanelLock(serialNo, locked)

def SCC_GetNumberPositions(serialNo):
    return _stepper_motor.SCC_GetNumberPositions(serialNo)

def SCC_MoveToPosition(serialNo, index):
    return _stepper_motor.SCC_MoveToPosition(serialNo, index)

def SCC_GetPosition(serialNo):
    return _stepper_motor.SCC_GetPosition(serialNo)

def SCC_CanHome(serialNo):
    return _stepper_motor.SCC_CanHome(serialNo)

def SCC_NeedsHoming(serialNo):
    return _stepper_motor.SCC_NeedsHoming(serialNo)

def SCC_CanMoveWithoutHomingFirst(serialNo):
    return _stepper_motor.SCC_CanMoveWithoutHomingFirst(serialNo)

def SCC_Home(serialNo):
    return _stepper_motor.SCC_Home(serialNo)

def SCC_ClearMessageQueue(serialNo):
    return _stepper_motor.SCC_ClearMessageQueue(serialNo)

def SCC_RegisterMessageCallback(serialNo, functionPointer):
    return _stepper_motor.SCC_RegisterMessageCallback(serialNo, functionPointer)

def SCC_MessageQueueSize(serialNo):
    return _stepper_motor.SCC_MessageQueueSize(serialNo)

def SCC_GetNextMessage(serialNo, messageType, messageID, messageData):
    return _stepper_motor.SCC_GetNextMessage(serialNo, messageType, messageID, messageData)

def SCC_WaitForMessage(serialNo, messageType, messageID, messageData):
    return _stepper_motor.SCC_WaitForMessage(serialNo, messageType, messageID, messageData)

def SCC_RequestHomingParams(serialNo):
    return _stepper_motor.SCC_RequestHomingParams(serialNo)

def SCC_GetHomingVelocity(serialNo):
    return _stepper_motor.SCC_GetHomingVelocity(serialNo)

def SCC_SetHomingVelocity(serialNo, velocity):
    return _stepper_motor.SCC_SetHomingVelocity(serialNo, velocity)

def SCC_MoveRelative(serialNo, displacement):
    return _stepper_motor.SCC_MoveRelative(serialNo, displacement)

def SCC_RequestJogParams(serialNo):
    return _stepper_motor.SCC_RequestJogParams(serialNo)

def SCC_GetJogMode(serialNo, mode, stopMode):
    return _stepper_motor.SCC_GetJogMode(serialNo, mode, stopMode)

def SCC_SetJogMode(serialNo, mode, stopMode):
    return _stepper_motor.SCC_SetJogMode(serialNo, mode, stopMode)

def SCC_GetJogStepSize(serialNo):
    return _stepper_motor.SCC_GetJogStepSize(serialNo)

def SCC_SetJogStepSize(serialNo, stepSize):
    return _stepper_motor.SCC_SetJogStepSize(serialNo, stepSize)

def SCC_GetJogVelParams(serialNo, acceleration, maxVelocity):
    return _stepper_motor.SCC_GetJogVelParams(serialNo, acceleration, maxVelocity)

def SCC_SetJogVelParams(serialNo, acceleration, maxVelocity):
    return _stepper_motor.SCC_SetJogVelParams(serialNo, acceleration, maxVelocity)

def SCC_MoveJog(serialNo, jogDirection):
    return _stepper_motor.SCC_MoveJog(serialNo, jogDirection)

def SCC_RequestVelParams(serialNo):
    return _stepper_motor.SCC_RequestVelParams(serialNo)

def SCC_GetVelParams(serialNo, acceleration, maxVelocity):
    return _stepper_motor.SCC_GetVelParams(serialNo, acceleration, maxVelocity)

def SCC_SetVelParams(serialNo, acceleration, maxVelocity):
    return _stepper_motor.SCC_SetVelParams(serialNo, acceleration, maxVelocity)

def SCC_MoveAtVelocity(serialNo, direction):
    return _stepper_motor.SCC_MoveAtVelocity(serialNo, direction)

def SCC_SetDirection(serialNo, reverse):
    return _stepper_motor.SCC_SetDirection(serialNo, reverse)

def SCC_StopImmediate(serialNo):
    return _stepper_motor.SCC_StopImmediate(serialNo)

def SCC_StopProfiled(serialNo):
    return _stepper_motor.SCC_StopProfiled(serialNo)

def SCC_RequestBacklash(serialNo):
    return _stepper_motor.SCC_RequestBacklash(serialNo)

def SCC_GetBacklash(serialNo):
    return _stepper_motor.SCC_GetBacklash(serialNo)

def SCC_SetBacklash(serialNo, distance):
    return _stepper_motor.SCC_SetBacklash(serialNo, distance)

def SCC_GetPositionCounter(serialNo):
    return _stepper_motor.SCC_GetPositionCounter(serialNo)

def SCC_SetPositionCounter(serialNo, count):
    return _stepper_motor.SCC_SetPositionCounter(serialNo, count)

def SCC_RequestEncoderCounter(serialNo):
    return _stepper_motor.SCC_RequestEncoderCounter(serialNo)

def SCC_GetEncoderCounter(serialNo):
    return _stepper_motor.SCC_GetEncoderCounter(serialNo)

def SCC_SetEncoderCounter(serialNo, count):
    return _stepper_motor.SCC_SetEncoderCounter(serialNo, count)

def SCC_RequestLimitSwitchParams(serialNo):
    return _stepper_motor.SCC_RequestLimitSwitchParams(serialNo)

def SCC_GetLimitSwitchParams(serialNo, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode):
    return _stepper_motor.SCC_GetLimitSwitchParams(serialNo, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode)

def SCC_SetLimitSwitchParams(serialNo, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode):
    return _stepper_motor.SCC_SetLimitSwitchParams(serialNo, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode)

def SCC_GetSoftLimitMode(serialNo):
    return _stepper_motor.SCC_GetSoftLimitMode(serialNo)

def SCC_SetLimitsSoftwareApproachPolicy(serialNo, limitsSoftwareApproachPolicy):
    return _stepper_motor.SCC_SetLimitsSoftwareApproachPolicy(serialNo, limitsSoftwareApproachPolicy)

def SCC_RequestMMIParams(serialNo):
    return _stepper_motor.SCC_RequestMMIParams(serialNo)

def SCC_GetMMIParamsExt(serialNo, wheelMode, wheelMaxVelocity, wheelAcceleration, directionSense, presetPosition1, presetPosition2, displayIntensity, displayTimeout, displayDimIntensity):
    return _stepper_motor.SCC_GetMMIParamsExt(serialNo, wheelMode, wheelMaxVelocity, wheelAcceleration, directionSense, presetPosition1, presetPosition2, displayIntensity, displayTimeout, displayDimIntensity)

def SCC_GetMMIParams(serialNo, wheelMode, wheelMaxVelocity, wheelAcceleration, directionSense, presetPosition1, presetPosition2, displayIntensity):
    return _stepper_motor.SCC_GetMMIParams(serialNo, wheelMode, wheelMaxVelocity, wheelAcceleration, directionSense, presetPosition1, presetPosition2, displayIntensity)

def SCC_SetMMIParamsExt(serialNo, wheelMode, wheelMaxVelocity, wheelAcceleration, directionSense, presetPosition1, presetPosition2, displayIntensity, displayTimeout, displayDimIntensity):
    return _stepper_motor.SCC_SetMMIParamsExt(serialNo, wheelMode, wheelMaxVelocity, wheelAcceleration, directionSense, presetPosition1, presetPosition2, displayIntensity, displayTimeout, displayDimIntensity)

def SCC_SetMMIParams(serialNo, wheelMode, wheelMaxVelocity, wheelAcceleration, directionSense, presetPosition1, presetPosition2, displayIntensity):
    return _stepper_motor.SCC_SetMMIParams(serialNo, wheelMode, wheelMaxVelocity, wheelAcceleration, directionSense, presetPosition1, presetPosition2, displayIntensity)

def SCC_RequestTriggerConfigParams(serialNo):
    return _stepper_motor.SCC_RequestTriggerConfigParams(serialNo)

def SCC_GetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity):
    return _stepper_motor.SCC_GetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity)

def SCC_SetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity):
    return _stepper_motor.SCC_SetTriggerConfigParams(serialNo, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity)

def SCC_RequestPosTriggerParams(serialNo):
    return _stepper_motor.SCC_RequestPosTriggerParams(serialNo)

def SCC_GetTriggerParamsParams(serialNo, triggerStartPositionFwd, triggerIntervalFwd, triggerPulseCountFwd, triggerStartPositionRev, triggerIntervalRev, triggerPulseCountRev, triggerPulseWidth, cycleCount):
    return _stepper_motor.SCC_GetTriggerParamsParams(serialNo, triggerStartPositionFwd, triggerIntervalFwd, triggerPulseCountFwd, triggerStartPositionRev, triggerIntervalRev, triggerPulseCountRev, triggerPulseWidth, cycleCount)

def SCC_SetTriggerParamsParams(serialNo, triggerStartPositionFwd, triggerIntervalFwd, triggerPulseCountFwd, triggerStartPositionRev, triggerIntervalRev, triggerPulseCountRev, triggerPulseWidth, cycleCount):
    return _stepper_motor.SCC_SetTriggerParamsParams(serialNo, triggerStartPositionFwd, triggerIntervalFwd, triggerPulseCountFwd, triggerStartPositionRev, triggerIntervalRev, triggerPulseCountRev, triggerPulseWidth, cycleCount)

def SCC_GetMMIParamsBlock(serialNo, mmiParams):
    return _stepper_motor.SCC_GetMMIParamsBlock(serialNo, mmiParams)

def SCC_SetMMIParamsBlock(serialNo, mmiParams):
    return _stepper_motor.SCC_SetMMIParamsBlock(serialNo, mmiParams)

def SCC_GetTriggerConfigParamsBlock(serialNo, triggerConfigParams):
    return _stepper_motor.SCC_GetTriggerConfigParamsBlock(serialNo, triggerConfigParams)

def SCC_SetTriggerConfigParamsBlock(serialNo, triggerConfigParams):
    return _stepper_motor.SCC_SetTriggerConfigParamsBlock(serialNo, triggerConfigParams)

def SCC_GetTriggerParamsParamsBlock(serialNo, triggerParamsParams):
    return _stepper_motor.SCC_GetTriggerParamsParamsBlock(serialNo, triggerParamsParams)

def SCC_SetTriggerParamsParamsBlock(serialNo, triggerParamsParams):
    return _stepper_motor.SCC_SetTriggerParamsParamsBlock(serialNo, triggerParamsParams)

def SCC_GetVelParamsBlock(serialNo, velocityParams):
    return _stepper_motor.SCC_GetVelParamsBlock(serialNo, velocityParams)

def SCC_SetVelParamsBlock(serialNo, velocityParams):
    return _stepper_motor.SCC_SetVelParamsBlock(serialNo, velocityParams)

def SCC_RequestMoveAbsolutePosition(serialNo):
    return _stepper_motor.SCC_RequestMoveAbsolutePosition(serialNo)

def SCC_SetMoveAbsolutePosition(serialNo, position):
    return _stepper_motor.SCC_SetMoveAbsolutePosition(serialNo, position)

def SCC_GetMoveAbsolutePosition(serialNo):
    return _stepper_motor.SCC_GetMoveAbsolutePosition(serialNo)

def SCC_MoveAbsolute(serialNo):
    return _stepper_motor.SCC_MoveAbsolute(serialNo)

def SCC_RequestMoveRelativeDistance(serialNo):
    return _stepper_motor.SCC_RequestMoveRelativeDistance(serialNo)

def SCC_SetMoveRelativeDistance(serialNo, distance):
    return _stepper_motor.SCC_SetMoveRelativeDistance(serialNo, distance)

def SCC_GetMoveRelativeDistance(serialNo):
    return _stepper_motor.SCC_GetMoveRelativeDistance(serialNo)

def SCC_MoveRelativeDistance(serialNo):
    return _stepper_motor.SCC_MoveRelativeDistance(serialNo)

def SCC_GetHomingParamsBlock(serialNo, homingParams):
    return _stepper_motor.SCC_GetHomingParamsBlock(serialNo, homingParams)

def SCC_SetHomingParamsBlock(serialNo, homingParams):
    return _stepper_motor.SCC_SetHomingParamsBlock(serialNo, homingParams)

def SCC_GetJogParamsBlock(serialNo, jogParams):
    return _stepper_motor.SCC_GetJogParamsBlock(serialNo, jogParams)

def SCC_SetJogParamsBlock(serialNo, jogParams):
    return _stepper_motor.SCC_SetJogParamsBlock(serialNo, jogParams)

def SCC_GetLimitSwitchParamsBlock(serialNo, limitSwitchParams):
    return _stepper_motor.SCC_GetLimitSwitchParamsBlock(serialNo, limitSwitchParams)

def SCC_SetLimitSwitchParamsBlock(serialNo, limitSwitchParams):
    return _stepper_motor.SCC_SetLimitSwitchParamsBlock(serialNo, limitSwitchParams)

def SCC_RequestPowerParams(serialNo):
    return _stepper_motor.SCC_RequestPowerParams(serialNo)

def SCC_GetPowerParams(serialNo, powerParams):
    return _stepper_motor.SCC_GetPowerParams(serialNo, powerParams)

def SCC_SetPowerParams(serialNo, powerParams):
    return _stepper_motor.SCC_SetPowerParams(serialNo, powerParams)

def SCC_RequestBowIndex(serialNo):
    return _stepper_motor.SCC_RequestBowIndex(serialNo)

def SCC_GetBowIndex(serialNo):
    return _stepper_motor.SCC_GetBowIndex(serialNo)

def SCC_SetBowIndex(serialNo, bowIndex):
    return _stepper_motor.SCC_SetBowIndex(serialNo, bowIndex)

def SCC_UsesPIDLoopEncoding(serialNo):
    return _stepper_motor.SCC_UsesPIDLoopEncoding(serialNo)

def SCC_SetPIDLoopEncoderParams(serialNo, params):
    return _stepper_motor.SCC_SetPIDLoopEncoderParams(serialNo, params)

def SCC_SetPIDLoopEncoderCoeff(serialNo, coeff):
    return _stepper_motor.SCC_SetPIDLoopEncoderCoeff(serialNo, coeff)

def SCC_RequestPIDLoopEncoderParams(serialNo):
    return _stepper_motor.SCC_RequestPIDLoopEncoderParams(serialNo)

def SCC_GetPIDLoopEncoderParams(serialNo, params):
    return _stepper_motor.SCC_GetPIDLoopEncoderParams(serialNo, params)

def SCC_GetPIDLoopEncoderCoeff(serialNo):
    return _stepper_motor.SCC_GetPIDLoopEncoderCoeff(serialNo)

def SCC_SuspendMoveMessages(serialNo):
    return _stepper_motor.SCC_SuspendMoveMessages(serialNo)

def SCC_ResumeMoveMessages(serialNo):
    return _stepper_motor.SCC_ResumeMoveMessages(serialNo)

def SCC_RequestPosition(serialNo):
    return _stepper_motor.SCC_RequestPosition(serialNo)

def SCC_RequestStatusBits(serialNo):
    return _stepper_motor.SCC_RequestStatusBits(serialNo)

def SCC_GetStatusBits(serialNo):
    return _stepper_motor.SCC_GetStatusBits(serialNo)

def SCC_StartPolling(serialNo, milliseconds):
    return _stepper_motor.SCC_StartPolling(serialNo, milliseconds)

def SCC_PollingDuration(serialNo):
    return _stepper_motor.SCC_PollingDuration(serialNo)

def SCC_StopPolling(serialNo):
    return _stepper_motor.SCC_StopPolling(serialNo)

def SCC_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS):
    return _stepper_motor.SCC_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS)

def SCC_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout):
    return _stepper_motor.SCC_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout)

def SCC_HasLastMsgTimerOverrun(serialNo):
    return _stepper_motor.SCC_HasLastMsgTimerOverrun(serialNo)

def SCC_RequestSettings(serialNo):
    return _stepper_motor.SCC_RequestSettings(serialNo)

def SCC_GetStageAxisMinPos(serialNo):
    return _stepper_motor.SCC_GetStageAxisMinPos(serialNo)

def SCC_GetStageAxisMaxPos(serialNo):
    return _stepper_motor.SCC_GetStageAxisMaxPos(serialNo)

def SCC_SetStageAxisLimits(serialNo, minPosition, maxPosition):
    return _stepper_motor.SCC_SetStageAxisLimits(serialNo, minPosition, maxPosition)

def SCC_SetMotorTravelMode(serialNo, travelMode):
    return _stepper_motor.SCC_SetMotorTravelMode(serialNo, travelMode)

def SCC_GetMotorTravelMode(serialNo):
    return _stepper_motor.SCC_GetMotorTravelMode(serialNo)

def SCC_SetMotorParams(serialNo, stepsPerRev, gearBoxRatio, pitch):
    return _stepper_motor.SCC_SetMotorParams(serialNo, stepsPerRev, gearBoxRatio, pitch)

def SCC_GetMotorParams(serialNo, stepsPerRev, gearBoxRatio, pitch):
    return _stepper_motor.SCC_GetMotorParams(serialNo, stepsPerRev, gearBoxRatio, pitch)

def SCC_SetMotorParamsExt(serialNo, stepsPerRev, gearBoxRatio, pitch):
    return _stepper_motor.SCC_SetMotorParamsExt(serialNo, stepsPerRev, gearBoxRatio, pitch)

def SCC_GetMotorParamsExt(serialNo, stepsPerRev, gearBoxRatio, pitch):
    return _stepper_motor.SCC_GetMotorParamsExt(serialNo, stepsPerRev, gearBoxRatio, pitch)

def SCC_SetMotorVelocityLimits(serialNo, maxVelocity, maxAcceleration):
    return _stepper_motor.SCC_SetMotorVelocityLimits(serialNo, maxVelocity, maxAcceleration)

def SCC_GetMotorVelocityLimits(serialNo, maxVelocity, maxAcceleration):
    return _stepper_motor.SCC_GetMotorVelocityLimits(serialNo, maxVelocity, maxAcceleration)

def SCC_ResetRotationModes(serialNo):
    return _stepper_motor.SCC_ResetRotationModes(serialNo)

def SCC_SetRotationModes(serialNo, mode, direction):
    return _stepper_motor.SCC_SetRotationModes(serialNo, mode, direction)

def SCC_SetMotorTravelLimits(serialNo, minPosition, maxPosition):
    return _stepper_motor.SCC_SetMotorTravelLimits(serialNo, minPosition, maxPosition)

def SCC_GetMotorTravelLimits(serialNo, minPosition, maxPosition):
    return _stepper_motor.SCC_GetMotorTravelLimits(serialNo, minPosition, maxPosition)

def SCC_RequestDigitalOutputs(serialNo):
    return _stepper_motor.SCC_RequestDigitalOutputs(serialNo)

def SCC_GetDigitalOutputs(serialNo):
    return _stepper_motor.SCC_GetDigitalOutputs(serialNo)

def SCC_SetDigitalOutputs(serialNo, outputsBits):
    return _stepper_motor.SCC_SetDigitalOutputs(serialNo, outputsBits)

def SCC_GetRealValueFromDeviceUnit(serialNo, device_unit, real_unit, unitType):
    return _stepper_motor.SCC_GetRealValueFromDeviceUnit(serialNo, device_unit, real_unit, unitType)

def SCC_GetDeviceUnitFromRealValue(serialNo, real_unit, device_unit, unitType):
    return _stepper_motor.SCC_GetDeviceUnitFromRealValue(serialNo, real_unit, device_unit, unitType)

