# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _inertial_motor
else:
    import _inertial_motor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _inertial_motor.FT_OK
FT_InvalidHandle = _inertial_motor.FT_InvalidHandle
FT_DeviceNotFound = _inertial_motor.FT_DeviceNotFound
FT_DeviceNotOpened = _inertial_motor.FT_DeviceNotOpened
FT_IOError = _inertial_motor.FT_IOError
FT_InsufficientResources = _inertial_motor.FT_InsufficientResources
FT_InvalidParameter = _inertial_motor.FT_InvalidParameter
FT_DeviceNotPresent = _inertial_motor.FT_DeviceNotPresent
FT_IncorrectDevice = _inertial_motor.FT_IncorrectDevice
MOT_NotMotor = _inertial_motor.MOT_NotMotor
MOT_DCMotor = _inertial_motor.MOT_DCMotor
MOT_StepperMotor = _inertial_motor.MOT_StepperMotor
MOT_BrushlessMotor = _inertial_motor.MOT_BrushlessMotor
MOT_CustomMotor = _inertial_motor.MOT_CustomMotor
Undefined_stage = _inertial_motor.Undefined_stage
PIA_stage = _inertial_motor.PIA_stage
PDR_Stage = _inertial_motor.PDR_Stage
Channel1 = _inertial_motor.Channel1
Channel2 = _inertial_motor.Channel2
Channel3 = _inertial_motor.Channel3
Channel4 = _inertial_motor.Channel4
JogContinuous = _inertial_motor.JogContinuous
JogStep = _inertial_motor.JogStep
Forward = _inertial_motor.Forward
Reverse = _inertial_motor.Reverse
class KIM_DriveOPParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _maxVoltage = property(_inertial_motor.KIM_DriveOPParameters__maxVoltage_get, _inertial_motor.KIM_DriveOPParameters__maxVoltage_set)
    _stepRate = property(_inertial_motor.KIM_DriveOPParameters__stepRate_get, _inertial_motor.KIM_DriveOPParameters__stepRate_set)
    _stepAcceleration = property(_inertial_motor.KIM_DriveOPParameters__stepAcceleration_get, _inertial_motor.KIM_DriveOPParameters__stepAcceleration_set)

    def __init__(self):
        _inertial_motor.KIM_DriveOPParameters_swiginit(self, _inertial_motor.new_KIM_DriveOPParameters())
    __swig_destroy__ = _inertial_motor.delete_KIM_DriveOPParameters

# Register KIM_DriveOPParameters in _inertial_motor:
_inertial_motor.KIM_DriveOPParameters_swigregister(KIM_DriveOPParameters)
class KIM_JogParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _jogMode = property(_inertial_motor.KIM_JogParameters__jogMode_get, _inertial_motor.KIM_JogParameters__jogMode_set)
    _jogStepSizeFwd = property(_inertial_motor.KIM_JogParameters__jogStepSizeFwd_get, _inertial_motor.KIM_JogParameters__jogStepSizeFwd_set)
    _jogStepSizeRev = property(_inertial_motor.KIM_JogParameters__jogStepSizeRev_get, _inertial_motor.KIM_JogParameters__jogStepSizeRev_set)
    _jogStepRate = property(_inertial_motor.KIM_JogParameters__jogStepRate_get, _inertial_motor.KIM_JogParameters__jogStepRate_set)
    _jogStepAcceleration = property(_inertial_motor.KIM_JogParameters__jogStepAcceleration_get, _inertial_motor.KIM_JogParameters__jogStepAcceleration_set)

    def __init__(self):
        _inertial_motor.KIM_JogParameters_swiginit(self, _inertial_motor.new_KIM_JogParameters())
    __swig_destroy__ = _inertial_motor.delete_KIM_JogParameters

# Register KIM_JogParameters in _inertial_motor:
_inertial_motor.KIM_JogParameters_swigregister(KIM_JogParameters)
FB_LimitSwitch = _inertial_motor.FB_LimitSwitch
FB_Encoder = _inertial_motor.FB_Encoder
Ignore = _inertial_motor.Ignore
SwitchMakes = _inertial_motor.SwitchMakes
SwitchBreaks = _inertial_motor.SwitchBreaks
SwitchMakes_HomeOnly = _inertial_motor.SwitchMakes_HomeOnly
SwitchBreaks_HomeOnly = _inertial_motor.SwitchBreaks_HomeOnly
Dir_Disabled = _inertial_motor.Dir_Disabled
Dir_Forward = _inertial_motor.Dir_Forward
Dir_Reverse = _inertial_motor.Dir_Reverse
Trig_Disabled = _inertial_motor.Trig_Disabled
Trig_In_GPI = _inertial_motor.Trig_In_GPI
Trig_InRelativeMove = _inertial_motor.Trig_InRelativeMove
Trig_InAbsoluteMove = _inertial_motor.Trig_InAbsoluteMove
Trig_InResetCount = _inertial_motor.Trig_InResetCount
Trig_Out_GP0 = _inertial_motor.Trig_Out_GP0
Trig_Out_InMotion = _inertial_motor.Trig_Out_InMotion
Trig_Out_AtMaxVelocity = _inertial_motor.Trig_Out_AtMaxVelocity
Trig_Out_PosStepFwd = _inertial_motor.Trig_Out_PosStepFwd
Trig_Out_PosStepRev = _inertial_motor.Trig_Out_PosStepRev
Trig_Out_PosStepBoth = _inertial_motor.Trig_Out_PosStepBoth
Trig_Out_AtFwdLimit = _inertial_motor.Trig_Out_AtFwdLimit
Trig_Out_AtRevLimit = _inertial_motor.Trig_Out_AtRevLimit
Trig_Out_AtEitherLimit = _inertial_motor.Trig_Out_AtEitherLimit
Trig_High = _inertial_motor.Trig_High
Trig_Low = _inertial_motor.Trig_Low
JS_Velocity = _inertial_motor.JS_Velocity
JS_Jog = _inertial_motor.JS_Jog
JS_GotoPosition = _inertial_motor.JS_GotoPosition
_None = _inertial_motor._None
Channel1Only = _inertial_motor.Channel1Only
Channel2Only = _inertial_motor.Channel2Only
Channel3Only = _inertial_motor.Channel3Only
Channel4Only = _inertial_motor.Channel4Only
Channels1and2 = _inertial_motor.Channels1and2
Channels3and4 = _inertial_motor.Channels3and4
class KIM_LimitSwitchParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _forwardLimit = property(_inertial_motor.KIM_LimitSwitchParameters__forwardLimit_get, _inertial_motor.KIM_LimitSwitchParameters__forwardLimit_set)
    _reverseLimit = property(_inertial_motor.KIM_LimitSwitchParameters__reverseLimit_get, _inertial_motor.KIM_LimitSwitchParameters__reverseLimit_set)
    _stageID = property(_inertial_motor.KIM_LimitSwitchParameters__stageID_get, _inertial_motor.KIM_LimitSwitchParameters__stageID_set)

    def __init__(self):
        _inertial_motor.KIM_LimitSwitchParameters_swiginit(self, _inertial_motor.new_KIM_LimitSwitchParameters())
    __swig_destroy__ = _inertial_motor.delete_KIM_LimitSwitchParameters

# Register KIM_LimitSwitchParameters in _inertial_motor:
_inertial_motor.KIM_LimitSwitchParameters_swigregister(KIM_LimitSwitchParameters)
class KIM_HomeParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _homeDirection = property(_inertial_motor.KIM_HomeParameters__homeDirection_get, _inertial_motor.KIM_HomeParameters__homeDirection_set)
    _homeLimitSwitch = property(_inertial_motor.KIM_HomeParameters__homeLimitSwitch_get, _inertial_motor.KIM_HomeParameters__homeLimitSwitch_set)
    _homeStepRate = property(_inertial_motor.KIM_HomeParameters__homeStepRate_get, _inertial_motor.KIM_HomeParameters__homeStepRate_set)
    _homeOffset = property(_inertial_motor.KIM_HomeParameters__homeOffset_get, _inertial_motor.KIM_HomeParameters__homeOffset_set)

    def __init__(self):
        _inertial_motor.KIM_HomeParameters_swiginit(self, _inertial_motor.new_KIM_HomeParameters())
    __swig_destroy__ = _inertial_motor.delete_KIM_HomeParameters

# Register KIM_HomeParameters in _inertial_motor:
_inertial_motor.KIM_HomeParameters_swigregister(KIM_HomeParameters)
class KIM_MMIParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _joystickMode = property(_inertial_motor.KIM_MMIParameters__joystickMode_get, _inertial_motor.KIM_MMIParameters__joystickMode_set)
    _maxStepRate = property(_inertial_motor.KIM_MMIParameters__maxStepRate_get, _inertial_motor.KIM_MMIParameters__maxStepRate_set)
    _directionSense = property(_inertial_motor.KIM_MMIParameters__directionSense_get, _inertial_motor.KIM_MMIParameters__directionSense_set)
    _displayIntensity = property(_inertial_motor.KIM_MMIParameters__displayIntensity_get, _inertial_motor.KIM_MMIParameters__displayIntensity_set)

    def __init__(self):
        _inertial_motor.KIM_MMIParameters_swiginit(self, _inertial_motor.new_KIM_MMIParameters())
    __swig_destroy__ = _inertial_motor.delete_KIM_MMIParameters

# Register KIM_MMIParameters in _inertial_motor:
_inertial_motor.KIM_MMIParameters_swigregister(KIM_MMIParameters)
class KIM_MMIChannelParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _presetPos1 = property(_inertial_motor.KIM_MMIChannelParameters__presetPos1_get, _inertial_motor.KIM_MMIChannelParameters__presetPos1_set)
    _presetPos2 = property(_inertial_motor.KIM_MMIChannelParameters__presetPos2_get, _inertial_motor.KIM_MMIChannelParameters__presetPos2_set)

    def __init__(self):
        _inertial_motor.KIM_MMIChannelParameters_swiginit(self, _inertial_motor.new_KIM_MMIChannelParameters())
    __swig_destroy__ = _inertial_motor.delete_KIM_MMIChannelParameters

# Register KIM_MMIChannelParameters in _inertial_motor:
_inertial_motor.KIM_MMIChannelParameters_swigregister(KIM_MMIChannelParameters)
class KIM_TrigIOConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _trigChannel1 = property(_inertial_motor.KIM_TrigIOConfig__trigChannel1_get, _inertial_motor.KIM_TrigIOConfig__trigChannel1_set)
    _trigChannel2 = property(_inertial_motor.KIM_TrigIOConfig__trigChannel2_get, _inertial_motor.KIM_TrigIOConfig__trigChannel2_set)
    _trig1Mode = property(_inertial_motor.KIM_TrigIOConfig__trig1Mode_get, _inertial_motor.KIM_TrigIOConfig__trig1Mode_set)
    _trig1Polarity = property(_inertial_motor.KIM_TrigIOConfig__trig1Polarity_get, _inertial_motor.KIM_TrigIOConfig__trig1Polarity_set)
    _trig2Mode = property(_inertial_motor.KIM_TrigIOConfig__trig2Mode_get, _inertial_motor.KIM_TrigIOConfig__trig2Mode_set)
    _trig2Polarity = property(_inertial_motor.KIM_TrigIOConfig__trig2Polarity_get, _inertial_motor.KIM_TrigIOConfig__trig2Polarity_set)

    def __init__(self):
        _inertial_motor.KIM_TrigIOConfig_swiginit(self, _inertial_motor.new_KIM_TrigIOConfig())
    __swig_destroy__ = _inertial_motor.delete_KIM_TrigIOConfig

# Register KIM_TrigIOConfig in _inertial_motor:
_inertial_motor.KIM_TrigIOConfig_swigregister(KIM_TrigIOConfig)
class KIM_TrigParamsParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _startPosFwd = property(_inertial_motor.KIM_TrigParamsParameters__startPosFwd_get, _inertial_motor.KIM_TrigParamsParameters__startPosFwd_set)
    _intervalFwd = property(_inertial_motor.KIM_TrigParamsParameters__intervalFwd_get, _inertial_motor.KIM_TrigParamsParameters__intervalFwd_set)
    _numberOfPulsesFwd = property(_inertial_motor.KIM_TrigParamsParameters__numberOfPulsesFwd_get, _inertial_motor.KIM_TrigParamsParameters__numberOfPulsesFwd_set)
    _startPosRev = property(_inertial_motor.KIM_TrigParamsParameters__startPosRev_get, _inertial_motor.KIM_TrigParamsParameters__startPosRev_set)
    _intervalRev = property(_inertial_motor.KIM_TrigParamsParameters__intervalRev_get, _inertial_motor.KIM_TrigParamsParameters__intervalRev_set)
    _numberOfPulsesRev = property(_inertial_motor.KIM_TrigParamsParameters__numberOfPulsesRev_get, _inertial_motor.KIM_TrigParamsParameters__numberOfPulsesRev_set)
    _pulseWidth = property(_inertial_motor.KIM_TrigParamsParameters__pulseWidth_get, _inertial_motor.KIM_TrigParamsParameters__pulseWidth_set)
    _numberOfCycles = property(_inertial_motor.KIM_TrigParamsParameters__numberOfCycles_get, _inertial_motor.KIM_TrigParamsParameters__numberOfCycles_set)
    _reserved = property(_inertial_motor.KIM_TrigParamsParameters__reserved_get, _inertial_motor.KIM_TrigParamsParameters__reserved_set)

    def __init__(self):
        _inertial_motor.KIM_TrigParamsParameters_swiginit(self, _inertial_motor.new_KIM_TrigParamsParameters())
    __swig_destroy__ = _inertial_motor.delete_KIM_TrigParamsParameters

# Register KIM_TrigParamsParameters in _inertial_motor:
_inertial_motor.KIM_TrigParamsParameters_swigregister(KIM_TrigParamsParameters)
class KIM_FeedbackSigParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _feedbackSignalMode = property(_inertial_motor.KIM_FeedbackSigParams__feedbackSignalMode_get, _inertial_motor.KIM_FeedbackSigParams__feedbackSignalMode_set)
    _encoderConst = property(_inertial_motor.KIM_FeedbackSigParams__encoderConst_get, _inertial_motor.KIM_FeedbackSigParams__encoderConst_set)
    _reserved = property(_inertial_motor.KIM_FeedbackSigParams__reserved_get, _inertial_motor.KIM_FeedbackSigParams__reserved_set)

    def __init__(self):
        _inertial_motor.KIM_FeedbackSigParams_swiginit(self, _inertial_motor.new_KIM_FeedbackSigParams())
    __swig_destroy__ = _inertial_motor.delete_KIM_FeedbackSigParams

# Register KIM_FeedbackSigParams in _inertial_motor:
_inertial_motor.KIM_FeedbackSigParams_swigregister(KIM_FeedbackSigParams)
class KIM_Status(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _position = property(_inertial_motor.KIM_Status__position_get, _inertial_motor.KIM_Status__position_set)
    _encoderCount = property(_inertial_motor.KIM_Status__encoderCount_get, _inertial_motor.KIM_Status__encoderCount_set)
    _statusBits = property(_inertial_motor.KIM_Status__statusBits_get, _inertial_motor.KIM_Status__statusBits_set)

    def __init__(self):
        _inertial_motor.KIM_Status_swiginit(self, _inertial_motor.new_KIM_Status())
    __swig_destroy__ = _inertial_motor.delete_KIM_Status

# Register KIM_Status in _inertial_motor:
_inertial_motor.KIM_Status_swigregister(KIM_Status)
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_inertial_motor.TLI_DeviceInfo_typeID_get, _inertial_motor.TLI_DeviceInfo_typeID_set)
    description = property(_inertial_motor.TLI_DeviceInfo_description_get, _inertial_motor.TLI_DeviceInfo_description_set)
    serialNo = property(_inertial_motor.TLI_DeviceInfo_serialNo_get, _inertial_motor.TLI_DeviceInfo_serialNo_set)
    PID = property(_inertial_motor.TLI_DeviceInfo_PID_get, _inertial_motor.TLI_DeviceInfo_PID_set)
    isKnownType = property(_inertial_motor.TLI_DeviceInfo_isKnownType_get, _inertial_motor.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_inertial_motor.TLI_DeviceInfo_motorType_get, _inertial_motor.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_inertial_motor.TLI_DeviceInfo_isPiezoDevice_get, _inertial_motor.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_inertial_motor.TLI_DeviceInfo_isLaser_get, _inertial_motor.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_inertial_motor.TLI_DeviceInfo_isCustomType_get, _inertial_motor.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_inertial_motor.TLI_DeviceInfo_isRack_get, _inertial_motor.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_inertial_motor.TLI_DeviceInfo_maxChannels_get, _inertial_motor.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _inertial_motor.TLI_DeviceInfo_swiginit(self, _inertial_motor.new_TLI_DeviceInfo())
    __swig_destroy__ = _inertial_motor.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _inertial_motor:
_inertial_motor.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_inertial_motor.TLI_HardwareInformation_serialNumber_get, _inertial_motor.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_inertial_motor.TLI_HardwareInformation_modelNumber_get, _inertial_motor.TLI_HardwareInformation_modelNumber_set)
    type = property(_inertial_motor.TLI_HardwareInformation_type_get, _inertial_motor.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_inertial_motor.TLI_HardwareInformation_firmwareVersion_get, _inertial_motor.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_inertial_motor.TLI_HardwareInformation_notes_get, _inertial_motor.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_inertial_motor.TLI_HardwareInformation_deviceDependantData_get, _inertial_motor.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_inertial_motor.TLI_HardwareInformation_hardwareVersion_get, _inertial_motor.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_inertial_motor.TLI_HardwareInformation_modificationState_get, _inertial_motor.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_inertial_motor.TLI_HardwareInformation_numChannels_get, _inertial_motor.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _inertial_motor.TLI_HardwareInformation_swiginit(self, _inertial_motor.new_TLI_HardwareInformation())
    __swig_destroy__ = _inertial_motor.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _inertial_motor:
_inertial_motor.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)

def TLI_BuildDeviceList():
    return _inertial_motor.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _inertial_motor.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _inertial_motor.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _inertial_motor.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _inertial_motor.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _inertial_motor.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _inertial_motor.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _inertial_motor.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNumber, info):
    return _inertial_motor.TLI_GetDeviceInfo(serialNumber, info)

def TLI_InitializeSimulations():
    return _inertial_motor.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _inertial_motor.TLI_UninitializeSimulations()

def KIM_Open(serialNumber):
    return _inertial_motor.KIM_Open(serialNumber)

def KIM_Close(serialNumber):
    return _inertial_motor.KIM_Close(serialNumber)

def KIM_CheckConnection(serialNumber):
    return _inertial_motor.KIM_CheckConnection(serialNumber)

def KIM_Identify(serialNumber):
    return _inertial_motor.KIM_Identify(serialNumber)

def KIM_GetHardwareInfo(serialNumber, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _inertial_motor.KIM_GetHardwareInfo(serialNumber, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def KIM_GetHardwareInfoBlock(serialNumber, hardwareInfo):
    return _inertial_motor.KIM_GetHardwareInfoBlock(serialNumber, hardwareInfo)

def KIM_GetFirmwareVersion(serialNumber):
    return _inertial_motor.KIM_GetFirmwareVersion(serialNumber)

def KIM_GetSoftwareVersion(serialNumber):
    return _inertial_motor.KIM_GetSoftwareVersion(serialNumber)

def KIM_LoadSettings(serialNumber):
    return _inertial_motor.KIM_LoadSettings(serialNumber)

def KIM_LoadNamedSettings(serialNumber, settingsName):
    return _inertial_motor.KIM_LoadNamedSettings(serialNumber, settingsName)

def KIM_PersistSettings(serialNumber):
    return _inertial_motor.KIM_PersistSettings(serialNumber)

def KIM_Disable(serialNumber):
    return _inertial_motor.KIM_Disable(serialNumber)

def KIM_DisableChannel(serialNumber, channel):
    return _inertial_motor.KIM_DisableChannel(serialNumber, channel)

def KIM_Enable(serialNumber):
    return _inertial_motor.KIM_Enable(serialNumber)

def KIM_EnableChannel(serialNumber, channel):
    return _inertial_motor.KIM_EnableChannel(serialNumber, channel)

def KIM_CanDeviceLockFrontPanel(serialNumber):
    return _inertial_motor.KIM_CanDeviceLockFrontPanel(serialNumber)

def KIM_GetFrontPanelLocked(serialNumber):
    return _inertial_motor.KIM_GetFrontPanelLocked(serialNumber)

def KIM_RequestFrontPanelLocked(serialNumber):
    return _inertial_motor.KIM_RequestFrontPanelLocked(serialNumber)

def KIM_SetFrontPanelLock(serialNumber, locked):
    return _inertial_motor.KIM_SetFrontPanelLock(serialNumber, locked)

def KIM_Reset(serialNumber):
    return _inertial_motor.KIM_Reset(serialNumber)

def KIM_Disconnect(serialNumber):
    return _inertial_motor.KIM_Disconnect(serialNumber)

def KIM_ClearMessageQueue(serialNumber):
    return _inertial_motor.KIM_ClearMessageQueue(serialNumber)

def KIM_RegisterMessageCallback(serialNumber, functionPointer):
    return _inertial_motor.KIM_RegisterMessageCallback(serialNumber, functionPointer)

def KIM_MessageQueueSize(serialNumber):
    return _inertial_motor.KIM_MessageQueueSize(serialNumber)

def KIM_GetNextMessage(serialNumber, messageType, messageID, messageData):
    return _inertial_motor.KIM_GetNextMessage(serialNumber, messageType, messageID, messageData)

def KIM_WaitForMessage(serialNumber, messageType, messageID, messageData):
    return _inertial_motor.KIM_WaitForMessage(serialNumber, messageType, messageID, messageData)

def KIM_Home(serialNumber, channel):
    return _inertial_motor.KIM_Home(serialNumber, channel)

def KIM_ZeroPosition(serialNumber, channel):
    return _inertial_motor.KIM_ZeroPosition(serialNumber, channel)

def KIM_SetPosition(serialNumber, channel, position):
    return _inertial_motor.KIM_SetPosition(serialNumber, channel, position)

def KIM_MoveAbsolute(serialNumber, channel, position):
    return _inertial_motor.KIM_MoveAbsolute(serialNumber, channel, position)

def KIM_MoveRelative(serialNumber, channel, stepSize):
    return _inertial_motor.KIM_MoveRelative(serialNumber, channel, stepSize)

def KIM_MoveJog(serialNumber, channel, jogDirection):
    return _inertial_motor.KIM_MoveJog(serialNumber, channel, jogDirection)

def KIM_MoveStop(serialNumber, channel):
    return _inertial_motor.KIM_MoveStop(serialNumber, channel)

def KIM_SupportsStageType(serialNumber):
    return _inertial_motor.KIM_SupportsStageType(serialNumber)

def KIM_GetStageType(serialNumber):
    return _inertial_motor.KIM_GetStageType(serialNumber)

def KIM_SetStageType(serialNumber, stageType):
    return _inertial_motor.KIM_SetStageType(serialNumber, stageType)

def KIM_RequestStageType(serialNumber):
    return _inertial_motor.KIM_RequestStageType(serialNumber)

def KIM_RequestDriveOPParameters(serialNumber, channel):
    return _inertial_motor.KIM_RequestDriveOPParameters(serialNumber, channel)

def KIM_SetDriveOPParameters(serialNumber, channel, maxVoltage, stepRate, stepAcceleration):
    return _inertial_motor.KIM_SetDriveOPParameters(serialNumber, channel, maxVoltage, stepRate, stepAcceleration)

def KIM_GetDriveOPParameters(serialNumber, channel, maxVoltage, stepRate, stepAcceleration):
    return _inertial_motor.KIM_GetDriveOPParameters(serialNumber, channel, maxVoltage, stepRate, stepAcceleration)

def KIM_SetDriveOPParametersStruct(serialNumber, channel, driveOPParameters):
    return _inertial_motor.KIM_SetDriveOPParametersStruct(serialNumber, channel, driveOPParameters)

def KIM_GetDriveOPParametersStruct(serialNumber, channel, driveOPParameters):
    return _inertial_motor.KIM_GetDriveOPParametersStruct(serialNumber, channel, driveOPParameters)

def KIM_RequestJogParameters(serialNumber, channel):
    return _inertial_motor.KIM_RequestJogParameters(serialNumber, channel)

def KIM_SetJogParameters(serialNumber, channel, jogMode, jogStepSizeFwd, jogStepSizeRev, jogStepRate, jogStepAcceleration):
    return _inertial_motor.KIM_SetJogParameters(serialNumber, channel, jogMode, jogStepSizeFwd, jogStepSizeRev, jogStepRate, jogStepAcceleration)

def KIM_GetJogParameters(serialNumber, channel, jogMode, jogStepSizeFwd, jogStepSizeRev, jogStepRate, jogStepAcceleration):
    return _inertial_motor.KIM_GetJogParameters(serialNumber, channel, jogMode, jogStepSizeFwd, jogStepSizeRev, jogStepRate, jogStepAcceleration)

def KIM_SetJogParametersStruct(serialNumber, channel, jogParameters):
    return _inertial_motor.KIM_SetJogParametersStruct(serialNumber, channel, jogParameters)

def KIM_GetJogParametersStruct(serialNumber, channel, jogParameters):
    return _inertial_motor.KIM_GetJogParametersStruct(serialNumber, channel, jogParameters)

def KIM_GetLimitSwitchParameters(serialNumber, channel, forwardLimit, reverseLimit, stageID):
    return _inertial_motor.KIM_GetLimitSwitchParameters(serialNumber, channel, forwardLimit, reverseLimit, stageID)

def KIM_SetLimitSwitchParameters(serialNumber, channel, forwardLimit, reverseLimit, stageID):
    return _inertial_motor.KIM_SetLimitSwitchParameters(serialNumber, channel, forwardLimit, reverseLimit, stageID)

def KIM_GetLimitSwitchParametersStruct(serialNumber, channel, limitSwitchParameters):
    return _inertial_motor.KIM_GetLimitSwitchParametersStruct(serialNumber, channel, limitSwitchParameters)

def KIM_SetLimitSwitchParametersStruct(serialNumber, channel, limitSwitchParameters):
    return _inertial_motor.KIM_SetLimitSwitchParametersStruct(serialNumber, channel, limitSwitchParameters)

def KIM_RequestLimitSwitchParameters(serialNumber, channel):
    return _inertial_motor.KIM_RequestLimitSwitchParameters(serialNumber, channel)

def KIM_GetHomeParameters(serialNumber, channel, homeDirection, homeLimitSwitch, homeStepRate, homeOffset):
    return _inertial_motor.KIM_GetHomeParameters(serialNumber, channel, homeDirection, homeLimitSwitch, homeStepRate, homeOffset)

def KIM_SetHomeParameters(serialNumber, channel, homeDirection, homeLimitSwitch, homeStepRate, homeOffset):
    return _inertial_motor.KIM_SetHomeParameters(serialNumber, channel, homeDirection, homeLimitSwitch, homeStepRate, homeOffset)

def KIM_GetHomeParametersStruct(serialNumber, channel, homeParameters):
    return _inertial_motor.KIM_GetHomeParametersStruct(serialNumber, channel, homeParameters)

def KIM_SetHomeParametersStruct(serialNumber, channel, homeParameters):
    return _inertial_motor.KIM_SetHomeParametersStruct(serialNumber, channel, homeParameters)

def KIM_RequestHomeParameters(serialNumber, channel):
    return _inertial_motor.KIM_RequestHomeParameters(serialNumber, channel)

def KIM_GetMMIDeviceParameters(serialNumber, channel, joystickMode, maxStepRate, directionSense, presetPos1, presetPos2, displayIntensity):
    return _inertial_motor.KIM_GetMMIDeviceParameters(serialNumber, channel, joystickMode, maxStepRate, directionSense, presetPos1, presetPos2, displayIntensity)

def KIM_GetMMIChannelParameters(serialNumber, channel, presetPos1, presetPos2):
    return _inertial_motor.KIM_GetMMIChannelParameters(serialNumber, channel, presetPos1, presetPos2)

def KIM_SetMMIDeviceParameters(serialNumber, joystickMode, maxStepRate, directionSense, displayIntensity):
    return _inertial_motor.KIM_SetMMIDeviceParameters(serialNumber, joystickMode, maxStepRate, directionSense, displayIntensity)

def KIM_SetMMIChannelParameters(serialNumber, channel, presetPos1, presetPos2):
    return _inertial_motor.KIM_SetMMIChannelParameters(serialNumber, channel, presetPos1, presetPos2)

def KIM_GetMMIDeviceParametersStruct(serialNumber, mmiParameters):
    return _inertial_motor.KIM_GetMMIDeviceParametersStruct(serialNumber, mmiParameters)

def KIM_GetMMIChannelParametersStruct(serialNumber, channel, mmiParameters):
    return _inertial_motor.KIM_GetMMIChannelParametersStruct(serialNumber, channel, mmiParameters)

def KIM_SetMMIDeviceParametersStruct(serialNumber, mmiParameters):
    return _inertial_motor.KIM_SetMMIDeviceParametersStruct(serialNumber, mmiParameters)

def KIM_SetMMIChannelParametersStruct(serialNumber, channel, mmiParameters):
    return _inertial_motor.KIM_SetMMIChannelParametersStruct(serialNumber, channel, mmiParameters)

def KIM_RequestMMIParameters(serialNumber, channel):
    return _inertial_motor.KIM_RequestMMIParameters(serialNumber, channel)

def KIM_GetTrigIOParameters(serialNumber, trig1Mode, trig1Polarity, trigChannel1, trig2Mode, trig2Polarity, trigChannel2):
    return _inertial_motor.KIM_GetTrigIOParameters(serialNumber, trig1Mode, trig1Polarity, trigChannel1, trig2Mode, trig2Polarity, trigChannel2)

def KIM_SetTrigIOParameters(serialNumber, trig1Mode, trig1Polarity, trigChannel1, trig2Mode, trig2Polarity, trigChannel2):
    return _inertial_motor.KIM_SetTrigIOParameters(serialNumber, trig1Mode, trig1Polarity, trigChannel1, trig2Mode, trig2Polarity, trigChannel2)

def KIM_GetTrigIOParametersStruct(serialNumber, trigIOParameters):
    return _inertial_motor.KIM_GetTrigIOParametersStruct(serialNumber, trigIOParameters)

def KIM_SetTrigIOParametersStruct(serialNumber, trigIOParameters):
    return _inertial_motor.KIM_SetTrigIOParametersStruct(serialNumber, trigIOParameters)

def KIM_RequestTrigIOParameters(serialNumber):
    return _inertial_motor.KIM_RequestTrigIOParameters(serialNumber)

def KIM_GetTrigParamsParameters(serialNumber, channel, startPosFwd, intervalFwd, numberOfPulsesFwd, startPosRev, intervalRev, numberOfPulsesRev, pulseWidth, numberOfCycles):
    return _inertial_motor.KIM_GetTrigParamsParameters(serialNumber, channel, startPosFwd, intervalFwd, numberOfPulsesFwd, startPosRev, intervalRev, numberOfPulsesRev, pulseWidth, numberOfCycles)

def KIM_GetTrigParamsParametersStruct(serialNumber, channel, trigParameters):
    return _inertial_motor.KIM_GetTrigParamsParametersStruct(serialNumber, channel, trigParameters)

def KIM_SetTrigParamsParametersStruct(serialNumber, channel, trigParameters):
    return _inertial_motor.KIM_SetTrigParamsParametersStruct(serialNumber, channel, trigParameters)

def KIM_RequestTrigParamsParameters(serialNumber, channel):
    return _inertial_motor.KIM_RequestTrigParamsParameters(serialNumber, channel)

def KIM_GetFeedbackSigParameters(serialNumber, channel, feedbackSignalMode, encoderConst):
    return _inertial_motor.KIM_GetFeedbackSigParameters(serialNumber, channel, feedbackSignalMode, encoderConst)

def KIM_SetFeedbackSigParameters(serialNumber, channel, feedbackSignalMode, encoderConst):
    return _inertial_motor.KIM_SetFeedbackSigParameters(serialNumber, channel, feedbackSignalMode, encoderConst)

def KIM_GetFeedbackSigParametersStruct(serialNumber, channel, fbSigParameters):
    return _inertial_motor.KIM_GetFeedbackSigParametersStruct(serialNumber, channel, fbSigParameters)

def KIM_SetFeedbackSigParametersStruct(serialNumber, channel, fbSigParameters):
    return _inertial_motor.KIM_SetFeedbackSigParametersStruct(serialNumber, channel, fbSigParameters)

def KIM_RequestFeedbackSigParameters(serialNumber, channel):
    return _inertial_motor.KIM_RequestFeedbackSigParameters(serialNumber, channel)

def KIM_GetRelativeMoveParameter(serialNumber, channel, relativeMoveStep):
    return _inertial_motor.KIM_GetRelativeMoveParameter(serialNumber, channel, relativeMoveStep)

def KIM_SetRelativeMoveParameter(serialNumber, channel, relativeMove):
    return _inertial_motor.KIM_SetRelativeMoveParameter(serialNumber, channel, relativeMove)

def KIM_RequestRelativeMoveParameter(serialNumber, channel):
    return _inertial_motor.KIM_RequestRelativeMoveParameter(serialNumber, channel)

def KIM_GetAbsoluteMoveParameters(serialNumber, channel, absoluteMove):
    return _inertial_motor.KIM_GetAbsoluteMoveParameters(serialNumber, channel, absoluteMove)

def KIM_SetAbsoluteMoveParameters(serialNumber, channel, absoluteMove):
    return _inertial_motor.KIM_SetAbsoluteMoveParameters(serialNumber, channel, absoluteMove)

def KIM_RequestAbsoluteMoveParameters(serialNumber, channel):
    return _inertial_motor.KIM_RequestAbsoluteMoveParameters(serialNumber, channel)

def KIM_RequestStatus(serialNumber):
    return _inertial_motor.KIM_RequestStatus(serialNumber)

def KIM_RequestStatusBits(serialNumber):
    return _inertial_motor.KIM_RequestStatusBits(serialNumber)

def KIM_RequestCurrentPosition(serialNumber, channel):
    return _inertial_motor.KIM_RequestCurrentPosition(serialNumber, channel)

def KIM_GetCurrentPosition(serialNumber, channel):
    return _inertial_motor.KIM_GetCurrentPosition(serialNumber, channel)

def KIM_GetStatusBits(serialNumber, channel):
    return _inertial_motor.KIM_GetStatusBits(serialNumber, channel)

def KIM_SupportsDualChannelMode(serialNumber):
    return _inertial_motor.KIM_SupportsDualChannelMode(serialNumber)

def KIM_IsDualChannelMode(serialNumber):
    return _inertial_motor.KIM_IsDualChannelMode(serialNumber)

def KIM_SetDualChannelMode(serialNumber, enableDualChannel):
    return _inertial_motor.KIM_SetDualChannelMode(serialNumber, enableDualChannel)

def KIM_StartPolling(serialNumber, milliseconds):
    return _inertial_motor.KIM_StartPolling(serialNumber, milliseconds)

def KIM_PollingDuration(serialNumber):
    return _inertial_motor.KIM_PollingDuration(serialNumber)

def KIM_StopPolling(serialNumber):
    return _inertial_motor.KIM_StopPolling(serialNumber)

def KIM_TimeSinceLastMsgReceived(serialNumber, lastUpdateTimeMS):
    return _inertial_motor.KIM_TimeSinceLastMsgReceived(serialNumber, lastUpdateTimeMS)

def KIM_EnableLastMsgTimer(serialNumber, enable, lastMsgTimeout):
    return _inertial_motor.KIM_EnableLastMsgTimer(serialNumber, enable, lastMsgTimeout)

def KIM_HasLastMsgTimerOverrun(serialNumber):
    return _inertial_motor.KIM_HasLastMsgTimerOverrun(serialNumber)

def KIM_RequestSettings(serialNumber):
    return _inertial_motor.KIM_RequestSettings(serialNumber)

