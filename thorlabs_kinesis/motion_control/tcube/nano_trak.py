# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nano_trak
else:
    import _nano_trak

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _nano_trak.FT_OK
FT_InvalidHandle = _nano_trak.FT_InvalidHandle
FT_DeviceNotFound = _nano_trak.FT_DeviceNotFound
FT_DeviceNotOpened = _nano_trak.FT_DeviceNotOpened
FT_IOError = _nano_trak.FT_IOError
FT_InsufficientResources = _nano_trak.FT_InsufficientResources
FT_InvalidParameter = _nano_trak.FT_InvalidParameter
FT_DeviceNotPresent = _nano_trak.FT_DeviceNotPresent
FT_IncorrectDevice = _nano_trak.FT_IncorrectDevice
MOT_NotMotor = _nano_trak.MOT_NotMotor
MOT_DCMotor = _nano_trak.MOT_DCMotor
MOT_StepperMotor = _nano_trak.MOT_StepperMotor
MOT_BrushlessMotor = _nano_trak.MOT_BrushlessMotor
MOT_CustomMotor = _nano_trak.MOT_CustomMotor
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_nano_trak.TLI_DeviceInfo_typeID_get, _nano_trak.TLI_DeviceInfo_typeID_set)
    description = property(_nano_trak.TLI_DeviceInfo_description_get, _nano_trak.TLI_DeviceInfo_description_set)
    serialNo = property(_nano_trak.TLI_DeviceInfo_serialNo_get, _nano_trak.TLI_DeviceInfo_serialNo_set)
    PID = property(_nano_trak.TLI_DeviceInfo_PID_get, _nano_trak.TLI_DeviceInfo_PID_set)
    isKnownType = property(_nano_trak.TLI_DeviceInfo_isKnownType_get, _nano_trak.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_nano_trak.TLI_DeviceInfo_motorType_get, _nano_trak.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_nano_trak.TLI_DeviceInfo_isPiezoDevice_get, _nano_trak.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_nano_trak.TLI_DeviceInfo_isLaser_get, _nano_trak.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_nano_trak.TLI_DeviceInfo_isCustomType_get, _nano_trak.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_nano_trak.TLI_DeviceInfo_isRack_get, _nano_trak.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_nano_trak.TLI_DeviceInfo_maxChannels_get, _nano_trak.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _nano_trak.TLI_DeviceInfo_swiginit(self, _nano_trak.new_TLI_DeviceInfo())
    __swig_destroy__ = _nano_trak.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _nano_trak:
_nano_trak.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_nano_trak.TLI_HardwareInformation_serialNumber_get, _nano_trak.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_nano_trak.TLI_HardwareInformation_modelNumber_get, _nano_trak.TLI_HardwareInformation_modelNumber_set)
    type = property(_nano_trak.TLI_HardwareInformation_type_get, _nano_trak.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_nano_trak.TLI_HardwareInformation_firmwareVersion_get, _nano_trak.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_nano_trak.TLI_HardwareInformation_notes_get, _nano_trak.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_nano_trak.TLI_HardwareInformation_deviceDependantData_get, _nano_trak.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_nano_trak.TLI_HardwareInformation_hardwareVersion_get, _nano_trak.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_nano_trak.TLI_HardwareInformation_modificationState_get, _nano_trak.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_nano_trak.TLI_HardwareInformation_numChannels_get, _nano_trak.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _nano_trak.TLI_HardwareInformation_swiginit(self, _nano_trak.new_TLI_HardwareInformation())
    __swig_destroy__ = _nano_trak.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _nano_trak:
_nano_trak.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
NT_BadSignal = _nano_trak.NT_BadSignal
NT_GoodSignal = _nano_trak.NT_GoodSignal
NT_ModeUndefined = _nano_trak.NT_ModeUndefined
NT_Piezo = _nano_trak.NT_Piezo
NT_Latch = _nano_trak.NT_Latch
NT_Tracking = _nano_trak.NT_Tracking
NT_HorizontalTracking = _nano_trak.NT_HorizontalTracking
NT_VerticalTracking = _nano_trak.NT_VerticalTracking
NT_ControlModeUndefined = _nano_trak.NT_ControlModeUndefined
NT_OpenLoop = _nano_trak.NT_OpenLoop
NT_ClosedLoop = _nano_trak.NT_ClosedLoop
NT_OpenLoopSmoothed = _nano_trak.NT_OpenLoopSmoothed
NT_ClosedLoopSmoothed = _nano_trak.NT_ClosedLoopSmoothed
NT_FeedbackSourceUndefined = _nano_trak.NT_FeedbackSourceUndefined
NT_TIA = _nano_trak.NT_TIA
NT_BNC_1v = _nano_trak.NT_BNC_1v
NT_BNC_2v = _nano_trak.NT_BNC_2v
NT_BNC_5v = _nano_trak.NT_BNC_5v
NT_BNC_10v = _nano_trak.NT_BNC_10v
NUM_TIA_RANGES = _nano_trak.NUM_TIA_RANGES
NT_TIARange1_3nA = _nano_trak.NT_TIARange1_3nA
NT_TIARange2_10nA = _nano_trak.NT_TIARange2_10nA
NT_TIARange3_30nA = _nano_trak.NT_TIARange3_30nA
NT_TIARange4_100nA = _nano_trak.NT_TIARange4_100nA
NT_TIARange5_300nA = _nano_trak.NT_TIARange5_300nA
NT_TIARange6_1uA = _nano_trak.NT_TIARange6_1uA
NT_TIARange7_3uA = _nano_trak.NT_TIARange7_3uA
NT_TIARange8_10uA = _nano_trak.NT_TIARange8_10uA
NT_TIARange9_30uA = _nano_trak.NT_TIARange9_30uA
NT_TIARange10_100uA = _nano_trak.NT_TIARange10_100uA
NT_TIARange11_300uA = _nano_trak.NT_TIARange11_300uA
NT_TIARange12_1mA = _nano_trak.NT_TIARange12_1mA
NT_TIARange13_3mA = _nano_trak.NT_TIARange13_3mA
NT_TIARange14_10mA = _nano_trak.NT_TIARange14_10mA
NT_OddAndEven = _nano_trak.NT_OddAndEven
NT_Odd = _nano_trak.NT_Odd
NT_Even = _nano_trak.NT_Even
NT_InRange = _nano_trak.NT_InRange
NT_UnderRange = _nano_trak.NT_UnderRange
NT_OverRange = _nano_trak.NT_OverRange
NT_ParameterCircleMode = _nano_trak.NT_ParameterCircleMode
NT_AbsPowerCircleMode = _nano_trak.NT_AbsPowerCircleMode
NT_LUTCircleMode = _nano_trak.NT_LUTCircleMode
NT_LinearCircleAdjustment = _nano_trak.NT_LinearCircleAdjustment
NT_LogCircleAdjustment = _nano_trak.NT_LogCircleAdjustment
NT_SquareCircleAdjustment = _nano_trak.NT_SquareCircleAdjustment
NT_CubeCircleAdjustment = _nano_trak.NT_CubeCircleAdjustment
NT_TIARangeModeUndefined = _nano_trak.NT_TIARangeModeUndefined
NT_AutoRangeAtSelected = _nano_trak.NT_AutoRangeAtSelected
NT_ManualRangeAtSelected = _nano_trak.NT_ManualRangeAtSelected
NT_ManualRangeAtParameter = _nano_trak.NT_ManualRangeAtParameter
NT_AutoRangeAtParameter = _nano_trak.NT_AutoRangeAtParameter
NT_LowPassNone = _nano_trak.NT_LowPassNone
NT_LowPass_1Hz = _nano_trak.NT_LowPass_1Hz
NT_LowPass_3Hz = _nano_trak.NT_LowPass_3Hz
NT_LowPass_10Hz = _nano_trak.NT_LowPass_10Hz
NT_LowPass_30Hz = _nano_trak.NT_LowPass_30Hz
NT_LowPass_100Hz = _nano_trak.NT_LowPass_100Hz
NT_VoltageRangeUndefined = _nano_trak.NT_VoltageRangeUndefined
NT_VoltageRange_5v = _nano_trak.NT_VoltageRange_5v
NT_VoltageRange_10v = _nano_trak.NT_VoltageRange_10v
NT_SMAOnly = _nano_trak.NT_SMAOnly
NT_HubOrSMA = _nano_trak.NT_HubOrSMA
NT_Amps = _nano_trak.NT_Amps
NT_Watts = _nano_trak.NT_Watts
NT_Db = _nano_trak.NT_Db
NT_Voltage = _nano_trak.NT_Voltage
NT_FullRange = _nano_trak.NT_FullRange
NT_UserDefined = _nano_trak.NT_UserDefined
class NT_HVComponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    horizontalComponent = property(_nano_trak.NT_HVComponent_horizontalComponent_get, _nano_trak.NT_HVComponent_horizontalComponent_set)
    verticalComponent = property(_nano_trak.NT_HVComponent_verticalComponent_get, _nano_trak.NT_HVComponent_verticalComponent_set)

    def __init__(self):
        _nano_trak.NT_HVComponent_swiginit(self, _nano_trak.new_NT_HVComponent())
    __swig_destroy__ = _nano_trak.delete_NT_HVComponent

# Register NT_HVComponent in _nano_trak:
_nano_trak.NT_HVComponent_swigregister(NT_HVComponent)
class NT_CircleParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_nano_trak.NT_CircleParameters_mode_get, _nano_trak.NT_CircleParameters_mode_set)
    diameter = property(_nano_trak.NT_CircleParameters_diameter_get, _nano_trak.NT_CircleParameters_diameter_set)
    samplesPerRevolution = property(_nano_trak.NT_CircleParameters_samplesPerRevolution_get, _nano_trak.NT_CircleParameters_samplesPerRevolution_set)
    minDiameter = property(_nano_trak.NT_CircleParameters_minDiameter_get, _nano_trak.NT_CircleParameters_minDiameter_set)
    maxDiameter = property(_nano_trak.NT_CircleParameters_maxDiameter_get, _nano_trak.NT_CircleParameters_maxDiameter_set)
    algorithmAdjustment = property(_nano_trak.NT_CircleParameters_algorithmAdjustment_get, _nano_trak.NT_CircleParameters_algorithmAdjustment_set)

    def __init__(self):
        _nano_trak.NT_CircleParameters_swiginit(self, _nano_trak.new_NT_CircleParameters())
    __swig_destroy__ = _nano_trak.delete_NT_CircleParameters

# Register NT_CircleParameters in _nano_trak:
_nano_trak.NT_CircleParameters_swigregister(NT_CircleParameters)
class NT_CircleDiameterLUT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LUTdiameter = property(_nano_trak.NT_CircleDiameterLUT_LUTdiameter_get, _nano_trak.NT_CircleDiameterLUT_LUTdiameter_set)

    def __init__(self):
        _nano_trak.NT_CircleDiameterLUT_swiginit(self, _nano_trak.new_NT_CircleDiameterLUT())
    __swig_destroy__ = _nano_trak.delete_NT_CircleDiameterLUT

# Register NT_CircleDiameterLUT in _nano_trak:
_nano_trak.NT_CircleDiameterLUT_swigregister(NT_CircleDiameterLUT)
class NT_TIARangeParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_nano_trak.NT_TIARangeParameters_mode_get, _nano_trak.NT_TIARangeParameters_mode_set)
    upLimit = property(_nano_trak.NT_TIARangeParameters_upLimit_get, _nano_trak.NT_TIARangeParameters_upLimit_set)
    downLimit = property(_nano_trak.NT_TIARangeParameters_downLimit_get, _nano_trak.NT_TIARangeParameters_downLimit_set)
    settleSamples = property(_nano_trak.NT_TIARangeParameters_settleSamples_get, _nano_trak.NT_TIARangeParameters_settleSamples_set)
    changeToOddOrEven = property(_nano_trak.NT_TIARangeParameters_changeToOddOrEven_get, _nano_trak.NT_TIARangeParameters_changeToOddOrEven_set)
    newRange = property(_nano_trak.NT_TIARangeParameters_newRange_get, _nano_trak.NT_TIARangeParameters_newRange_set)

    def __init__(self):
        _nano_trak.NT_TIARangeParameters_swiginit(self, _nano_trak.new_NT_TIARangeParameters())
    __swig_destroy__ = _nano_trak.delete_NT_TIARangeParameters

# Register NT_TIARangeParameters in _nano_trak:
_nano_trak.NT_TIARangeParameters_swigregister(NT_TIARangeParameters)
class NT_LowPassFilterParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    param1 = property(_nano_trak.NT_LowPassFilterParameters_param1_get, _nano_trak.NT_LowPassFilterParameters_param1_set)
    param2 = property(_nano_trak.NT_LowPassFilterParameters_param2_get, _nano_trak.NT_LowPassFilterParameters_param2_set)
    param3 = property(_nano_trak.NT_LowPassFilterParameters_param3_get, _nano_trak.NT_LowPassFilterParameters_param3_set)
    param4 = property(_nano_trak.NT_LowPassFilterParameters_param4_get, _nano_trak.NT_LowPassFilterParameters_param4_set)
    param5 = property(_nano_trak.NT_LowPassFilterParameters_param5_get, _nano_trak.NT_LowPassFilterParameters_param5_set)

    def __init__(self):
        _nano_trak.NT_LowPassFilterParameters_swiginit(self, _nano_trak.new_NT_LowPassFilterParameters())
    __swig_destroy__ = _nano_trak.delete_NT_LowPassFilterParameters

# Register NT_LowPassFilterParameters in _nano_trak:
_nano_trak.NT_LowPassFilterParameters_swigregister(NT_LowPassFilterParameters)
class NT_TIAReading(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    absoluteReading = property(_nano_trak.NT_TIAReading_absoluteReading_get, _nano_trak.NT_TIAReading_absoluteReading_set)
    relativeReading = property(_nano_trak.NT_TIAReading_relativeReading_get, _nano_trak.NT_TIAReading_relativeReading_set)
    selectedRange = property(_nano_trak.NT_TIAReading_selectedRange_get, _nano_trak.NT_TIAReading_selectedRange_set)
    underOrOverRead = property(_nano_trak.NT_TIAReading_underOrOverRead_get, _nano_trak.NT_TIAReading_underOrOverRead_set)

    def __init__(self):
        _nano_trak.NT_TIAReading_swiginit(self, _nano_trak.new_NT_TIAReading())
    __swig_destroy__ = _nano_trak.delete_NT_TIAReading

# Register NT_TIAReading in _nano_trak:
_nano_trak.NT_TIAReading_swigregister(NT_TIAReading)
class NT_IOSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lowVoltageOutRange = property(_nano_trak.NT_IOSettings_lowVoltageOutRange_get, _nano_trak.NT_IOSettings_lowVoltageOutRange_set)
    lowVoltageOutputRoute = property(_nano_trak.NT_IOSettings_lowVoltageOutputRoute_get, _nano_trak.NT_IOSettings_lowVoltageOutputRoute_set)
    notYetInUse = property(_nano_trak.NT_IOSettings_notYetInUse_get, _nano_trak.NT_IOSettings_notYetInUse_set)
    unused = property(_nano_trak.NT_IOSettings_unused_get, _nano_trak.NT_IOSettings_unused_set)

    def __init__(self):
        _nano_trak.NT_IOSettings_swiginit(self, _nano_trak.new_NT_IOSettings())
    __swig_destroy__ = _nano_trak.delete_NT_IOSettings

# Register NT_IOSettings in _nano_trak:
_nano_trak.NT_IOSettings_swigregister(NT_IOSettings)
class NT_GainParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    controlMode = property(_nano_trak.NT_GainParameters_controlMode_get, _nano_trak.NT_GainParameters_controlMode_set)
    gain = property(_nano_trak.NT_GainParameters_gain_get, _nano_trak.NT_GainParameters_gain_set)

    def __init__(self):
        _nano_trak.NT_GainParameters_swiginit(self, _nano_trak.new_NT_GainParameters())
    __swig_destroy__ = _nano_trak.delete_NT_GainParameters

# Register NT_GainParameters in _nano_trak:
_nano_trak.NT_GainParameters_swigregister(NT_GainParameters)

def TLI_BuildDeviceList():
    return _nano_trak.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _nano_trak.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _nano_trak.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _nano_trak.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _nano_trak.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _nano_trak.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _nano_trak.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _nano_trak.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _nano_trak.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _nano_trak.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _nano_trak.TLI_UninitializeSimulations()

def NT_Open(serialNo):
    return _nano_trak.NT_Open(serialNo)

def NT_Close(serialNo):
    return _nano_trak.NT_Close(serialNo)

def NT_CheckConnection(serialNo):
    return _nano_trak.NT_CheckConnection(serialNo)

def NT_Identify(serialNo):
    return _nano_trak.NT_Identify(serialNo)

def NT_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _nano_trak.NT_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def NT_GetHardwareInfoBlock(serialNo, hardwareInfo):
    return _nano_trak.NT_GetHardwareInfoBlock(serialNo, hardwareInfo)

def NT_GetFirmwareVersion(serialNo):
    return _nano_trak.NT_GetFirmwareVersion(serialNo)

def NT_GetSoftwareVersion(serialNo):
    return _nano_trak.NT_GetSoftwareVersion(serialNo)

def NT_LoadSettings(serialNo):
    return _nano_trak.NT_LoadSettings(serialNo)

def NT_LoadNamedSettings(serialNo, settingsName):
    return _nano_trak.NT_LoadNamedSettings(serialNo, settingsName)

def NT_PersistSettings(serialNo):
    return _nano_trak.NT_PersistSettings(serialNo)

def NT_Disconnect(serialNo):
    return _nano_trak.NT_Disconnect(serialNo)

def NT_GetHubBay(serialNo):
    return _nano_trak.NT_GetHubBay(serialNo)

def NT_RequestSignalState(serialNo):
    return _nano_trak.NT_RequestSignalState(serialNo)

def NT_GetSignalState(serialNo):
    return _nano_trak.NT_GetSignalState(serialNo)

def NT_RequestMode(serialNo):
    return _nano_trak.NT_RequestMode(serialNo)

def NT_GetMode(serialNo):
    return _nano_trak.NT_GetMode(serialNo)

def NT_SetMode(serialNo, mode):
    return _nano_trak.NT_SetMode(serialNo, mode)

def NT_RequestTrackingThresholdSignal(serialNo):
    return _nano_trak.NT_RequestTrackingThresholdSignal(serialNo)

def NT_GetTrackingThresholdSignal(serialNo):
    return _nano_trak.NT_GetTrackingThresholdSignal(serialNo)

def NT_SetTrackingThresholdSignal(serialNo, threshold):
    return _nano_trak.NT_SetTrackingThresholdSignal(serialNo, threshold)

def NT_RequestCircleHomePosition(serialNo):
    return _nano_trak.NT_RequestCircleHomePosition(serialNo)

def NT_GetCircleHomePosition(serialNo, position):
    return _nano_trak.NT_GetCircleHomePosition(serialNo, position)

def NT_SetCircleHomePosition(serialNo, position):
    return _nano_trak.NT_SetCircleHomePosition(serialNo, position)

def NT_HomeCircle(serialNo):
    return _nano_trak.NT_HomeCircle(serialNo)

def NT_RequestCirclePosition(serialNo):
    return _nano_trak.NT_RequestCirclePosition(serialNo)

def NT_GetCirclePosition(serialNo, position):
    return _nano_trak.NT_GetCirclePosition(serialNo, position)

def NT_RequestCircleParams(serialNo):
    return _nano_trak.NT_RequestCircleParams(serialNo)

def NT_GetCircleParams(serialNo, params):
    return _nano_trak.NT_GetCircleParams(serialNo, params)

def NT_SetCircleParams(serialNo, params):
    return _nano_trak.NT_SetCircleParams(serialNo, params)

def NT_GetCircleDiameter(serialNo):
    return _nano_trak.NT_GetCircleDiameter(serialNo)

def NT_SetCircleDiameter(serialNo, diameter):
    return _nano_trak.NT_SetCircleDiameter(serialNo, diameter)

def NT_RequestCircleDiameterLUT(serialNo):
    return _nano_trak.NT_RequestCircleDiameterLUT(serialNo)

def NT_GetCircleDiameterLUT(serialNo, LUT):
    return _nano_trak.NT_GetCircleDiameterLUT(serialNo, LUT)

def NT_SetCircleDiameterLUT(serialNo, LUT):
    return _nano_trak.NT_SetCircleDiameterLUT(serialNo, LUT)

def NT_RequestPhaseCompensationParams(serialNo):
    return _nano_trak.NT_RequestPhaseCompensationParams(serialNo)

def NT_GetPhaseCompensationParams(serialNo, params):
    return _nano_trak.NT_GetPhaseCompensationParams(serialNo, params)

def NT_SetPhaseCompensationParams(serialNo, params):
    return _nano_trak.NT_SetPhaseCompensationParams(serialNo, params)

def NT_RequestTIArangeParams(serialNo):
    return _nano_trak.NT_RequestTIArangeParams(serialNo)

def NT_GetTIArangeParams(serialNo, params):
    return _nano_trak.NT_GetTIArangeParams(serialNo, params)

def NT_SetTIArangeParams(serialNo, params):
    return _nano_trak.NT_SetTIArangeParams(serialNo, params)

def NT_GetRangeMode(serialNo, mode, oddOrEven):
    return _nano_trak.NT_GetRangeMode(serialNo, mode, oddOrEven)

def NT_SetRangeMode(serialNo, mode, oddOrEven):
    return _nano_trak.NT_SetRangeMode(serialNo, mode, oddOrEven)

def NT_GetTIARange(serialNo):
    return _nano_trak.NT_GetTIARange(serialNo)

def NT_SetTIARange(serialNo, range):
    return _nano_trak.NT_SetTIARange(serialNo, range)

def NT_RequestGain(serialNo):
    return _nano_trak.NT_RequestGain(serialNo)

def NT_GetGain(serialNo):
    return _nano_trak.NT_GetGain(serialNo)

def NT_SetGain(serialNo, gain):
    return _nano_trak.NT_SetGain(serialNo, gain)

def NT_RequestTIALPFilterParams(serialNo):
    return _nano_trak.NT_RequestTIALPFilterParams(serialNo)

def NT_GetTIALPFilterParams(serialNo, params):
    return _nano_trak.NT_GetTIALPFilterParams(serialNo, params)

def NT_SetTIALPFilterParams(serialNo, params):
    return _nano_trak.NT_SetTIALPFilterParams(serialNo, params)

def NT_RequestFeedbackSource(serialNo):
    return _nano_trak.NT_RequestFeedbackSource(serialNo)

def NT_GetFeedbackSource(serialNo):
    return _nano_trak.NT_GetFeedbackSource(serialNo)

def NT_SetFeedbackSource(serialNo, input):
    return _nano_trak.NT_SetFeedbackSource(serialNo, input)

def NT_GetLEDBrightness(serialNo):
    return _nano_trak.NT_GetLEDBrightness(serialNo)

def NT_SetLEDBrightness(serialNo, brightness):
    return _nano_trak.NT_SetLEDBrightness(serialNo, brightness)

def NT_RequestIOsettings(serialNo):
    return _nano_trak.NT_RequestIOsettings(serialNo)

def NT_GetIOsettingsBlock(serialNo, IOsettings):
    return _nano_trak.NT_GetIOsettingsBlock(serialNo, IOsettings)

def NT_SetIOsettingsBlock(serialNo, IOsettings):
    return _nano_trak.NT_SetIOsettingsBlock(serialNo, IOsettings)

def NT_GetIOsettings(serialNo, lowVoltageOutRange, lowVoltageOutputRoute):
    return _nano_trak.NT_GetIOsettings(serialNo, lowVoltageOutRange, lowVoltageOutputRoute)

def NT_SetIOsettings(serialNo, lowVoltageOutRange, lowVoltageOutputRoute):
    return _nano_trak.NT_SetIOsettings(serialNo, lowVoltageOutRange, lowVoltageOutputRoute)

def NT_ClearMessageQueue(serialNo):
    return _nano_trak.NT_ClearMessageQueue(serialNo)

def NT_RegisterMessageCallback(serialNo, functionPointer):
    return _nano_trak.NT_RegisterMessageCallback(serialNo, functionPointer)

def NT_MessageQueueSize(serialNo):
    return _nano_trak.NT_MessageQueueSize(serialNo)

def NT_GetNextMessage(serialNo, messageType, messageID, messageData):
    return _nano_trak.NT_GetNextMessage(serialNo, messageType, messageID, messageData)

def NT_WaitForMessage(serialNo, messageType, messageID, messageData):
    return _nano_trak.NT_WaitForMessage(serialNo, messageType, messageID, messageData)

def NT_RequestReading(serialNo):
    return _nano_trak.NT_RequestReading(serialNo)

def NT_GetReading(serialNo, reading):
    return _nano_trak.NT_GetReading(serialNo, reading)

def NT_RequestStatus(serialNo):
    return _nano_trak.NT_RequestStatus(serialNo)

def NT_RequestStatusBits(serialNo):
    return _nano_trak.NT_RequestStatusBits(serialNo)

def NT_GetStatusBits(serialNo):
    return _nano_trak.NT_GetStatusBits(serialNo)

def NT_StartPolling(serialNo, milliseconds):
    return _nano_trak.NT_StartPolling(serialNo, milliseconds)

def NT_PollingDuration(serialNo):
    return _nano_trak.NT_PollingDuration(serialNo)

def NT_StopPolling(serialNo):
    return _nano_trak.NT_StopPolling(serialNo)

def NT_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS):
    return _nano_trak.NT_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS)

def NT_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout):
    return _nano_trak.NT_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout)

def NT_HasLastMsgTimerOverrun(serialNo):
    return _nano_trak.NT_HasLastMsgTimerOverrun(serialNo)

def NT_RequestSettings(serialNo):
    return _nano_trak.NT_RequestSettings(serialNo)

