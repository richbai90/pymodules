# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _quad
else:
    import _quad

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _quad.FT_OK
FT_InvalidHandle = _quad.FT_InvalidHandle
FT_DeviceNotFound = _quad.FT_DeviceNotFound
FT_DeviceNotOpened = _quad.FT_DeviceNotOpened
FT_IOError = _quad.FT_IOError
FT_InsufficientResources = _quad.FT_InsufficientResources
FT_InvalidParameter = _quad.FT_InvalidParameter
FT_DeviceNotPresent = _quad.FT_DeviceNotPresent
FT_IncorrectDevice = _quad.FT_IncorrectDevice
MOT_NotMotor = _quad.MOT_NotMotor
MOT_DCMotor = _quad.MOT_DCMotor
MOT_StepperMotor = _quad.MOT_StepperMotor
MOT_BrushlessMotor = _quad.MOT_BrushlessMotor
MOT_CustomMotor = _quad.MOT_CustomMotor
QD_ModeUndefined = _quad.QD_ModeUndefined
QD_Monitor = _quad.QD_Monitor
QD_OpenLoop = _quad.QD_OpenLoop
QD_ClosedLoop = _quad.QD_ClosedLoop
QD_RouteUndefined = _quad.QD_RouteUndefined
QD_SMAOnly = _quad.QD_SMAOnly
QD_HubAndSMA = _quad.QD_HubAndSMA
QD_HoldOnZero = _quad.QD_HoldOnZero
QD_HoldOnLastValue = _quad.QD_HoldOnLastValue
QD_Undefined = _quad.QD_Undefined
QD_Enabled = _quad.QD_Enabled
QD_Disabled = _quad.QD_Disabled
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_quad.TLI_DeviceInfo_typeID_get, _quad.TLI_DeviceInfo_typeID_set)
    description = property(_quad.TLI_DeviceInfo_description_get, _quad.TLI_DeviceInfo_description_set)
    serialNo = property(_quad.TLI_DeviceInfo_serialNo_get, _quad.TLI_DeviceInfo_serialNo_set)
    PID = property(_quad.TLI_DeviceInfo_PID_get, _quad.TLI_DeviceInfo_PID_set)
    isKnownType = property(_quad.TLI_DeviceInfo_isKnownType_get, _quad.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_quad.TLI_DeviceInfo_motorType_get, _quad.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_quad.TLI_DeviceInfo_isPiezoDevice_get, _quad.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_quad.TLI_DeviceInfo_isLaser_get, _quad.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_quad.TLI_DeviceInfo_isCustomType_get, _quad.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_quad.TLI_DeviceInfo_isRack_get, _quad.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_quad.TLI_DeviceInfo_maxChannels_get, _quad.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _quad.TLI_DeviceInfo_swiginit(self, _quad.new_TLI_DeviceInfo())
    __swig_destroy__ = _quad.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _quad:
_quad.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_quad.TLI_HardwareInformation_serialNumber_get, _quad.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_quad.TLI_HardwareInformation_modelNumber_get, _quad.TLI_HardwareInformation_modelNumber_set)
    type = property(_quad.TLI_HardwareInformation_type_get, _quad.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_quad.TLI_HardwareInformation_firmwareVersion_get, _quad.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_quad.TLI_HardwareInformation_notes_get, _quad.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_quad.TLI_HardwareInformation_deviceDependantData_get, _quad.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_quad.TLI_HardwareInformation_hardwareVersion_get, _quad.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_quad.TLI_HardwareInformation_modificationState_get, _quad.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_quad.TLI_HardwareInformation_numChannels_get, _quad.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _quad.TLI_HardwareInformation_swiginit(self, _quad.new_TLI_HardwareInformation())
    __swig_destroy__ = _quad.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _quad:
_quad.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
class QD_LoopParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    proportionalGain = property(_quad.QD_LoopParameters_proportionalGain_get, _quad.QD_LoopParameters_proportionalGain_set)
    integralGain = property(_quad.QD_LoopParameters_integralGain_get, _quad.QD_LoopParameters_integralGain_set)
    differentialGain = property(_quad.QD_LoopParameters_differentialGain_get, _quad.QD_LoopParameters_differentialGain_set)
    lowPassFilterCutOffFreq = property(_quad.QD_LoopParameters_lowPassFilterCutOffFreq_get, _quad.QD_LoopParameters_lowPassFilterCutOffFreq_set)
    notchFilterCenterFrequency = property(_quad.QD_LoopParameters_notchFilterCenterFrequency_get, _quad.QD_LoopParameters_notchFilterCenterFrequency_set)
    notchFilterQ = property(_quad.QD_LoopParameters_notchFilterQ_get, _quad.QD_LoopParameters_notchFilterQ_set)
    notchFilterEnabled = property(_quad.QD_LoopParameters_notchFilterEnabled_get, _quad.QD_LoopParameters_notchFilterEnabled_set)
    lowPassFilterEnabled = property(_quad.QD_LoopParameters_lowPassFilterEnabled_get, _quad.QD_LoopParameters_lowPassFilterEnabled_set)

    def __init__(self):
        _quad.QD_LoopParameters_swiginit(self, _quad.new_QD_LoopParameters())
    __swig_destroy__ = _quad.delete_QD_LoopParameters

# Register QD_LoopParameters in _quad:
_quad.QD_LoopParameters_swigregister(QD_LoopParameters)
class QD_PIDParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    proportionalGain = property(_quad.QD_PIDParameters_proportionalGain_get, _quad.QD_PIDParameters_proportionalGain_set)
    integralGain = property(_quad.QD_PIDParameters_integralGain_get, _quad.QD_PIDParameters_integralGain_set)
    differentialGain = property(_quad.QD_PIDParameters_differentialGain_get, _quad.QD_PIDParameters_differentialGain_set)

    def __init__(self):
        _quad.QD_PIDParameters_swiginit(self, _quad.new_QD_PIDParameters())
    __swig_destroy__ = _quad.delete_QD_PIDParameters

# Register QD_PIDParameters in _quad:
_quad.QD_PIDParameters_swigregister(QD_PIDParameters)
class QD_LowPassFilterParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lowPassFilterCutOffFreq = property(_quad.QD_LowPassFilterParameters_lowPassFilterCutOffFreq_get, _quad.QD_LowPassFilterParameters_lowPassFilterCutOffFreq_set)
    lowPassFilterEnabled = property(_quad.QD_LowPassFilterParameters_lowPassFilterEnabled_get, _quad.QD_LowPassFilterParameters_lowPassFilterEnabled_set)

    def __init__(self):
        _quad.QD_LowPassFilterParameters_swiginit(self, _quad.new_QD_LowPassFilterParameters())
    __swig_destroy__ = _quad.delete_QD_LowPassFilterParameters

# Register QD_LowPassFilterParameters in _quad:
_quad.QD_LowPassFilterParameters_swigregister(QD_LowPassFilterParameters)
class QD_NotchFilterParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    notchFilterCenterFrequency = property(_quad.QD_NotchFilterParameters_notchFilterCenterFrequency_get, _quad.QD_NotchFilterParameters_notchFilterCenterFrequency_set)
    notchFilterQ = property(_quad.QD_NotchFilterParameters_notchFilterQ_get, _quad.QD_NotchFilterParameters_notchFilterQ_set)
    notchFilterEnabled = property(_quad.QD_NotchFilterParameters_notchFilterEnabled_get, _quad.QD_NotchFilterParameters_notchFilterEnabled_set)

    def __init__(self):
        _quad.QD_NotchFilterParameters_swiginit(self, _quad.new_QD_NotchFilterParameters())
    __swig_destroy__ = _quad.delete_QD_NotchFilterParameters

# Register QD_NotchFilterParameters in _quad:
_quad.QD_NotchFilterParameters_swigregister(QD_NotchFilterParameters)
class QD_PositionDemandParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    minXdemand = property(_quad.QD_PositionDemandParameters_minXdemand_get, _quad.QD_PositionDemandParameters_minXdemand_set)
    minYdemand = property(_quad.QD_PositionDemandParameters_minYdemand_get, _quad.QD_PositionDemandParameters_minYdemand_set)
    maxXdemand = property(_quad.QD_PositionDemandParameters_maxXdemand_get, _quad.QD_PositionDemandParameters_maxXdemand_set)
    maxYdemand = property(_quad.QD_PositionDemandParameters_maxYdemand_get, _quad.QD_PositionDemandParameters_maxYdemand_set)
    lowVoltageOutputRoute = property(_quad.QD_PositionDemandParameters_lowVoltageOutputRoute_get, _quad.QD_PositionDemandParameters_lowVoltageOutputRoute_set)
    openLoopOption = property(_quad.QD_PositionDemandParameters_openLoopOption_get, _quad.QD_PositionDemandParameters_openLoopOption_set)
    xFeedbackSignedGain = property(_quad.QD_PositionDemandParameters_xFeedbackSignedGain_get, _quad.QD_PositionDemandParameters_xFeedbackSignedGain_set)
    yFeedbackSignedGain = property(_quad.QD_PositionDemandParameters_yFeedbackSignedGain_get, _quad.QD_PositionDemandParameters_yFeedbackSignedGain_set)

    def __init__(self):
        _quad.QD_PositionDemandParameters_swiginit(self, _quad.new_QD_PositionDemandParameters())
    __swig_destroy__ = _quad.delete_QD_PositionDemandParameters

# Register QD_PositionDemandParameters in _quad:
_quad.QD_PositionDemandParameters_swigregister(QD_PositionDemandParameters)
class QD_Position(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_quad.QD_Position_x_get, _quad.QD_Position_x_set)
    y = property(_quad.QD_Position_y_get, _quad.QD_Position_y_set)

    def __init__(self):
        _quad.QD_Position_swiginit(self, _quad.new_QD_Position())
    __swig_destroy__ = _quad.delete_QD_Position

# Register QD_Position in _quad:
_quad.QD_Position_swigregister(QD_Position)
class QD_Readings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    posDifference = property(_quad.QD_Readings_posDifference_get, _quad.QD_Readings_posDifference_set)
    sum = property(_quad.QD_Readings_sum_get, _quad.QD_Readings_sum_set)
    demandedPos = property(_quad.QD_Readings_demandedPos_get, _quad.QD_Readings_demandedPos_set)

    def __init__(self):
        _quad.QD_Readings_swiginit(self, _quad.new_QD_Readings())
    __swig_destroy__ = _quad.delete_QD_Readings

# Register QD_Readings in _quad:
_quad.QD_Readings_swigregister(QD_Readings)

def TLI_BuildDeviceList():
    return _quad.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _quad.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _quad.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _quad.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _quad.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _quad.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _quad.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _quad.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _quad.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _quad.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _quad.TLI_UninitializeSimulations()

def QD_Open(serialNo):
    return _quad.QD_Open(serialNo)

def QD_Close(serialNo):
    return _quad.QD_Close(serialNo)

def QD_CheckConnection(serialNo):
    return _quad.QD_CheckConnection(serialNo)

def QD_Identify(serialNo):
    return _quad.QD_Identify(serialNo)

def QD_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _quad.QD_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def QD_GetHardwareInfoBlock(serialNo, hardwareInfo):
    return _quad.QD_GetHardwareInfoBlock(serialNo, hardwareInfo)

def QD_GetFirmwareVersion(serialNo):
    return _quad.QD_GetFirmwareVersion(serialNo)

def QD_GetSoftwareVersion(serialNo):
    return _quad.QD_GetSoftwareVersion(serialNo)

def QD_LoadSettings(serialNo):
    return _quad.QD_LoadSettings(serialNo)

def QD_LoadNamedSettings(serialNo, settingsName):
    return _quad.QD_LoadNamedSettings(serialNo, settingsName)

def QD_PersistSettings(serialNo):
    return _quad.QD_PersistSettings(serialNo)

def QD_ClearMessageQueue(serialNo):
    return _quad.QD_ClearMessageQueue(serialNo)

def QD_RegisterMessageCallback(serialNo, functionPointer):
    return _quad.QD_RegisterMessageCallback(serialNo, functionPointer)

def QD_MessageQueueSize(serialNo):
    return _quad.QD_MessageQueueSize(serialNo)

def QD_GetNextMessage(serialNo, messageType, messageID, messageData):
    return _quad.QD_GetNextMessage(serialNo, messageType, messageID, messageData)

def QD_WaitForMessage(serialNo, messageType, messageID, messageData):
    return _quad.QD_WaitForMessage(serialNo, messageType, messageID, messageData)

def QD_RequestLoopPIDparams(serialNo):
    return _quad.QD_RequestLoopPIDparams(serialNo)

def QD_GetLoopPIDparams(serialNo, loopParams):
    return _quad.QD_GetLoopPIDparams(serialNo, loopParams)

def QD_SetLoopPIDparams(serialNo, loopParams):
    return _quad.QD_SetLoopPIDparams(serialNo, loopParams)

def QD_GetPIDparams(serialNo, proportionalIntegralDerivativeParams):
    return _quad.QD_GetPIDparams(serialNo, proportionalIntegralDerivativeParams)

def QD_SetPIDparams(serialNo, proportionalIntegralDerivativeParams):
    return _quad.QD_SetPIDparams(serialNo, proportionalIntegralDerivativeParams)

def QD_GetLowPassFilterparams(serialNo, lowPassParams):
    return _quad.QD_GetLowPassFilterparams(serialNo, lowPassParams)

def QD_SetLowPassFilterparams(serialNo, lowPassParams):
    return _quad.QD_SetLowPassFilterparams(serialNo, lowPassParams)

def QD_GetNotchFilterparams(serialNo, notchParams):
    return _quad.QD_GetNotchFilterparams(serialNo, notchParams)

def QD_SetNotchFilterparams(serialNo, proportionalIntegralDerivativeParams):
    return _quad.QD_SetNotchFilterparams(serialNo, proportionalIntegralDerivativeParams)

def QD_RequestPosDemandParams(serialNo):
    return _quad.QD_RequestPosDemandParams(serialNo)

def QD_GetPosDemandParams(serialNo, demandParams):
    return _quad.QD_GetPosDemandParams(serialNo, demandParams)

def QD_SetPosDemandParams(serialNo, demandParams):
    return _quad.QD_SetPosDemandParams(serialNo, demandParams)

def QD_RequestOperatingMode(serialNo):
    return _quad.QD_RequestOperatingMode(serialNo)

def QD_GetOperatingMode(serialNo):
    return _quad.QD_GetOperatingMode(serialNo)

def QD_SetOperatingMode(serialNo, mode):
    return _quad.QD_SetOperatingMode(serialNo, mode)

def QD_RequestLEDBrightness(serialNo):
    return _quad.QD_RequestLEDBrightness(serialNo)

def QD_GetLEDBrightness(serialNo):
    return _quad.QD_GetLEDBrightness(serialNo)

def QD_SetLEDBrightness(serialNo, brightness):
    return _quad.QD_SetLEDBrightness(serialNo, brightness)

def QD_GetDemandedPosition(serialNo, position):
    return _quad.QD_GetDemandedPosition(serialNo, position)

def QD_SetPosition(serialNo, position):
    return _quad.QD_SetPosition(serialNo, position)

def QD_RequestStatus(serialNo):
    return _quad.QD_RequestStatus(serialNo)

def QD_RequestReading(serialNo):
    return _quad.QD_RequestReading(serialNo)

def QD_RequestStatusBits(serialNo):
    return _quad.QD_RequestStatusBits(serialNo)

def QD_GetReading(serialNo, reading):
    return _quad.QD_GetReading(serialNo, reading)

def QD_GetStatusBits(serialNo):
    return _quad.QD_GetStatusBits(serialNo)

def QD_StartPolling(serialNo, milliseconds):
    return _quad.QD_StartPolling(serialNo, milliseconds)

def QD_PollingDuration(serialNo):
    return _quad.QD_PollingDuration(serialNo)

def QD_StopPolling(serialNo):
    return _quad.QD_StopPolling(serialNo)

def QD_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS):
    return _quad.QD_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS)

def QD_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout):
    return _quad.QD_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout)

def QD_HasLastMsgTimerOverrun(serialNo):
    return _quad.QD_HasLastMsgTimerOverrun(serialNo)

def QD_RequestSettings(serialNo):
    return _quad.QD_RequestSettings(serialNo)

