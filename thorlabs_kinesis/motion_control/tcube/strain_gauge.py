# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _strain_gauge
else:
    import _strain_gauge

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _strain_gauge.FT_OK
FT_InvalidHandle = _strain_gauge.FT_InvalidHandle
FT_DeviceNotFound = _strain_gauge.FT_DeviceNotFound
FT_DeviceNotOpened = _strain_gauge.FT_DeviceNotOpened
FT_IOError = _strain_gauge.FT_IOError
FT_InsufficientResources = _strain_gauge.FT_InsufficientResources
FT_InvalidParameter = _strain_gauge.FT_InvalidParameter
FT_DeviceNotPresent = _strain_gauge.FT_DeviceNotPresent
FT_IncorrectDevice = _strain_gauge.FT_IncorrectDevice
MOT_NotMotor = _strain_gauge.MOT_NotMotor
MOT_DCMotor = _strain_gauge.MOT_DCMotor
MOT_StepperMotor = _strain_gauge.MOT_StepperMotor
MOT_BrushlessMotor = _strain_gauge.MOT_BrushlessMotor
MOT_CustomMotor = _strain_gauge.MOT_CustomMotor
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_strain_gauge.TLI_DeviceInfo_typeID_get, _strain_gauge.TLI_DeviceInfo_typeID_set)
    description = property(_strain_gauge.TLI_DeviceInfo_description_get, _strain_gauge.TLI_DeviceInfo_description_set)
    serialNo = property(_strain_gauge.TLI_DeviceInfo_serialNo_get, _strain_gauge.TLI_DeviceInfo_serialNo_set)
    PID = property(_strain_gauge.TLI_DeviceInfo_PID_get, _strain_gauge.TLI_DeviceInfo_PID_set)
    isKnownType = property(_strain_gauge.TLI_DeviceInfo_isKnownType_get, _strain_gauge.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_strain_gauge.TLI_DeviceInfo_motorType_get, _strain_gauge.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_strain_gauge.TLI_DeviceInfo_isPiezoDevice_get, _strain_gauge.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_strain_gauge.TLI_DeviceInfo_isLaser_get, _strain_gauge.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_strain_gauge.TLI_DeviceInfo_isCustomType_get, _strain_gauge.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_strain_gauge.TLI_DeviceInfo_isRack_get, _strain_gauge.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_strain_gauge.TLI_DeviceInfo_maxChannels_get, _strain_gauge.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _strain_gauge.TLI_DeviceInfo_swiginit(self, _strain_gauge.new_TLI_DeviceInfo())
    __swig_destroy__ = _strain_gauge.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _strain_gauge:
_strain_gauge.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_strain_gauge.TLI_HardwareInformation_serialNumber_get, _strain_gauge.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_strain_gauge.TLI_HardwareInformation_modelNumber_get, _strain_gauge.TLI_HardwareInformation_modelNumber_set)
    type = property(_strain_gauge.TLI_HardwareInformation_type_get, _strain_gauge.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_strain_gauge.TLI_HardwareInformation_firmwareVersion_get, _strain_gauge.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_strain_gauge.TLI_HardwareInformation_notes_get, _strain_gauge.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_strain_gauge.TLI_HardwareInformation_deviceDependantData_get, _strain_gauge.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_strain_gauge.TLI_HardwareInformation_hardwareVersion_get, _strain_gauge.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_strain_gauge.TLI_HardwareInformation_modificationState_get, _strain_gauge.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_strain_gauge.TLI_HardwareInformation_numChannels_get, _strain_gauge.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _strain_gauge.TLI_HardwareInformation_swiginit(self, _strain_gauge.new_TLI_HardwareInformation())
    __swig_destroy__ = _strain_gauge.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _strain_gauge:
_strain_gauge.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
TSG_HubChannel1 = _strain_gauge.TSG_HubChannel1
TSG_HubChannel2 = _strain_gauge.TSG_HubChannel2
TSG_Undefined = _strain_gauge.TSG_Undefined
TSG_Position = _strain_gauge.TSG_Position
TSG_Voltage = _strain_gauge.TSG_Voltage
TSG_Force = _strain_gauge.TSG_Force
class TSG_IOSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hubAnalogOutput = property(_strain_gauge.TSG_IOSettings_hubAnalogOutput_get, _strain_gauge.TSG_IOSettings_hubAnalogOutput_set)
    displayMode = property(_strain_gauge.TSG_IOSettings_displayMode_get, _strain_gauge.TSG_IOSettings_displayMode_set)
    forceCalibration = property(_strain_gauge.TSG_IOSettings_forceCalibration_get, _strain_gauge.TSG_IOSettings_forceCalibration_set)
    notYetInUse = property(_strain_gauge.TSG_IOSettings_notYetInUse_get, _strain_gauge.TSG_IOSettings_notYetInUse_set)
    futureUse = property(_strain_gauge.TSG_IOSettings_futureUse_get, _strain_gauge.TSG_IOSettings_futureUse_set)

    def __init__(self):
        _strain_gauge.TSG_IOSettings_swiginit(self, _strain_gauge.new_TSG_IOSettings())
    __swig_destroy__ = _strain_gauge.delete_TSG_IOSettings

# Register TSG_IOSettings in _strain_gauge:
_strain_gauge.TSG_IOSettings_swigregister(TSG_IOSettings)

def TLI_BuildDeviceList():
    return _strain_gauge.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _strain_gauge.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _strain_gauge.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _strain_gauge.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _strain_gauge.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _strain_gauge.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _strain_gauge.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _strain_gauge.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _strain_gauge.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _strain_gauge.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _strain_gauge.TLI_UninitializeSimulations()

def SG_Open(serialNo):
    return _strain_gauge.SG_Open(serialNo)

def SG_Close(serialNo):
    return _strain_gauge.SG_Close(serialNo)

def SG_CheckConnection(serialNo):
    return _strain_gauge.SG_CheckConnection(serialNo)

def SG_Identify(serialNo):
    return _strain_gauge.SG_Identify(serialNo)

def SG_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _strain_gauge.SG_GetHardwareInfo(serialNo, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def SG_GetHardwareInfoBlock(serialNo, hardwareInfo):
    return _strain_gauge.SG_GetHardwareInfoBlock(serialNo, hardwareInfo)

def SG_GetFirmwareVersion(serialNo):
    return _strain_gauge.SG_GetFirmwareVersion(serialNo)

def SG_GetSoftwareVersion(serialNo):
    return _strain_gauge.SG_GetSoftwareVersion(serialNo)

def SG_LoadSettings(serialNo):
    return _strain_gauge.SG_LoadSettings(serialNo)

def SG_LoadNamedSettings(serialNo, settingsName):
    return _strain_gauge.SG_LoadNamedSettings(serialNo, settingsName)

def SG_PersistSettings(serialNo):
    return _strain_gauge.SG_PersistSettings(serialNo)

def SG_Disable(serialNo):
    return _strain_gauge.SG_Disable(serialNo)

def SG_Enable(serialNo):
    return _strain_gauge.SG_Enable(serialNo)

def SG_Disconnect(serialNo):
    return _strain_gauge.SG_Disconnect(serialNo)

def SG_GetHubBay(serialNo):
    return _strain_gauge.SG_GetHubBay(serialNo)

def SG_RequestLEDBrightness(serialNo):
    return _strain_gauge.SG_RequestLEDBrightness(serialNo)

def SG_GetLEDBrightness(serialNo):
    return _strain_gauge.SG_GetLEDBrightness(serialNo)

def SG_SetLEDBrightness(serialNo, brightness):
    return _strain_gauge.SG_SetLEDBrightness(serialNo, brightness)

def SG_ClearMessageQueue(serialNo):
    return _strain_gauge.SG_ClearMessageQueue(serialNo)

def SG_RegisterMessageCallback(serialNo, functionPointer):
    return _strain_gauge.SG_RegisterMessageCallback(serialNo, functionPointer)

def SG_MessageQueueSize(serialNo):
    return _strain_gauge.SG_MessageQueueSize(serialNo)

def SG_GetNextMessage(serialNo, messageType, messageID, messageData):
    return _strain_gauge.SG_GetNextMessage(serialNo, messageType, messageID, messageData)

def SG_WaitForMessage(serialNo, messageType, messageID, messageData):
    return _strain_gauge.SG_WaitForMessage(serialNo, messageType, messageID, messageData)

def SG_StartPolling(serialNo, milliseconds):
    return _strain_gauge.SG_StartPolling(serialNo, milliseconds)

def SG_PollingDuration(serialNo):
    return _strain_gauge.SG_PollingDuration(serialNo)

def SG_StopPolling(serialNo):
    return _strain_gauge.SG_StopPolling(serialNo)

def SG_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS):
    return _strain_gauge.SG_TimeSinceLastMsgReceived(serialNo, lastUpdateTimeMS)

def SG_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout):
    return _strain_gauge.SG_EnableLastMsgTimer(serialNo, enable, lastMsgTimeout)

def SG_HasLastMsgTimerOverrun(serialNo):
    return _strain_gauge.SG_HasLastMsgTimerOverrun(serialNo)

def SG_RequestSettings(serialNo):
    return _strain_gauge.SG_RequestSettings(serialNo)

def SG_RequestStatus(serialNo):
    return _strain_gauge.SG_RequestStatus(serialNo)

def SG_GetStatusBits(serialNo):
    return _strain_gauge.SG_GetStatusBits(serialNo)

def SG_RequestReading(serialNo):
    return _strain_gauge.SG_RequestReading(serialNo)

def SG_GetReading(serialNo, smoothed):
    return _strain_gauge.SG_GetReading(serialNo, smoothed)

def SG_GetReadingExt(serialNo, clipReadng, overrange):
    return _strain_gauge.SG_GetReadingExt(serialNo, clipReadng, overrange)

def SG_RequestMaximumTravel(serialNo):
    return _strain_gauge.SG_RequestMaximumTravel(serialNo)

def SG_GetMaximumTravel(serialNo):
    return _strain_gauge.SG_GetMaximumTravel(serialNo)

def SG_SetZero(serialNo):
    return _strain_gauge.SG_SetZero(serialNo)

def SG_GetIOsettingsBlock(serialNo, inputOutputSettings):
    return _strain_gauge.SG_GetIOsettingsBlock(serialNo, inputOutputSettings)

def SG_SetIOsettingsBlock(serialNo, inputOutputSettings):
    return _strain_gauge.SG_SetIOsettingsBlock(serialNo, inputOutputSettings)

def SG_SetIOsettings(serialNo, hubAnalogOutput, displayMode, calibrationForce):
    return _strain_gauge.SG_SetIOsettings(serialNo, hubAnalogOutput, displayMode, calibrationForce)

def SG_GetHubAnalogOutput(serialNo):
    return _strain_gauge.SG_GetHubAnalogOutput(serialNo)

def SG_SetHubAnalogOutput(serialNo, hubAnalogOutput):
    return _strain_gauge.SG_SetHubAnalogOutput(serialNo, hubAnalogOutput)

def SG_RequestDisplayMode(serialNo):
    return _strain_gauge.SG_RequestDisplayMode(serialNo)

def SG_GetDisplayMode(serialNo):
    return _strain_gauge.SG_GetDisplayMode(serialNo)

def SG_SetDisplayMode(serialNo, mode):
    return _strain_gauge.SG_SetDisplayMode(serialNo, mode)

def SG_RequestForceCalib(serialNo):
    return _strain_gauge.SG_RequestForceCalib(serialNo)

def SG_GetForceCalib(serialNo):
    return _strain_gauge.SG_GetForceCalib(serialNo)

def SG_SetForceCalib(serialNo, forceCalibration):
    return _strain_gauge.SG_SetForceCalib(serialNo, forceCalibration)

