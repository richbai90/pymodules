# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dcservo
else:
    import _dcservo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _dcservo.FT_OK
FT_InvalidHandle = _dcservo.FT_InvalidHandle
FT_DeviceNotFound = _dcservo.FT_DeviceNotFound
FT_DeviceNotOpened = _dcservo.FT_DeviceNotOpened
FT_IOError = _dcservo.FT_IOError
FT_InsufficientResources = _dcservo.FT_InsufficientResources
FT_InvalidParameter = _dcservo.FT_InvalidParameter
FT_DeviceNotPresent = _dcservo.FT_DeviceNotPresent
FT_IncorrectDevice = _dcservo.FT_IncorrectDevice
MOT_NotMotor = _dcservo.MOT_NotMotor
MOT_DCMotor = _dcservo.MOT_DCMotor
MOT_DCServo = _dcservo.MOT_DCServo
MOT_BrushlessMotor = _dcservo.MOT_BrushlessMotor
MOT_CustomMotor = _dcservo.MOT_CustomMotor
MOT_TravelModeUndefined = _dcservo.MOT_TravelModeUndefined
MOT_Linear = _dcservo.MOT_Linear
MOT_Rotational = _dcservo.MOT_Rotational
MOT_TravelDirectionUndefined = _dcservo.MOT_TravelDirectionUndefined
MOT_Forwards = _dcservo.MOT_Forwards
MOT_Reverse = _dcservo.MOT_Reverse
MOT_LimitSwitchDirectionUndefined = _dcservo.MOT_LimitSwitchDirectionUndefined
MOT_ReverseLimitSwitch = _dcservo.MOT_ReverseLimitSwitch
MOT_ForwardLimitSwitch = _dcservo.MOT_ForwardLimitSwitch
MOT_Normal = _dcservo.MOT_Normal
MOT_Backwards = _dcservo.MOT_Backwards
MOT_JogModeUndefined = _dcservo.MOT_JogModeUndefined
MOT_Continuous = _dcservo.MOT_Continuous
MOT_SingleStep = _dcservo.MOT_SingleStep
MOT_StopModeUndefined = _dcservo.MOT_StopModeUndefined
MOT_Immediate = _dcservo.MOT_Immediate
MOT_Profiled = _dcservo.MOT_Profiled
MOT_ButtonModeUndefined = _dcservo.MOT_ButtonModeUndefined
MOT_JogMode = _dcservo.MOT_JogMode
MOT_Preset = _dcservo.MOT_Preset
MOT_LimitSwitchModeUndefined = _dcservo.MOT_LimitSwitchModeUndefined
MOT_LimitSwitchIgnoreSwitch = _dcservo.MOT_LimitSwitchIgnoreSwitch
MOT_LimitSwitchMakeOnContact = _dcservo.MOT_LimitSwitchMakeOnContact
MOT_LimitSwitchBreakOnContact = _dcservo.MOT_LimitSwitchBreakOnContact
MOT_LimitSwitchMakeOnHome = _dcservo.MOT_LimitSwitchMakeOnHome
MOT_LimitSwitchBreakOnHome = _dcservo.MOT_LimitSwitchBreakOnHome
MOT_PMD_Reserved = _dcservo.MOT_PMD_Reserved
MOT_LimitSwitchIgnoreSwitchSwapped = _dcservo.MOT_LimitSwitchIgnoreSwitchSwapped
MOT_LimitSwitchMakeOnContactSwapped = _dcservo.MOT_LimitSwitchMakeOnContactSwapped
MOT_LimitSwitchBreakOnContactSwapped = _dcservo.MOT_LimitSwitchBreakOnContactSwapped
MOT_LimitSwitchMakeOnHomeSwapped = _dcservo.MOT_LimitSwitchMakeOnHomeSwapped
MOT_LimitSwitchBreakOnHomeSwapped = _dcservo.MOT_LimitSwitchBreakOnHomeSwapped
MOT_LimitSwitchSWModeUndefined = _dcservo.MOT_LimitSwitchSWModeUndefined
MOT_LimitSwitchIgnored = _dcservo.MOT_LimitSwitchIgnored
MOT_LimitSwitchStopImmediate = _dcservo.MOT_LimitSwitchStopImmediate
MOT_LimitSwitchStopProfiled = _dcservo.MOT_LimitSwitchStopProfiled
MOT_LimitSwitchIgnored_Rotational = _dcservo.MOT_LimitSwitchIgnored_Rotational
MOT_LimitSwitchStopImmediate_Rotational = _dcservo.MOT_LimitSwitchStopImmediate_Rotational
MOT_LimitSwitchStopProfiled_Rotational = _dcservo.MOT_LimitSwitchStopProfiled_Rotational
DisallowIllegalMoves = _dcservo.DisallowIllegalMoves
AllowPartialMoves = _dcservo.AllowPartialMoves
AllowAllMoves = _dcservo.AllowAllMoves
MOT_PIDLoopModeDisabled = _dcservo.MOT_PIDLoopModeDisabled
MOT_PIDOpenLoopMode = _dcservo.MOT_PIDOpenLoopMode
MOT_PIDClosedLoopMode = _dcservo.MOT_PIDClosedLoopMode
LinearRange = _dcservo.LinearRange
RotationalUnlimited = _dcservo.RotationalUnlimited
RotationalWrapping = _dcservo.RotationalWrapping
Quickest = _dcservo.Quickest
Forwards = _dcservo.Forwards
Reverse = _dcservo.Reverse
KMOT_TrigDisabled = _dcservo.KMOT_TrigDisabled
KMOT_TrigIn_GPI = _dcservo.KMOT_TrigIn_GPI
KMOT_TrigIn_RelativeMove = _dcservo.KMOT_TrigIn_RelativeMove
KMOT_TrigIn_AbsoluteMove = _dcservo.KMOT_TrigIn_AbsoluteMove
KMOT_TrigIn_Home = _dcservo.KMOT_TrigIn_Home
KMOT_TrigIn_Stop = _dcservo.KMOT_TrigIn_Stop
KMOT_TrigIn_StartScan = _dcservo.KMOT_TrigIn_StartScan
KMOT_TrigIn_ShuttleMove = _dcservo.KMOT_TrigIn_ShuttleMove
KMOT_TrigOut_GPO = _dcservo.KMOT_TrigOut_GPO
KMOT_TrigOut_InMotion = _dcservo.KMOT_TrigOut_InMotion
KMOT_TrigOut_AtMaxVelocity = _dcservo.KMOT_TrigOut_AtMaxVelocity
KMOT_TrigOut_AtPositionStepFwd = _dcservo.KMOT_TrigOut_AtPositionStepFwd
KMOT_TrigOut_AtPositionStepRev = _dcservo.KMOT_TrigOut_AtPositionStepRev
KMOT_TrigOut_AtPositionStepBoth = _dcservo.KMOT_TrigOut_AtPositionStepBoth
KMOT_TrigOut_AtFwdLimit = _dcservo.KMOT_TrigOut_AtFwdLimit
KMOT_TrigOut_AtBwdLimit = _dcservo.KMOT_TrigOut_AtBwdLimit
KMOT_TrigOut_AtLimit = _dcservo.KMOT_TrigOut_AtLimit
KMOT_TrigPolarityHigh = _dcservo.KMOT_TrigPolarityHigh
KMOT_TrigPolarityLow = _dcservo.KMOT_TrigPolarityLow
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_dcservo.TLI_DeviceInfo_typeID_get, _dcservo.TLI_DeviceInfo_typeID_set)
    description = property(_dcservo.TLI_DeviceInfo_description_get, _dcservo.TLI_DeviceInfo_description_set)
    serialNo = property(_dcservo.TLI_DeviceInfo_serialNo_get, _dcservo.TLI_DeviceInfo_serialNo_set)
    PID = property(_dcservo.TLI_DeviceInfo_PID_get, _dcservo.TLI_DeviceInfo_PID_set)
    isKnownType = property(_dcservo.TLI_DeviceInfo_isKnownType_get, _dcservo.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_dcservo.TLI_DeviceInfo_motorType_get, _dcservo.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_dcservo.TLI_DeviceInfo_isPiezoDevice_get, _dcservo.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_dcservo.TLI_DeviceInfo_isLaser_get, _dcservo.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_dcservo.TLI_DeviceInfo_isCustomType_get, _dcservo.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_dcservo.TLI_DeviceInfo_isRack_get, _dcservo.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_dcservo.TLI_DeviceInfo_maxChannels_get, _dcservo.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _dcservo.TLI_DeviceInfo_swiginit(self, _dcservo.new_TLI_DeviceInfo())
    __swig_destroy__ = _dcservo.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _dcservo:
_dcservo.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_dcservo.TLI_HardwareInformation_serialNumber_get, _dcservo.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_dcservo.TLI_HardwareInformation_modelNumber_get, _dcservo.TLI_HardwareInformation_modelNumber_set)
    type = property(_dcservo.TLI_HardwareInformation_type_get, _dcservo.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_dcservo.TLI_HardwareInformation_firmwareVersion_get, _dcservo.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_dcservo.TLI_HardwareInformation_notes_get, _dcservo.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_dcservo.TLI_HardwareInformation_deviceDependantData_get, _dcservo.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_dcservo.TLI_HardwareInformation_hardwareVersion_get, _dcservo.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_dcservo.TLI_HardwareInformation_modificationState_get, _dcservo.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_dcservo.TLI_HardwareInformation_numChannels_get, _dcservo.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _dcservo.TLI_HardwareInformation_swiginit(self, _dcservo.new_TLI_HardwareInformation())
    __swig_destroy__ = _dcservo.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _dcservo:
_dcservo.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
class MOT_VelocityParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    minVelocity = property(_dcservo.MOT_VelocityParameters_minVelocity_get, _dcservo.MOT_VelocityParameters_minVelocity_set)
    acceleration = property(_dcservo.MOT_VelocityParameters_acceleration_get, _dcservo.MOT_VelocityParameters_acceleration_set)
    maxVelocity = property(_dcservo.MOT_VelocityParameters_maxVelocity_get, _dcservo.MOT_VelocityParameters_maxVelocity_set)

    def __init__(self):
        _dcservo.MOT_VelocityParameters_swiginit(self, _dcservo.new_MOT_VelocityParameters())
    __swig_destroy__ = _dcservo.delete_MOT_VelocityParameters

# Register MOT_VelocityParameters in _dcservo:
_dcservo.MOT_VelocityParameters_swigregister(MOT_VelocityParameters)
class MOT_JogParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_dcservo.MOT_JogParameters_mode_get, _dcservo.MOT_JogParameters_mode_set)
    stepSize = property(_dcservo.MOT_JogParameters_stepSize_get, _dcservo.MOT_JogParameters_stepSize_set)
    velParams = property(_dcservo.MOT_JogParameters_velParams_get, _dcservo.MOT_JogParameters_velParams_set)
    stopMode = property(_dcservo.MOT_JogParameters_stopMode_get, _dcservo.MOT_JogParameters_stopMode_set)

    def __init__(self):
        _dcservo.MOT_JogParameters_swiginit(self, _dcservo.new_MOT_JogParameters())
    __swig_destroy__ = _dcservo.delete_MOT_JogParameters

# Register MOT_JogParameters in _dcservo:
_dcservo.MOT_JogParameters_swigregister(MOT_JogParameters)
class MOT_HomingParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    direction = property(_dcservo.MOT_HomingParameters_direction_get, _dcservo.MOT_HomingParameters_direction_set)
    limitSwitch = property(_dcservo.MOT_HomingParameters_limitSwitch_get, _dcservo.MOT_HomingParameters_limitSwitch_set)
    velocity = property(_dcservo.MOT_HomingParameters_velocity_get, _dcservo.MOT_HomingParameters_velocity_set)
    offsetDistance = property(_dcservo.MOT_HomingParameters_offsetDistance_get, _dcservo.MOT_HomingParameters_offsetDistance_set)

    def __init__(self):
        _dcservo.MOT_HomingParameters_swiginit(self, _dcservo.new_MOT_HomingParameters())
    __swig_destroy__ = _dcservo.delete_MOT_HomingParameters

# Register MOT_HomingParameters in _dcservo:
_dcservo.MOT_HomingParameters_swigregister(MOT_HomingParameters)
class MOT_LimitSwitchParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    clockwiseHardwareLimit = property(_dcservo.MOT_LimitSwitchParameters_clockwiseHardwareLimit_get, _dcservo.MOT_LimitSwitchParameters_clockwiseHardwareLimit_set)
    anticlockwiseHardwareLimit = property(_dcservo.MOT_LimitSwitchParameters_anticlockwiseHardwareLimit_get, _dcservo.MOT_LimitSwitchParameters_anticlockwiseHardwareLimit_set)
    clockwisePosition = property(_dcservo.MOT_LimitSwitchParameters_clockwisePosition_get, _dcservo.MOT_LimitSwitchParameters_clockwisePosition_set)
    anticlockwisePosition = property(_dcservo.MOT_LimitSwitchParameters_anticlockwisePosition_get, _dcservo.MOT_LimitSwitchParameters_anticlockwisePosition_set)
    softLimitMode = property(_dcservo.MOT_LimitSwitchParameters_softLimitMode_get, _dcservo.MOT_LimitSwitchParameters_softLimitMode_set)

    def __init__(self):
        _dcservo.MOT_LimitSwitchParameters_swiginit(self, _dcservo.new_MOT_LimitSwitchParameters())
    __swig_destroy__ = _dcservo.delete_MOT_LimitSwitchParameters

# Register MOT_LimitSwitchParameters in _dcservo:
_dcservo.MOT_LimitSwitchParameters_swigregister(MOT_LimitSwitchParameters)
class MOT_PowerParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    restPercentage = property(_dcservo.MOT_PowerParameters_restPercentage_get, _dcservo.MOT_PowerParameters_restPercentage_set)
    movePercentage = property(_dcservo.MOT_PowerParameters_movePercentage_get, _dcservo.MOT_PowerParameters_movePercentage_set)

    def __init__(self):
        _dcservo.MOT_PowerParameters_swiginit(self, _dcservo.new_MOT_PowerParameters())
    __swig_destroy__ = _dcservo.delete_MOT_PowerParameters

# Register MOT_PowerParameters in _dcservo:
_dcservo.MOT_PowerParameters_swigregister(MOT_PowerParameters)
class MOT_JoystickParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lowGearMaxVelocity = property(_dcservo.MOT_JoystickParameters_lowGearMaxVelocity_get, _dcservo.MOT_JoystickParameters_lowGearMaxVelocity_set)
    highGearMaxVelocity = property(_dcservo.MOT_JoystickParameters_highGearMaxVelocity_get, _dcservo.MOT_JoystickParameters_highGearMaxVelocity_set)
    lowGearAcceleration = property(_dcservo.MOT_JoystickParameters_lowGearAcceleration_get, _dcservo.MOT_JoystickParameters_lowGearAcceleration_set)
    highGearAcceleration = property(_dcservo.MOT_JoystickParameters_highGearAcceleration_get, _dcservo.MOT_JoystickParameters_highGearAcceleration_set)
    directionSense = property(_dcservo.MOT_JoystickParameters_directionSense_get, _dcservo.MOT_JoystickParameters_directionSense_set)

    def __init__(self):
        _dcservo.MOT_JoystickParameters_swiginit(self, _dcservo.new_MOT_JoystickParameters())
    __swig_destroy__ = _dcservo.delete_MOT_JoystickParameters

# Register MOT_JoystickParameters in _dcservo:
_dcservo.MOT_JoystickParameters_swigregister(MOT_JoystickParameters)
class MOT_DC_PIDParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    proportionalGain = property(_dcservo.MOT_DC_PIDParameters_proportionalGain_get, _dcservo.MOT_DC_PIDParameters_proportionalGain_set)
    integralGain = property(_dcservo.MOT_DC_PIDParameters_integralGain_get, _dcservo.MOT_DC_PIDParameters_integralGain_set)
    differentialGain = property(_dcservo.MOT_DC_PIDParameters_differentialGain_get, _dcservo.MOT_DC_PIDParameters_differentialGain_set)
    integralLimit = property(_dcservo.MOT_DC_PIDParameters_integralLimit_get, _dcservo.MOT_DC_PIDParameters_integralLimit_set)
    parameterFilter = property(_dcservo.MOT_DC_PIDParameters_parameterFilter_get, _dcservo.MOT_DC_PIDParameters_parameterFilter_set)

    def __init__(self):
        _dcservo.MOT_DC_PIDParameters_swiginit(self, _dcservo.new_MOT_DC_PIDParameters())
    __swig_destroy__ = _dcservo.delete_MOT_DC_PIDParameters

# Register MOT_DC_PIDParameters in _dcservo:
_dcservo.MOT_DC_PIDParameters_swigregister(MOT_DC_PIDParameters)
class KMOT_TriggerConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Trigger1Mode = property(_dcservo.KMOT_TriggerConfig_Trigger1Mode_get, _dcservo.KMOT_TriggerConfig_Trigger1Mode_set)
    Trigger1Polarity = property(_dcservo.KMOT_TriggerConfig_Trigger1Polarity_get, _dcservo.KMOT_TriggerConfig_Trigger1Polarity_set)
    Trigger2Mode = property(_dcservo.KMOT_TriggerConfig_Trigger2Mode_get, _dcservo.KMOT_TriggerConfig_Trigger2Mode_set)
    Trigger2Polarity = property(_dcservo.KMOT_TriggerConfig_Trigger2Polarity_get, _dcservo.KMOT_TriggerConfig_Trigger2Polarity_set)

    def __init__(self):
        _dcservo.KMOT_TriggerConfig_swiginit(self, _dcservo.new_KMOT_TriggerConfig())
    __swig_destroy__ = _dcservo.delete_KMOT_TriggerConfig

# Register KMOT_TriggerConfig in _dcservo:
_dcservo.KMOT_TriggerConfig_swigregister(KMOT_TriggerConfig)
class MOT_EncoderResolutionParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    encoderResolutionWholeNumber = property(_dcservo.MOT_EncoderResolutionParams_encoderResolutionWholeNumber_get, _dcservo.MOT_EncoderResolutionParams_encoderResolutionWholeNumber_set)
    encoderResolutionFraction = property(_dcservo.MOT_EncoderResolutionParams_encoderResolutionFraction_get, _dcservo.MOT_EncoderResolutionParams_encoderResolutionFraction_set)
    unused1 = property(_dcservo.MOT_EncoderResolutionParams_unused1_get, _dcservo.MOT_EncoderResolutionParams_unused1_set)
    unused2 = property(_dcservo.MOT_EncoderResolutionParams_unused2_get, _dcservo.MOT_EncoderResolutionParams_unused2_set)
    unused3 = property(_dcservo.MOT_EncoderResolutionParams_unused3_get, _dcservo.MOT_EncoderResolutionParams_unused3_set)

    def __init__(self):
        _dcservo.MOT_EncoderResolutionParams_swiginit(self, _dcservo.new_MOT_EncoderResolutionParams())
    __swig_destroy__ = _dcservo.delete_MOT_EncoderResolutionParams

# Register MOT_EncoderResolutionParams in _dcservo:
_dcservo.MOT_EncoderResolutionParams_swigregister(MOT_EncoderResolutionParams)
class KMOT_TriggerParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TriggerStartPositionFwd = property(_dcservo.KMOT_TriggerParams_TriggerStartPositionFwd_get, _dcservo.KMOT_TriggerParams_TriggerStartPositionFwd_set)
    TriggerIntervalFwd = property(_dcservo.KMOT_TriggerParams_TriggerIntervalFwd_get, _dcservo.KMOT_TriggerParams_TriggerIntervalFwd_set)
    TriggerPulseCountFwd = property(_dcservo.KMOT_TriggerParams_TriggerPulseCountFwd_get, _dcservo.KMOT_TriggerParams_TriggerPulseCountFwd_set)
    TriggerStartPositionRev = property(_dcservo.KMOT_TriggerParams_TriggerStartPositionRev_get, _dcservo.KMOT_TriggerParams_TriggerStartPositionRev_set)
    TriggerIntervalRev = property(_dcservo.KMOT_TriggerParams_TriggerIntervalRev_get, _dcservo.KMOT_TriggerParams_TriggerIntervalRev_set)
    TriggerPulseCountRev = property(_dcservo.KMOT_TriggerParams_TriggerPulseCountRev_get, _dcservo.KMOT_TriggerParams_TriggerPulseCountRev_set)
    TriggerPulseWidth = property(_dcservo.KMOT_TriggerParams_TriggerPulseWidth_get, _dcservo.KMOT_TriggerParams_TriggerPulseWidth_set)
    CycleCount = property(_dcservo.KMOT_TriggerParams_CycleCount_get, _dcservo.KMOT_TriggerParams_CycleCount_set)

    def __init__(self):
        _dcservo.KMOT_TriggerParams_swiginit(self, _dcservo.new_KMOT_TriggerParams())
    __swig_destroy__ = _dcservo.delete_KMOT_TriggerParams

# Register KMOT_TriggerParams in _dcservo:
_dcservo.KMOT_TriggerParams_swigregister(KMOT_TriggerParams)

def TLI_BuildDeviceList():
    return _dcservo.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _dcservo.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _dcservo.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _dcservo.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _dcservo.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _dcservo.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _dcservo.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _dcservo.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _dcservo.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _dcservo.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _dcservo.TLI_UninitializeSimulations()

def BDC_Open(serialNo):
    return _dcservo.BDC_Open(serialNo)

def BDC_Close(serialNo):
    return _dcservo.BDC_Close(serialNo)

def BDC_CheckConnection(serialNo):
    return _dcservo.BDC_CheckConnection(serialNo)

def BDC_IsChannelValid(serialNo, channel):
    return _dcservo.BDC_IsChannelValid(serialNo, channel)

def BDC_MaxChannelCount(serialNo):
    return _dcservo.BDC_MaxChannelCount(serialNo)

def BDC_Identify(serialNo):
    return _dcservo.BDC_Identify(serialNo)

def BDC_GetHardwareInfo(serialNo, channel, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _dcservo.BDC_GetHardwareInfo(serialNo, channel, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def BDC_GetHardwareInfoBlock(serialNo, channel, hardwareInfo):
    return _dcservo.BDC_GetHardwareInfoBlock(serialNo, channel, hardwareInfo)

def BDC_GetNumChannels(serialNo):
    return _dcservo.BDC_GetNumChannels(serialNo)

def BDC_GetFirmwareVersion(serialNo, channel):
    return _dcservo.BDC_GetFirmwareVersion(serialNo, channel)

def BDC_GetSoftwareVersion(serialNo):
    return _dcservo.BDC_GetSoftwareVersion(serialNo)

def BDC_LoadSettings(serialNo, channel):
    return _dcservo.BDC_LoadSettings(serialNo, channel)

def BDC_LoadNamedSettings(serialNo, channel, settingsName):
    return _dcservo.BDC_LoadNamedSettings(serialNo, channel, settingsName)

def BDC_PersistSettings(serialNo, channel):
    return _dcservo.BDC_PersistSettings(serialNo, channel)

def BDC_SetCalibrationFile(serialNo, channel, filename, enabled):
    return _dcservo.BDC_SetCalibrationFile(serialNo, channel, filename, enabled)

def BDC_IsCalibrationActive(serialNo, channel):
    return _dcservo.BDC_IsCalibrationActive(serialNo, channel)

def BDC_GetCalibrationFile(serialNo, channel, filename, sizeOfBuffer):
    return _dcservo.BDC_GetCalibrationFile(serialNo, channel, filename, sizeOfBuffer)

def BDC_DisableChannel(serialNo, channel):
    return _dcservo.BDC_DisableChannel(serialNo, channel)

def BDC_EnableChannel(serialNo, channel):
    return _dcservo.BDC_EnableChannel(serialNo, channel)

def BDC_GetNumberPositions(serialNo, channel):
    return _dcservo.BDC_GetNumberPositions(serialNo, channel)

def BDC_MoveToPosition(serialNo, channel, index):
    return _dcservo.BDC_MoveToPosition(serialNo, channel, index)

def BDC_GetPosition(serialNo, channel):
    return _dcservo.BDC_GetPosition(serialNo, channel)

def BDC_CanHome(serialNo, channel):
    return _dcservo.BDC_CanHome(serialNo, channel)

def BDC_NeedsHoming(serialNo, channel):
    return _dcservo.BDC_NeedsHoming(serialNo, channel)

def BDC_CanMoveWithoutHomingFirst(serialNo, channel):
    return _dcservo.BDC_CanMoveWithoutHomingFirst(serialNo, channel)

def BDC_Home(serialNo, channel):
    return _dcservo.BDC_Home(serialNo, channel)

def BDC_ClearMessageQueue(serialNo, channel):
    return _dcservo.BDC_ClearMessageQueue(serialNo, channel)

def BDC_RegisterMessageCallback(serialNo, channel, functionPointer):
    return _dcservo.BDC_RegisterMessageCallback(serialNo, channel, functionPointer)

def BDC_MessageQueueSize(serialNo, channel):
    return _dcservo.BDC_MessageQueueSize(serialNo, channel)

def BDC_GetNextMessage(serialNo, channel, messageType, messageID, messageData):
    return _dcservo.BDC_GetNextMessage(serialNo, channel, messageType, messageID, messageData)

def BDC_WaitForMessage(serialNo, channel, messageType, messageID, messageData):
    return _dcservo.BDC_WaitForMessage(serialNo, channel, messageType, messageID, messageData)

def BDC_RequestHomingParams(serialNo, channel):
    return _dcservo.BDC_RequestHomingParams(serialNo, channel)

def BDC_GetHomingVelocity(serialNo, channel):
    return _dcservo.BDC_GetHomingVelocity(serialNo, channel)

def BDC_SetHomingVelocity(serialNo, channel, velocity):
    return _dcservo.BDC_SetHomingVelocity(serialNo, channel, velocity)

def BDC_MoveRelative(serialNo, channel, displacement):
    return _dcservo.BDC_MoveRelative(serialNo, channel, displacement)

def BDC_RequestJogParams(serialNo, channel):
    return _dcservo.BDC_RequestJogParams(serialNo, channel)

def BDC_GetJogMode(serialNo, channel, mode, stopMode):
    return _dcservo.BDC_GetJogMode(serialNo, channel, mode, stopMode)

def BDC_SetJogMode(serialNo, channel, mode, stopMode):
    return _dcservo.BDC_SetJogMode(serialNo, channel, mode, stopMode)

def BDC_GetJogStepSize(serialNo, channel):
    return _dcservo.BDC_GetJogStepSize(serialNo, channel)

def BDC_SetJogStepSize(serialNo, channel, stepSize):
    return _dcservo.BDC_SetJogStepSize(serialNo, channel, stepSize)

def BDC_GetJogVelParams(serialNo, channel, acceleration, maxVelocity):
    return _dcservo.BDC_GetJogVelParams(serialNo, channel, acceleration, maxVelocity)

def BDC_SetJogVelParams(serialNo, channel, acceleration, maxVelocity):
    return _dcservo.BDC_SetJogVelParams(serialNo, channel, acceleration, maxVelocity)

def BDC_MoveJog(serialNo, channel, jogDirection):
    return _dcservo.BDC_MoveJog(serialNo, channel, jogDirection)

def BDC_RequestVelParams(serialNo, channel):
    return _dcservo.BDC_RequestVelParams(serialNo, channel)

def BDC_GetVelParams(serialNo, channel, acceleration, maxVelocity):
    return _dcservo.BDC_GetVelParams(serialNo, channel, acceleration, maxVelocity)

def BDC_SetVelParams(serialNo, channel, acceleration, maxVelocity):
    return _dcservo.BDC_SetVelParams(serialNo, channel, acceleration, maxVelocity)

def BDC_MoveAtVelocity(serialNo, channel, direction):
    return _dcservo.BDC_MoveAtVelocity(serialNo, channel, direction)

def BDC_SetDirection(serialNo, channel, reverse):
    return _dcservo.BDC_SetDirection(serialNo, channel, reverse)

def BDC_StopImmediate(serialNo, channel):
    return _dcservo.BDC_StopImmediate(serialNo, channel)

def BDC_StopProfiled(serialNo, channel):
    return _dcservo.BDC_StopProfiled(serialNo, channel)

def BDC_RequestBacklash(serialNo, channel):
    return _dcservo.BDC_RequestBacklash(serialNo, channel)

def BDC_GetBacklash(serialNo, channel):
    return _dcservo.BDC_GetBacklash(serialNo, channel)

def BDC_SetBacklash(serialNo, channel, distance):
    return _dcservo.BDC_SetBacklash(serialNo, channel, distance)

def BDC_GetPositionCounter(serialNo, channel):
    return _dcservo.BDC_GetPositionCounter(serialNo, channel)

def BDC_SetPositionCounter(serialNo, channel, count):
    return _dcservo.BDC_SetPositionCounter(serialNo, channel, count)

def BDC_RequestEncoderCounter(serialNo, channel):
    return _dcservo.BDC_RequestEncoderCounter(serialNo, channel)

def BDC_GetEncoderCounter(serialNo, channel):
    return _dcservo.BDC_GetEncoderCounter(serialNo, channel)

def BDC_SetEncoderCounter(serialNo, channel, count):
    return _dcservo.BDC_SetEncoderCounter(serialNo, channel, count)

def BDC_RequestLimitSwitchParams(serialNo, channel):
    return _dcservo.BDC_RequestLimitSwitchParams(serialNo, channel)

def BDC_GetLimitSwitchParams(serialNo, channel, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode):
    return _dcservo.BDC_GetLimitSwitchParams(serialNo, channel, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode)

def BDC_SetLimitSwitchParams(serialNo, channel, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode):
    return _dcservo.BDC_SetLimitSwitchParams(serialNo, channel, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode)

def BDC_GetSoftLimitMode(serialNo, channel):
    return _dcservo.BDC_GetSoftLimitMode(serialNo, channel)

def BDC_SetLimitsSoftwareApproachPolicy(serialNo, channel, limitsSoftwareApproachPolicy):
    return _dcservo.BDC_SetLimitsSoftwareApproachPolicy(serialNo, channel, limitsSoftwareApproachPolicy)

def BDC_GetVelParamsBlock(serialNo, channel, velocityParams):
    return _dcservo.BDC_GetVelParamsBlock(serialNo, channel, velocityParams)

def BDC_SetVelParamsBlock(serialNo, channel, velocityParams):
    return _dcservo.BDC_SetVelParamsBlock(serialNo, channel, velocityParams)

def BDC_SetMoveAbsolutePosition(serialNo, channel, position):
    return _dcservo.BDC_SetMoveAbsolutePosition(serialNo, channel, position)

def BDC_RequestMoveAbsolutePosition(serialNo, channel):
    return _dcservo.BDC_RequestMoveAbsolutePosition(serialNo, channel)

def BDC_GetMoveAbsolutePosition(serialNo, channel):
    return _dcservo.BDC_GetMoveAbsolutePosition(serialNo, channel)

def BDC_MoveAbsolute(serialNo, channel):
    return _dcservo.BDC_MoveAbsolute(serialNo, channel)

def BDC_SetMoveRelativeDistance(serialNo, channel, distance):
    return _dcservo.BDC_SetMoveRelativeDistance(serialNo, channel, distance)

def BDC_RequestMoveRelativeDistance(serialNo, channel):
    return _dcservo.BDC_RequestMoveRelativeDistance(serialNo, channel)

def BDC_GetMoveRelativeDistance(serialNo, channel):
    return _dcservo.BDC_GetMoveRelativeDistance(serialNo, channel)

def BDC_MoveRelativeDistance(serialNo, channel):
    return _dcservo.BDC_MoveRelativeDistance(serialNo, channel)

def BDC_GetHomingParamsBlock(serialNo, channel, homingParams):
    return _dcservo.BDC_GetHomingParamsBlock(serialNo, channel, homingParams)

def BDC_SetHomingParamsBlock(serialNo, channel, homingParams):
    return _dcservo.BDC_SetHomingParamsBlock(serialNo, channel, homingParams)

def BDC_GetJogParamsBlock(serialNo, channel, jogParams):
    return _dcservo.BDC_GetJogParamsBlock(serialNo, channel, jogParams)

def BDC_SetJogParamsBlock(serialNo, channel, jogParams):
    return _dcservo.BDC_SetJogParamsBlock(serialNo, channel, jogParams)

def BDC_GetLimitSwitchParamsBlock(serialNo, channel, limitSwitchParams):
    return _dcservo.BDC_GetLimitSwitchParamsBlock(serialNo, channel, limitSwitchParams)

def BDC_SetLimitSwitchParamsBlock(serialNo, channel, limitSwitchParams):
    return _dcservo.BDC_SetLimitSwitchParamsBlock(serialNo, channel, limitSwitchParams)

def BDC_RequestTriggerSwitches(serialNo, channel):
    return _dcservo.BDC_RequestTriggerSwitches(serialNo, channel)

def BDC_GetTriggerSwitches(serialNo, channel):
    return _dcservo.BDC_GetTriggerSwitches(serialNo, channel)

def BDC_SetTriggerSwitches(serialNo, channel, indicatorBits):
    return _dcservo.BDC_SetTriggerSwitches(serialNo, channel, indicatorBits)

def BDC_RequestDigitalOutputs(serialNo, channel):
    return _dcservo.BDC_RequestDigitalOutputs(serialNo, channel)

def BDC_GetDigitalOutputs(serialNo, channel):
    return _dcservo.BDC_GetDigitalOutputs(serialNo, channel)

def BDC_SetDigitalOutputs(serialNo, channel, outputsBits):
    return _dcservo.BDC_SetDigitalOutputs(serialNo, channel, outputsBits)

def BDC_RequestRackDigitalOutputs(serialNo):
    return _dcservo.BDC_RequestRackDigitalOutputs(serialNo)

def BDC_GetRackDigitalOutputs(serialNo):
    return _dcservo.BDC_GetRackDigitalOutputs(serialNo)

def BDC_SetRackDigitalOutputs(serialNo, outputsBits):
    return _dcservo.BDC_SetRackDigitalOutputs(serialNo, outputsBits)

def BDC_RequestRackStatusBits(serialNo):
    return _dcservo.BDC_RequestRackStatusBits(serialNo)

def BDC_GetRackStatusBits(serialNo):
    return _dcservo.BDC_GetRackStatusBits(serialNo)

def BDC_RequestInputVoltage(serialNo, channel):
    return _dcservo.BDC_RequestInputVoltage(serialNo, channel)

def BDC_GetInputVoltage(serialNo, channel):
    return _dcservo.BDC_GetInputVoltage(serialNo, channel)

def BDC_RequestDCPIDParams(serialNo, channel):
    return _dcservo.BDC_RequestDCPIDParams(serialNo, channel)

def BDC_GetDCPIDParams(serialNo, DCproportionalIntegralDerivativeParams, channel):
    return _dcservo.BDC_GetDCPIDParams(serialNo, DCproportionalIntegralDerivativeParams, channel)

def BDC_SetDCPIDParams(serialNo, DCproportionalIntegralDerivativeParams, channel):
    return _dcservo.BDC_SetDCPIDParams(serialNo, DCproportionalIntegralDerivativeParams, channel)

def BDC_SuspendMoveMessages(serialNo, channel):
    return _dcservo.BDC_SuspendMoveMessages(serialNo, channel)

def BDC_ResumeMoveMessages(serialNo, channel):
    return _dcservo.BDC_ResumeMoveMessages(serialNo, channel)

def BDC_RequestPosition(serialNo, channel):
    return _dcservo.BDC_RequestPosition(serialNo, channel)

def BDC_RequestStatusBits(serialNo, channel):
    return _dcservo.BDC_RequestStatusBits(serialNo, channel)

def BDC_GetStatusBits(serialNo, channel):
    return _dcservo.BDC_GetStatusBits(serialNo, channel)

def BDC_StartPolling(serialNo, channel, milliseconds):
    return _dcservo.BDC_StartPolling(serialNo, channel, milliseconds)

def BDC_PollingDuration(serialNo, channel):
    return _dcservo.BDC_PollingDuration(serialNo, channel)

def BDC_StopPolling(serialNo, channel):
    return _dcservo.BDC_StopPolling(serialNo, channel)

def BDC_TimeSinceLastMsgReceived(serialNo, channel, lastUpdateTimeMS):
    return _dcservo.BDC_TimeSinceLastMsgReceived(serialNo, channel, lastUpdateTimeMS)

def BDC_EnableLastMsgTimer(serialNo, channel, enable, lastMsgTimeout):
    return _dcservo.BDC_EnableLastMsgTimer(serialNo, channel, enable, lastMsgTimeout)

def BDC_HasLastMsgTimerOverrun(serialNo, channel):
    return _dcservo.BDC_HasLastMsgTimerOverrun(serialNo, channel)

def BDC_RequestSettings(serialNo, channel):
    return _dcservo.BDC_RequestSettings(serialNo, channel)

def BDC_GetStageAxisMinPos(serialNo, channel):
    return _dcservo.BDC_GetStageAxisMinPos(serialNo, channel)

def BDC_GetStageAxisMaxPos(serialNo, channel):
    return _dcservo.BDC_GetStageAxisMaxPos(serialNo, channel)

def BDC_SetStageAxisLimits(serialNo, channel, minPosition, maxPosition):
    return _dcservo.BDC_SetStageAxisLimits(serialNo, channel, minPosition, maxPosition)

def BDC_SetMotorTravelMode(serialNo, channel, travelMode):
    return _dcservo.BDC_SetMotorTravelMode(serialNo, channel, travelMode)

def BDC_GetMotorTravelMode(serialNo, channel):
    return _dcservo.BDC_GetMotorTravelMode(serialNo, channel)

def BDC_SetMotorParams(serialNo, channel, stepsPerRev, gearBoxRatio, pitch):
    return _dcservo.BDC_SetMotorParams(serialNo, channel, stepsPerRev, gearBoxRatio, pitch)

def BDC_GetMotorParams(serialNo, channel, stepsPerRev, gearBoxRatio, pitch):
    return _dcservo.BDC_GetMotorParams(serialNo, channel, stepsPerRev, gearBoxRatio, pitch)

def BDC_SetMotorParamsExt(serialNo, channel, stepsPerRev, gearBoxRatio, pitch):
    return _dcservo.BDC_SetMotorParamsExt(serialNo, channel, stepsPerRev, gearBoxRatio, pitch)

def BDC_GetMotorParamsExt(serialNo, channel, stepsPerRev, gearBoxRatio, pitch):
    return _dcservo.BDC_GetMotorParamsExt(serialNo, channel, stepsPerRev, gearBoxRatio, pitch)

def BDC_SetMotorVelocityLimits(serialNo, channel, maxVelocity, maxAcceleration):
    return _dcservo.BDC_SetMotorVelocityLimits(serialNo, channel, maxVelocity, maxAcceleration)

def BDC_GetMotorVelocityLimits(serialNo, channel, maxVelocity, maxAcceleration):
    return _dcservo.BDC_GetMotorVelocityLimits(serialNo, channel, maxVelocity, maxAcceleration)

def BDC_ResetRotationModes(serialNo, channel):
    return _dcservo.BDC_ResetRotationModes(serialNo, channel)

def BDC_SetRotationModes(serialNo, channel, mode, direction):
    return _dcservo.BDC_SetRotationModes(serialNo, channel, mode, direction)

def BDC_SetMotorTravelLimits(serialNo, channel, minPosition, maxPosition):
    return _dcservo.BDC_SetMotorTravelLimits(serialNo, channel, minPosition, maxPosition)

def BDC_GetMotorTravelLimits(serialNo, channel, minPosition, maxPosition):
    return _dcservo.BDC_GetMotorTravelLimits(serialNo, channel, minPosition, maxPosition)

def BDC_GetRealValueFromDeviceUnit(serialNo, channel, device_unit, real_unit, unitType):
    return _dcservo.BDC_GetRealValueFromDeviceUnit(serialNo, channel, device_unit, real_unit, unitType)

def BDC_GetDeviceUnitFromRealValue(serialNo, channel, real_unit, device_unit, unitType):
    return _dcservo.BDC_GetDeviceUnitFromRealValue(serialNo, channel, real_unit, device_unit, unitType)

def BDC_RequestEncoderResolutionParams(serialNo, channel):
    return _dcservo.BDC_RequestEncoderResolutionParams(serialNo, channel)

def BDC_GetEncoderResolutionParams(serialNo, channel, resolutionParams):
    return _dcservo.BDC_GetEncoderResolutionParams(serialNo, channel, resolutionParams)

def BDC_RequestTriggerConfigParams(serialNo, channel):
    return _dcservo.BDC_RequestTriggerConfigParams(serialNo, channel)

def BDC_GetTriggerConfigParams(serialNo, channel, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity):
    return _dcservo.BDC_GetTriggerConfigParams(serialNo, channel, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity)

def BDC_GetTriggerConfigParamsBlock(serialNo, channel, triggerConfigParams):
    return _dcservo.BDC_GetTriggerConfigParamsBlock(serialNo, channel, triggerConfigParams)

def BDC_SetTriggerConfigParams(serialNo, channel, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity):
    return _dcservo.BDC_SetTriggerConfigParams(serialNo, channel, trigger1Mode, trigger1Polarity, trigger2Mode, trigger2Polarity)

def BDC_SetTriggerConfigParamsBlock(serialNo, channel, triggerConfigParams):
    return _dcservo.BDC_SetTriggerConfigParamsBlock(serialNo, channel, triggerConfigParams)

def BDC_RequestTriggerParams(serialNo, channel):
    return _dcservo.BDC_RequestTriggerParams(serialNo, channel)

def BDC_GetTriggerParams(serialNo, channel, triggerStartPositionFwd, triggerIntervalFwd, triggerPulseCountFwd, triggerStartPositionRev, triggerIntervalRev, triggerPulseCountRev, triggerPulseWidth, cycleCount):
    return _dcservo.BDC_GetTriggerParams(serialNo, channel, triggerStartPositionFwd, triggerIntervalFwd, triggerPulseCountFwd, triggerStartPositionRev, triggerIntervalRev, triggerPulseCountRev, triggerPulseWidth, cycleCount)

def BDC_GetTriggerParamsBlock(serialNo, channel, triggerParams):
    return _dcservo.BDC_GetTriggerParamsBlock(serialNo, channel, triggerParams)

def BDC_SetTriggerParams(serialNo, channel, triggerStartPositionFwd, triggerIntervalFwd, triggerPulseCountFwd, triggerStartPositionRev, triggerIntervalRev, triggerPulseCountRev, triggerPulseWidth, cycleCount):
    return _dcservo.BDC_SetTriggerParams(serialNo, channel, triggerStartPositionFwd, triggerIntervalFwd, triggerPulseCountFwd, triggerStartPositionRev, triggerIntervalRev, triggerPulseCountRev, triggerPulseWidth, cycleCount)

def BDC_SetTriggerParamsBlock(serialNo, channel, triggerParams):
    return _dcservo.BDC_SetTriggerParamsBlock(serialNo, channel, triggerParams)

