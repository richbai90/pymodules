# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _stepper_motor
else:
    import _stepper_motor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


FT_OK = _stepper_motor.FT_OK
FT_InvalidHandle = _stepper_motor.FT_InvalidHandle
FT_DeviceNotFound = _stepper_motor.FT_DeviceNotFound
FT_DeviceNotOpened = _stepper_motor.FT_DeviceNotOpened
FT_IOError = _stepper_motor.FT_IOError
FT_InsufficientResources = _stepper_motor.FT_InsufficientResources
FT_InvalidParameter = _stepper_motor.FT_InvalidParameter
FT_DeviceNotPresent = _stepper_motor.FT_DeviceNotPresent
FT_IncorrectDevice = _stepper_motor.FT_IncorrectDevice
MOT_NotMotor = _stepper_motor.MOT_NotMotor
MOT_DCMotor = _stepper_motor.MOT_DCMotor
MOT_StepperMotor = _stepper_motor.MOT_StepperMotor
MOT_BrushlessMotor = _stepper_motor.MOT_BrushlessMotor
MOT_CustomMotor = _stepper_motor.MOT_CustomMotor
MOT_TravelModeUndefined = _stepper_motor.MOT_TravelModeUndefined
MOT_Linear = _stepper_motor.MOT_Linear
MOT_Rotational = _stepper_motor.MOT_Rotational
MOT_TravelDirectionUndefined = _stepper_motor.MOT_TravelDirectionUndefined
MOT_Forwards = _stepper_motor.MOT_Forwards
MOT_Reverse = _stepper_motor.MOT_Reverse
MOT_LimitSwitchDirectionUndefined = _stepper_motor.MOT_LimitSwitchDirectionUndefined
MOT_ReverseLimitSwitch = _stepper_motor.MOT_ReverseLimitSwitch
MOT_ForwardLimitSwitch = _stepper_motor.MOT_ForwardLimitSwitch
MOT_Normal = _stepper_motor.MOT_Normal
MOT_Backwards = _stepper_motor.MOT_Backwards
MOT_JogModeUndefined = _stepper_motor.MOT_JogModeUndefined
MOT_Continuous = _stepper_motor.MOT_Continuous
MOT_SingleStep = _stepper_motor.MOT_SingleStep
MOT_StopModeUndefined = _stepper_motor.MOT_StopModeUndefined
MOT_Immediate = _stepper_motor.MOT_Immediate
MOT_Profiled = _stepper_motor.MOT_Profiled
MOT_ButtonModeUndefined = _stepper_motor.MOT_ButtonModeUndefined
MOT_JogMode = _stepper_motor.MOT_JogMode
MOT_Preset = _stepper_motor.MOT_Preset
MOT_LimitSwitchModeUndefined = _stepper_motor.MOT_LimitSwitchModeUndefined
MOT_LimitSwitchIgnoreSwitch = _stepper_motor.MOT_LimitSwitchIgnoreSwitch
MOT_LimitSwitchMakeOnContact = _stepper_motor.MOT_LimitSwitchMakeOnContact
MOT_LimitSwitchBreakOnContact = _stepper_motor.MOT_LimitSwitchBreakOnContact
MOT_LimitSwitchMakeOnHome = _stepper_motor.MOT_LimitSwitchMakeOnHome
MOT_LimitSwitchBreakOnHome = _stepper_motor.MOT_LimitSwitchBreakOnHome
MOT_PMD_Reserved = _stepper_motor.MOT_PMD_Reserved
MOT_LimitSwitchIgnoreSwitchSwapped = _stepper_motor.MOT_LimitSwitchIgnoreSwitchSwapped
MOT_LimitSwitchMakeOnContactSwapped = _stepper_motor.MOT_LimitSwitchMakeOnContactSwapped
MOT_LimitSwitchBreakOnContactSwapped = _stepper_motor.MOT_LimitSwitchBreakOnContactSwapped
MOT_LimitSwitchMakeOnHomeSwapped = _stepper_motor.MOT_LimitSwitchMakeOnHomeSwapped
MOT_LimitSwitchBreakOnHomeSwapped = _stepper_motor.MOT_LimitSwitchBreakOnHomeSwapped
MOT_LimitSwitchSWModeUndefined = _stepper_motor.MOT_LimitSwitchSWModeUndefined
MOT_LimitSwitchIgnored = _stepper_motor.MOT_LimitSwitchIgnored
MOT_LimitSwitchStopImmediate = _stepper_motor.MOT_LimitSwitchStopImmediate
MOT_LimitSwitchStopProfiled = _stepper_motor.MOT_LimitSwitchStopProfiled
MOT_LimitSwitchIgnored_Rotational = _stepper_motor.MOT_LimitSwitchIgnored_Rotational
MOT_LimitSwitchStopImmediate_Rotational = _stepper_motor.MOT_LimitSwitchStopImmediate_Rotational
MOT_LimitSwitchStopProfiled_Rotational = _stepper_motor.MOT_LimitSwitchStopProfiled_Rotational
DisallowIllegalMoves = _stepper_motor.DisallowIllegalMoves
AllowPartialMoves = _stepper_motor.AllowPartialMoves
AllowAllMoves = _stepper_motor.AllowAllMoves
MOT_PIDLoopModeDisabled = _stepper_motor.MOT_PIDLoopModeDisabled
MOT_PIDOpenLoopMode = _stepper_motor.MOT_PIDOpenLoopMode
MOT_PIDClosedLoopMode = _stepper_motor.MOT_PIDClosedLoopMode
LinearRange = _stepper_motor.LinearRange
RotationalUnlimited = _stepper_motor.RotationalUnlimited
RotationalWrapping = _stepper_motor.RotationalWrapping
Quickest = _stepper_motor.Quickest
Forwards = _stepper_motor.Forwards
Reverse = _stepper_motor.Reverse
class TLI_DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    typeID = property(_stepper_motor.TLI_DeviceInfo_typeID_get, _stepper_motor.TLI_DeviceInfo_typeID_set)
    description = property(_stepper_motor.TLI_DeviceInfo_description_get, _stepper_motor.TLI_DeviceInfo_description_set)
    serialNo = property(_stepper_motor.TLI_DeviceInfo_serialNo_get, _stepper_motor.TLI_DeviceInfo_serialNo_set)
    PID = property(_stepper_motor.TLI_DeviceInfo_PID_get, _stepper_motor.TLI_DeviceInfo_PID_set)
    isKnownType = property(_stepper_motor.TLI_DeviceInfo_isKnownType_get, _stepper_motor.TLI_DeviceInfo_isKnownType_set)
    motorType = property(_stepper_motor.TLI_DeviceInfo_motorType_get, _stepper_motor.TLI_DeviceInfo_motorType_set)
    isPiezoDevice = property(_stepper_motor.TLI_DeviceInfo_isPiezoDevice_get, _stepper_motor.TLI_DeviceInfo_isPiezoDevice_set)
    isLaser = property(_stepper_motor.TLI_DeviceInfo_isLaser_get, _stepper_motor.TLI_DeviceInfo_isLaser_set)
    isCustomType = property(_stepper_motor.TLI_DeviceInfo_isCustomType_get, _stepper_motor.TLI_DeviceInfo_isCustomType_set)
    isRack = property(_stepper_motor.TLI_DeviceInfo_isRack_get, _stepper_motor.TLI_DeviceInfo_isRack_set)
    maxChannels = property(_stepper_motor.TLI_DeviceInfo_maxChannels_get, _stepper_motor.TLI_DeviceInfo_maxChannels_set)

    def __init__(self):
        _stepper_motor.TLI_DeviceInfo_swiginit(self, _stepper_motor.new_TLI_DeviceInfo())
    __swig_destroy__ = _stepper_motor.delete_TLI_DeviceInfo

# Register TLI_DeviceInfo in _stepper_motor:
_stepper_motor.TLI_DeviceInfo_swigregister(TLI_DeviceInfo)
class TLI_HardwareInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_stepper_motor.TLI_HardwareInformation_serialNumber_get, _stepper_motor.TLI_HardwareInformation_serialNumber_set)
    modelNumber = property(_stepper_motor.TLI_HardwareInformation_modelNumber_get, _stepper_motor.TLI_HardwareInformation_modelNumber_set)
    type = property(_stepper_motor.TLI_HardwareInformation_type_get, _stepper_motor.TLI_HardwareInformation_type_set)
    firmwareVersion = property(_stepper_motor.TLI_HardwareInformation_firmwareVersion_get, _stepper_motor.TLI_HardwareInformation_firmwareVersion_set)
    notes = property(_stepper_motor.TLI_HardwareInformation_notes_get, _stepper_motor.TLI_HardwareInformation_notes_set)
    deviceDependantData = property(_stepper_motor.TLI_HardwareInformation_deviceDependantData_get, _stepper_motor.TLI_HardwareInformation_deviceDependantData_set)
    hardwareVersion = property(_stepper_motor.TLI_HardwareInformation_hardwareVersion_get, _stepper_motor.TLI_HardwareInformation_hardwareVersion_set)
    modificationState = property(_stepper_motor.TLI_HardwareInformation_modificationState_get, _stepper_motor.TLI_HardwareInformation_modificationState_set)
    numChannels = property(_stepper_motor.TLI_HardwareInformation_numChannels_get, _stepper_motor.TLI_HardwareInformation_numChannels_set)

    def __init__(self):
        _stepper_motor.TLI_HardwareInformation_swiginit(self, _stepper_motor.new_TLI_HardwareInformation())
    __swig_destroy__ = _stepper_motor.delete_TLI_HardwareInformation

# Register TLI_HardwareInformation in _stepper_motor:
_stepper_motor.TLI_HardwareInformation_swigregister(TLI_HardwareInformation)
class MOT_VelocityParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    minVelocity = property(_stepper_motor.MOT_VelocityParameters_minVelocity_get, _stepper_motor.MOT_VelocityParameters_minVelocity_set)
    acceleration = property(_stepper_motor.MOT_VelocityParameters_acceleration_get, _stepper_motor.MOT_VelocityParameters_acceleration_set)
    maxVelocity = property(_stepper_motor.MOT_VelocityParameters_maxVelocity_get, _stepper_motor.MOT_VelocityParameters_maxVelocity_set)

    def __init__(self):
        _stepper_motor.MOT_VelocityParameters_swiginit(self, _stepper_motor.new_MOT_VelocityParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_VelocityParameters

# Register MOT_VelocityParameters in _stepper_motor:
_stepper_motor.MOT_VelocityParameters_swigregister(MOT_VelocityParameters)
class MOT_JogParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_stepper_motor.MOT_JogParameters_mode_get, _stepper_motor.MOT_JogParameters_mode_set)
    stepSize = property(_stepper_motor.MOT_JogParameters_stepSize_get, _stepper_motor.MOT_JogParameters_stepSize_set)
    velParams = property(_stepper_motor.MOT_JogParameters_velParams_get, _stepper_motor.MOT_JogParameters_velParams_set)
    stopMode = property(_stepper_motor.MOT_JogParameters_stopMode_get, _stepper_motor.MOT_JogParameters_stopMode_set)

    def __init__(self):
        _stepper_motor.MOT_JogParameters_swiginit(self, _stepper_motor.new_MOT_JogParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_JogParameters

# Register MOT_JogParameters in _stepper_motor:
_stepper_motor.MOT_JogParameters_swigregister(MOT_JogParameters)
class MOT_HomingParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    direction = property(_stepper_motor.MOT_HomingParameters_direction_get, _stepper_motor.MOT_HomingParameters_direction_set)
    limitSwitch = property(_stepper_motor.MOT_HomingParameters_limitSwitch_get, _stepper_motor.MOT_HomingParameters_limitSwitch_set)
    velocity = property(_stepper_motor.MOT_HomingParameters_velocity_get, _stepper_motor.MOT_HomingParameters_velocity_set)
    offsetDistance = property(_stepper_motor.MOT_HomingParameters_offsetDistance_get, _stepper_motor.MOT_HomingParameters_offsetDistance_set)

    def __init__(self):
        _stepper_motor.MOT_HomingParameters_swiginit(self, _stepper_motor.new_MOT_HomingParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_HomingParameters

# Register MOT_HomingParameters in _stepper_motor:
_stepper_motor.MOT_HomingParameters_swigregister(MOT_HomingParameters)
class MOT_LimitSwitchParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    clockwiseHardwareLimit = property(_stepper_motor.MOT_LimitSwitchParameters_clockwiseHardwareLimit_get, _stepper_motor.MOT_LimitSwitchParameters_clockwiseHardwareLimit_set)
    anticlockwiseHardwareLimit = property(_stepper_motor.MOT_LimitSwitchParameters_anticlockwiseHardwareLimit_get, _stepper_motor.MOT_LimitSwitchParameters_anticlockwiseHardwareLimit_set)
    clockwisePosition = property(_stepper_motor.MOT_LimitSwitchParameters_clockwisePosition_get, _stepper_motor.MOT_LimitSwitchParameters_clockwisePosition_set)
    anticlockwisePosition = property(_stepper_motor.MOT_LimitSwitchParameters_anticlockwisePosition_get, _stepper_motor.MOT_LimitSwitchParameters_anticlockwisePosition_set)
    softLimitMode = property(_stepper_motor.MOT_LimitSwitchParameters_softLimitMode_get, _stepper_motor.MOT_LimitSwitchParameters_softLimitMode_set)

    def __init__(self):
        _stepper_motor.MOT_LimitSwitchParameters_swiginit(self, _stepper_motor.new_MOT_LimitSwitchParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_LimitSwitchParameters

# Register MOT_LimitSwitchParameters in _stepper_motor:
_stepper_motor.MOT_LimitSwitchParameters_swigregister(MOT_LimitSwitchParameters)
class MOT_PowerParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    restPercentage = property(_stepper_motor.MOT_PowerParameters_restPercentage_get, _stepper_motor.MOT_PowerParameters_restPercentage_set)
    movePercentage = property(_stepper_motor.MOT_PowerParameters_movePercentage_get, _stepper_motor.MOT_PowerParameters_movePercentage_set)

    def __init__(self):
        _stepper_motor.MOT_PowerParameters_swiginit(self, _stepper_motor.new_MOT_PowerParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_PowerParameters

# Register MOT_PowerParameters in _stepper_motor:
_stepper_motor.MOT_PowerParameters_swigregister(MOT_PowerParameters)
class MOT_JoystickParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lowGearMaxVelocity = property(_stepper_motor.MOT_JoystickParameters_lowGearMaxVelocity_get, _stepper_motor.MOT_JoystickParameters_lowGearMaxVelocity_set)
    highGearMaxVelocity = property(_stepper_motor.MOT_JoystickParameters_highGearMaxVelocity_get, _stepper_motor.MOT_JoystickParameters_highGearMaxVelocity_set)
    lowGearAcceleration = property(_stepper_motor.MOT_JoystickParameters_lowGearAcceleration_get, _stepper_motor.MOT_JoystickParameters_lowGearAcceleration_set)
    highGearAcceleration = property(_stepper_motor.MOT_JoystickParameters_highGearAcceleration_get, _stepper_motor.MOT_JoystickParameters_highGearAcceleration_set)
    directionSense = property(_stepper_motor.MOT_JoystickParameters_directionSense_get, _stepper_motor.MOT_JoystickParameters_directionSense_set)

    def __init__(self):
        _stepper_motor.MOT_JoystickParameters_swiginit(self, _stepper_motor.new_MOT_JoystickParameters())
    __swig_destroy__ = _stepper_motor.delete_MOT_JoystickParameters

# Register MOT_JoystickParameters in _stepper_motor:
_stepper_motor.MOT_JoystickParameters_swigregister(MOT_JoystickParameters)
class MOT_PIDLoopEncoderParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    loopMode = property(_stepper_motor.MOT_PIDLoopEncoderParams_loopMode_get, _stepper_motor.MOT_PIDLoopEncoderParams_loopMode_set)
    proportionalGain = property(_stepper_motor.MOT_PIDLoopEncoderParams_proportionalGain_get, _stepper_motor.MOT_PIDLoopEncoderParams_proportionalGain_set)
    integralGain = property(_stepper_motor.MOT_PIDLoopEncoderParams_integralGain_get, _stepper_motor.MOT_PIDLoopEncoderParams_integralGain_set)
    differentialGain = property(_stepper_motor.MOT_PIDLoopEncoderParams_differentialGain_get, _stepper_motor.MOT_PIDLoopEncoderParams_differentialGain_set)
    PIDOutputLimit = property(_stepper_motor.MOT_PIDLoopEncoderParams_PIDOutputLimit_get, _stepper_motor.MOT_PIDLoopEncoderParams_PIDOutputLimit_set)
    PIDTolerance = property(_stepper_motor.MOT_PIDLoopEncoderParams_PIDTolerance_get, _stepper_motor.MOT_PIDLoopEncoderParams_PIDTolerance_set)

    def __init__(self):
        _stepper_motor.MOT_PIDLoopEncoderParams_swiginit(self, _stepper_motor.new_MOT_PIDLoopEncoderParams())
    __swig_destroy__ = _stepper_motor.delete_MOT_PIDLoopEncoderParams

# Register MOT_PIDLoopEncoderParams in _stepper_motor:
_stepper_motor.MOT_PIDLoopEncoderParams_swigregister(MOT_PIDLoopEncoderParams)

def TLI_BuildDeviceList():
    return _stepper_motor.TLI_BuildDeviceList()

def TLI_GetDeviceListSize():
    return _stepper_motor.TLI_GetDeviceListSize()

def TLI_GetDeviceList(stringsReceiver):
    return _stepper_motor.TLI_GetDeviceList(stringsReceiver)

def TLI_GetDeviceListByType(stringsReceiver, typeID):
    return _stepper_motor.TLI_GetDeviceListByType(stringsReceiver, typeID)

def TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length):
    return _stepper_motor.TLI_GetDeviceListByTypes(stringsReceiver, typeIDs, length)

def TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer):
    return _stepper_motor.TLI_GetDeviceListExt(receiveBuffer, sizeOfBuffer)

def TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID):
    return _stepper_motor.TLI_GetDeviceListByTypeExt(receiveBuffer, sizeOfBuffer, typeID)

def TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length):
    return _stepper_motor.TLI_GetDeviceListByTypesExt(receiveBuffer, sizeOfBuffer, typeIDs, length)

def TLI_GetDeviceInfo(serialNo, info):
    return _stepper_motor.TLI_GetDeviceInfo(serialNo, info)

def TLI_InitializeSimulations():
    return _stepper_motor.TLI_InitializeSimulations()

def TLI_UninitializeSimulations():
    return _stepper_motor.TLI_UninitializeSimulations()

def SBC_Open(serialNo):
    return _stepper_motor.SBC_Open(serialNo)

def SBC_Close(serialNo):
    return _stepper_motor.SBC_Close(serialNo)

def SBC_CheckConnection(serialNo):
    return _stepper_motor.SBC_CheckConnection(serialNo)

def SBC_IsChannelValid(serialNo, channel):
    return _stepper_motor.SBC_IsChannelValid(serialNo, channel)

def SBC_MaxChannelCount(serialNo):
    return _stepper_motor.SBC_MaxChannelCount(serialNo)

def SBC_Identify(serialNo, channel):
    return _stepper_motor.SBC_Identify(serialNo, channel)

def SBC_GetHardwareInfo(serialNo, channel, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState):
    return _stepper_motor.SBC_GetHardwareInfo(serialNo, channel, modelNo, sizeOfModelNo, type, numChannels, notes, sizeOfNotes, firmwareVersion, hardwareVersion, modificationState)

def SBC_GetHardwareInfoBlock(serialNo, channel, hardwareInfo):
    return _stepper_motor.SBC_GetHardwareInfoBlock(serialNo, channel, hardwareInfo)

def SBC_GetNumChannels(serialNo):
    return _stepper_motor.SBC_GetNumChannels(serialNo)

def SBC_GetFirmwareVersion(serialNo, channel):
    return _stepper_motor.SBC_GetFirmwareVersion(serialNo, channel)

def SBC_GetSoftwareVersion(serialNo):
    return _stepper_motor.SBC_GetSoftwareVersion(serialNo)

def SBC_LoadSettings(serialNo, channel):
    return _stepper_motor.SBC_LoadSettings(serialNo, channel)

def SBC_LoadNamedSettings(serialNo, channel, settingsName):
    return _stepper_motor.SBC_LoadNamedSettings(serialNo, channel, settingsName)

def SBC_PersistSettings(serialNo, channel):
    return _stepper_motor.SBC_PersistSettings(serialNo, channel)

def SBC_SetCalibrationFile(serialNo, channel, filename, enabled):
    return _stepper_motor.SBC_SetCalibrationFile(serialNo, channel, filename, enabled)

def SBC_IsCalibrationActive(serialNo, channel):
    return _stepper_motor.SBC_IsCalibrationActive(serialNo, channel)

def SBC_GetCalibrationFile(serialNo, channel, filename, sizeOfBuffer):
    return _stepper_motor.SBC_GetCalibrationFile(serialNo, channel, filename, sizeOfBuffer)

def SBC_DisableChannel(serialNo, channel):
    return _stepper_motor.SBC_DisableChannel(serialNo, channel)

def SBC_EnableChannel(serialNo, channel):
    return _stepper_motor.SBC_EnableChannel(serialNo, channel)

def SBC_GetNumberPositions(serialNo, channel):
    return _stepper_motor.SBC_GetNumberPositions(serialNo, channel)

def SBC_MoveToPosition(serialNo, channel, index):
    return _stepper_motor.SBC_MoveToPosition(serialNo, channel, index)

def SBC_GetPosition(serialNo, channel):
    return _stepper_motor.SBC_GetPosition(serialNo, channel)

def SBC_CanHome(serialNo, channel):
    return _stepper_motor.SBC_CanHome(serialNo, channel)

def SBC_NeedsHoming(serialNo, channel):
    return _stepper_motor.SBC_NeedsHoming(serialNo, channel)

def SBC_CanMoveWithoutHomingFirst(serialNo, channel):
    return _stepper_motor.SBC_CanMoveWithoutHomingFirst(serialNo, channel)

def SBC_Home(serialNo, channel):
    return _stepper_motor.SBC_Home(serialNo, channel)

def SBC_ClearMessageQueue(serialNo, channel):
    return _stepper_motor.SBC_ClearMessageQueue(serialNo, channel)

def SBC_RegisterMessageCallback(serialNo, channel, functionPointer):
    return _stepper_motor.SBC_RegisterMessageCallback(serialNo, channel, functionPointer)

def SBC_MessageQueueSize(serialNo, channel):
    return _stepper_motor.SBC_MessageQueueSize(serialNo, channel)

def SBC_GetNextMessage(serialNo, channel, messageType, messageID, messageData):
    return _stepper_motor.SBC_GetNextMessage(serialNo, channel, messageType, messageID, messageData)

def SBC_WaitForMessage(serialNo, channel, messageType, messageID, messageData):
    return _stepper_motor.SBC_WaitForMessage(serialNo, channel, messageType, messageID, messageData)

def SBC_RequestHomingParams(serialNo, channel):
    return _stepper_motor.SBC_RequestHomingParams(serialNo, channel)

def SBC_GetHomingVelocity(serialNo, channel):
    return _stepper_motor.SBC_GetHomingVelocity(serialNo, channel)

def SBC_SetHomingVelocity(serialNo, channel, velocity):
    return _stepper_motor.SBC_SetHomingVelocity(serialNo, channel, velocity)

def SBC_MoveRelative(serialNo, channel, displacement):
    return _stepper_motor.SBC_MoveRelative(serialNo, channel, displacement)

def SBC_RequestJogParams(serialNo, channel):
    return _stepper_motor.SBC_RequestJogParams(serialNo, channel)

def SBC_GetJogMode(serialNo, channel, mode, stopMode):
    return _stepper_motor.SBC_GetJogMode(serialNo, channel, mode, stopMode)

def SBC_SetJogMode(serialNo, channel, mode, stopMode):
    return _stepper_motor.SBC_SetJogMode(serialNo, channel, mode, stopMode)

def SBC_GetJogStepSize(serialNo, channel):
    return _stepper_motor.SBC_GetJogStepSize(serialNo, channel)

def SBC_SetJogStepSize(serialNo, channel, stepSize):
    return _stepper_motor.SBC_SetJogStepSize(serialNo, channel, stepSize)

def SBC_GetJogVelParams(serialNo, channel, acceleration, maxVelocity):
    return _stepper_motor.SBC_GetJogVelParams(serialNo, channel, acceleration, maxVelocity)

def SBC_SetJogVelParams(serialNo, channel, acceleration, maxVelocity):
    return _stepper_motor.SBC_SetJogVelParams(serialNo, channel, acceleration, maxVelocity)

def SBC_MoveJog(serialNo, channel, jogDirection):
    return _stepper_motor.SBC_MoveJog(serialNo, channel, jogDirection)

def SBC_RequestVelParams(serialNo, channel):
    return _stepper_motor.SBC_RequestVelParams(serialNo, channel)

def SBC_GetVelParams(serialNo, channel, acceleration, maxVelocity):
    return _stepper_motor.SBC_GetVelParams(serialNo, channel, acceleration, maxVelocity)

def SBC_SetVelParams(serialNo, channel, acceleration, maxVelocity):
    return _stepper_motor.SBC_SetVelParams(serialNo, channel, acceleration, maxVelocity)

def SBC_MoveAtVelocity(serialNo, channel, direction):
    return _stepper_motor.SBC_MoveAtVelocity(serialNo, channel, direction)

def SBC_SetDirection(serialNo, channel, reverse):
    return _stepper_motor.SBC_SetDirection(serialNo, channel, reverse)

def SBC_StopImmediate(serialNo, channel):
    return _stepper_motor.SBC_StopImmediate(serialNo, channel)

def SBC_StopProfiled(serialNo, channel):
    return _stepper_motor.SBC_StopProfiled(serialNo, channel)

def SBC_RequestBacklash(serialNo, channel):
    return _stepper_motor.SBC_RequestBacklash(serialNo, channel)

def SBC_GetBacklash(serialNo, channel):
    return _stepper_motor.SBC_GetBacklash(serialNo, channel)

def SBC_SetBacklash(serialNo, channel, distance):
    return _stepper_motor.SBC_SetBacklash(serialNo, channel, distance)

def SBC_GetPositionCounter(serialNo, channel):
    return _stepper_motor.SBC_GetPositionCounter(serialNo, channel)

def SBC_SetPositionCounter(serialNo, channel, count):
    return _stepper_motor.SBC_SetPositionCounter(serialNo, channel, count)

def SBC_RequestEncoderCounter(serialNo, channel):
    return _stepper_motor.SBC_RequestEncoderCounter(serialNo, channel)

def SBC_GetEncoderCounter(serialNo, channel):
    return _stepper_motor.SBC_GetEncoderCounter(serialNo, channel)

def SBC_SetEncoderCounter(serialNo, channel, count):
    return _stepper_motor.SBC_SetEncoderCounter(serialNo, channel, count)

def SBC_RequestLimitSwitchParams(serialNo, channel):
    return _stepper_motor.SBC_RequestLimitSwitchParams(serialNo, channel)

def SBC_GetLimitSwitchParams(serialNo, channel, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode):
    return _stepper_motor.SBC_GetLimitSwitchParams(serialNo, channel, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode)

def SBC_SetLimitSwitchParams(serialNo, channel, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode):
    return _stepper_motor.SBC_SetLimitSwitchParams(serialNo, channel, clockwiseHardwareLimit, anticlockwiseHardwareLimit, clockwisePosition, anticlockwisePosition, softLimitMode)

def SBC_GetSoftLimitMode(serialNo, channel):
    return _stepper_motor.SBC_GetSoftLimitMode(serialNo, channel)

def SBC_SetLimitsSoftwareApproachPolicy(serialNo, channel, limitsSoftwareApproachPolicy):
    return _stepper_motor.SBC_SetLimitsSoftwareApproachPolicy(serialNo, channel, limitsSoftwareApproachPolicy)

def SBC_GetVelParamsBlock(serialNo, channel, velocityParams):
    return _stepper_motor.SBC_GetVelParamsBlock(serialNo, channel, velocityParams)

def SBC_SetVelParamsBlock(serialNo, channel, velocityParams):
    return _stepper_motor.SBC_SetVelParamsBlock(serialNo, channel, velocityParams)

def SBC_SetMoveAbsolutePosition(serialNo, channel, position):
    return _stepper_motor.SBC_SetMoveAbsolutePosition(serialNo, channel, position)

def SBC_RequestMoveAbsolutePosition(serialNo, channel):
    return _stepper_motor.SBC_RequestMoveAbsolutePosition(serialNo, channel)

def SBC_GetMoveAbsolutePosition(serialNo, channel):
    return _stepper_motor.SBC_GetMoveAbsolutePosition(serialNo, channel)

def SBC_MoveAbsolute(serialNo, channel):
    return _stepper_motor.SBC_MoveAbsolute(serialNo, channel)

def SBC_SetMoveRelativeDistance(serialNo, channel, distance):
    return _stepper_motor.SBC_SetMoveRelativeDistance(serialNo, channel, distance)

def SBC_RequestMoveRelativeDistance(serialNo, channel):
    return _stepper_motor.SBC_RequestMoveRelativeDistance(serialNo, channel)

def SBC_GetMoveRelativeDistance(serialNo, channel):
    return _stepper_motor.SBC_GetMoveRelativeDistance(serialNo, channel)

def SBC_MoveRelativeDistance(serialNo, channel):
    return _stepper_motor.SBC_MoveRelativeDistance(serialNo, channel)

def SBC_GetHomingParamsBlock(serialNo, channel, homingParams):
    return _stepper_motor.SBC_GetHomingParamsBlock(serialNo, channel, homingParams)

def SBC_SetHomingParamsBlock(serialNo, channel, homingParams):
    return _stepper_motor.SBC_SetHomingParamsBlock(serialNo, channel, homingParams)

def SBC_GetJogParamsBlock(serialNo, channel, jogParams):
    return _stepper_motor.SBC_GetJogParamsBlock(serialNo, channel, jogParams)

def SBC_SetJogParamsBlock(serialNo, channel, jogParams):
    return _stepper_motor.SBC_SetJogParamsBlock(serialNo, channel, jogParams)

def SBC_GetLimitSwitchParamsBlock(serialNo, channel, limitSwitchParams):
    return _stepper_motor.SBC_GetLimitSwitchParamsBlock(serialNo, channel, limitSwitchParams)

def SBC_SetLimitSwitchParamsBlock(serialNo, channel, limitSwitchParams):
    return _stepper_motor.SBC_SetLimitSwitchParamsBlock(serialNo, channel, limitSwitchParams)

def SBC_GetTriggerSwitches(serialNo, channel):
    return _stepper_motor.SBC_GetTriggerSwitches(serialNo, channel)

def SBC_SetTriggerSwitches(serialNo, channel, indicatorBits):
    return _stepper_motor.SBC_SetTriggerSwitches(serialNo, channel, indicatorBits)

def SBC_RequestDigitalOutputs(serialNo, channel):
    return _stepper_motor.SBC_RequestDigitalOutputs(serialNo, channel)

def SBC_GetDigitalOutputs(serialNo, channel):
    return _stepper_motor.SBC_GetDigitalOutputs(serialNo, channel)

def SBC_SetDigitalOutputs(serialNo, channel, outputsBits):
    return _stepper_motor.SBC_SetDigitalOutputs(serialNo, channel, outputsBits)

def SBC_RequestRackDigitalOutputs(serialNo):
    return _stepper_motor.SBC_RequestRackDigitalOutputs(serialNo)

def SBC_GetRackDigitalOutputs(serialNo):
    return _stepper_motor.SBC_GetRackDigitalOutputs(serialNo)

def SBC_SetRackDigitalOutputs(serialNo, outputsBits):
    return _stepper_motor.SBC_SetRackDigitalOutputs(serialNo, outputsBits)

def SBC_RequestRackStatusBits(serialNo):
    return _stepper_motor.SBC_RequestRackStatusBits(serialNo)

def SBC_GetRackStatusBits(serialNo):
    return _stepper_motor.SBC_GetRackStatusBits(serialNo)

def SBC_RequestInputVoltage(serialNo, channel):
    return _stepper_motor.SBC_RequestInputVoltage(serialNo, channel)

def SBC_GetInputVoltage(serialNo, channel):
    return _stepper_motor.SBC_GetInputVoltage(serialNo, channel)

def SBC_RequestPowerParams(serialNo, channel):
    return _stepper_motor.SBC_RequestPowerParams(serialNo, channel)

def SBC_GetPowerParams(serialNo, channel, powerParams):
    return _stepper_motor.SBC_GetPowerParams(serialNo, channel, powerParams)

def SBC_SetPowerParams(serialNo, channel, powerParams):
    return _stepper_motor.SBC_SetPowerParams(serialNo, channel, powerParams)

def SBC_RequestBowIndex(serialNo, channel):
    return _stepper_motor.SBC_RequestBowIndex(serialNo, channel)

def SBC_GetBowIndex(serialNo, channel):
    return _stepper_motor.SBC_GetBowIndex(serialNo, channel)

def SBC_SetBowIndex(serialNo, channel, bowIndex):
    return _stepper_motor.SBC_SetBowIndex(serialNo, channel, bowIndex)

def SBC_UsesPIDLoopEncoding(serialNo, channel):
    return _stepper_motor.SBC_UsesPIDLoopEncoding(serialNo, channel)

def SBC_SetPIDLoopEncoderParams(serialNo, channel, params):
    return _stepper_motor.SBC_SetPIDLoopEncoderParams(serialNo, channel, params)

def SBC_SetPIDLoopEncoderCoeff(serialNo, channel, coeff):
    return _stepper_motor.SBC_SetPIDLoopEncoderCoeff(serialNo, channel, coeff)

def SBC_RequestPIDLoopEncoderParams(serialNo, channel):
    return _stepper_motor.SBC_RequestPIDLoopEncoderParams(serialNo, channel)

def SBC_GetPIDLoopEncoderParams(serialNo, channel, params):
    return _stepper_motor.SBC_GetPIDLoopEncoderParams(serialNo, channel, params)

def SBC_GetPIDLoopEncoderCoeff(serialNo, channel):
    return _stepper_motor.SBC_GetPIDLoopEncoderCoeff(serialNo, channel)

def SBC_RequestJoystickParams(serialNo, channel):
    return _stepper_motor.SBC_RequestJoystickParams(serialNo, channel)

def SBC_GetJoystickParams(serialNo, channel, joystickParams):
    return _stepper_motor.SBC_GetJoystickParams(serialNo, channel, joystickParams)

def SBC_SetJoystickParams(serialNo, channel, joystickParams):
    return _stepper_motor.SBC_SetJoystickParams(serialNo, channel, joystickParams)

def SBC_SuspendMoveMessages(serialNo, channel):
    return _stepper_motor.SBC_SuspendMoveMessages(serialNo, channel)

def SBC_ResumeMoveMessages(serialNo, channel):
    return _stepper_motor.SBC_ResumeMoveMessages(serialNo, channel)

def SBC_RequestPosition(serialNo, channel):
    return _stepper_motor.SBC_RequestPosition(serialNo, channel)

def SBC_RequestStatusBits(serialNo, channel):
    return _stepper_motor.SBC_RequestStatusBits(serialNo, channel)

def SBC_GetStatusBits(serialNo, channel):
    return _stepper_motor.SBC_GetStatusBits(serialNo, channel)

def SBC_StartPolling(serialNo, channel, milliseconds):
    return _stepper_motor.SBC_StartPolling(serialNo, channel, milliseconds)

def SBC_PollingDuration(serialNo, channel):
    return _stepper_motor.SBC_PollingDuration(serialNo, channel)

def SBC_StopPolling(serialNo, channel):
    return _stepper_motor.SBC_StopPolling(serialNo, channel)

def SBC_TimeSinceLastMsgReceived(serialNo, channel, lastUpdateTimeMS):
    return _stepper_motor.SBC_TimeSinceLastMsgReceived(serialNo, channel, lastUpdateTimeMS)

def SBC_EnableLastMsgTimer(serialNo, channel, enable, lastMsgTimeout):
    return _stepper_motor.SBC_EnableLastMsgTimer(serialNo, channel, enable, lastMsgTimeout)

def SBC_HasLastMsgTimerOverrun(serialNo, channel):
    return _stepper_motor.SBC_HasLastMsgTimerOverrun(serialNo, channel)

def SBC_RequestSettings(serialNo, channel):
    return _stepper_motor.SBC_RequestSettings(serialNo, channel)

def SBC_GetStageAxisMinPos(serialNo, channel):
    return _stepper_motor.SBC_GetStageAxisMinPos(serialNo, channel)

def SBC_GetStageAxisMaxPos(serialNo, channel):
    return _stepper_motor.SBC_GetStageAxisMaxPos(serialNo, channel)

def SBC_SetStageAxisLimits(serialNo, channel, minPosition, maxPosition):
    return _stepper_motor.SBC_SetStageAxisLimits(serialNo, channel, minPosition, maxPosition)

def SBC_SetMotorTravelMode(serialNo, channel, travelMode):
    return _stepper_motor.SBC_SetMotorTravelMode(serialNo, channel, travelMode)

def SBC_GetMotorTravelMode(serialNo, channel):
    return _stepper_motor.SBC_GetMotorTravelMode(serialNo, channel)

def SBC_SetMotorParams(serialNo, channel, stepsPerRev, gearBoxRatio, pitch):
    return _stepper_motor.SBC_SetMotorParams(serialNo, channel, stepsPerRev, gearBoxRatio, pitch)

def SBC_GetMotorParams(serialNo, channel, stepsPerRev, gearBoxRatio, pitch):
    return _stepper_motor.SBC_GetMotorParams(serialNo, channel, stepsPerRev, gearBoxRatio, pitch)

def SBC_SetMotorParamsExt(serialNo, channel, stepsPerRev, gearBoxRatio, pitch):
    return _stepper_motor.SBC_SetMotorParamsExt(serialNo, channel, stepsPerRev, gearBoxRatio, pitch)

def SBC_GetMotorParamsExt(serialNo, channel, stepsPerRev, gearBoxRatio, pitch):
    return _stepper_motor.SBC_GetMotorParamsExt(serialNo, channel, stepsPerRev, gearBoxRatio, pitch)

def SBC_SetMotorVelocityLimits(serialNo, channel, maxVelocity, maxAcceleration):
    return _stepper_motor.SBC_SetMotorVelocityLimits(serialNo, channel, maxVelocity, maxAcceleration)

def SBC_GetMotorVelocityLimits(serialNo, channel, maxVelocity, maxAcceleration):
    return _stepper_motor.SBC_GetMotorVelocityLimits(serialNo, channel, maxVelocity, maxAcceleration)

def SBC_ResetRotationModes(serialNo, channel):
    return _stepper_motor.SBC_ResetRotationModes(serialNo, channel)

def SBC_SetRotationModes(serialNo, channel, mode, direction):
    return _stepper_motor.SBC_SetRotationModes(serialNo, channel, mode, direction)

def SBC_SetMotorTravelLimits(serialNo, channel, minPosition, maxPosition):
    return _stepper_motor.SBC_SetMotorTravelLimits(serialNo, channel, minPosition, maxPosition)

def SBC_GetMotorTravelLimits(serialNo, channel, minPosition, maxPosition):
    return _stepper_motor.SBC_GetMotorTravelLimits(serialNo, channel, minPosition, maxPosition)

def SBC_GetRealValueFromDeviceUnit(serialNo, channel, device_unit, real_unit, unitType):
    return _stepper_motor.SBC_GetRealValueFromDeviceUnit(serialNo, channel, device_unit, real_unit, unitType)

def SBC_GetDeviceUnitFromRealValue(serialNo, channel, real_unit, device_unit, unitType):
    return _stepper_motor.SBC_GetDeviceUnitFromRealValue(serialNo, channel, real_unit, device_unit, unitType)

