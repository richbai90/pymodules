# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _module
else:
    import _module

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def cos(x):
    return _module.cos(x)

def sin(x):
    return _module.sin(x)

def tan(x):
    return _module.tan(x)

def acos(x):
    return _module.acos(x)

def asin(x):
    return _module.asin(x)

def atan(x):
    return _module.atan(x)

def atan2(y, x):
    return _module.atan2(y, x)

def cosh(x):
    return _module.cosh(x)

def sinh(x):
    return _module.sinh(x)

def tanh(x):
    return _module.tanh(x)

def exp(x):
    return _module.exp(x)

def log(x):
    return _module.log(x)

def log10(x):
    return _module.log10(x)

def pow(x, y):
    return _module.pow(x, y)

def sqrt(x):
    return _module.sqrt(x)

def ceil(x):
    return _module.ceil(x)

def floor(x):
    return _module.floor(x)

def fmod(x, y):
    return _module.fmod(x, y)

def fabs(x):
    return _module.fabs(x)
M_E = _module.M_E
M_LOG2E = _module.M_LOG2E
M_LOG10E = _module.M_LOG10E
M_LN2 = _module.M_LN2
M_LN10 = _module.M_LN10
M_PI = _module.M_PI
M_PI_2 = _module.M_PI_2
M_PI_4 = _module.M_PI_4
M_1_PI = _module.M_1_PI
M_2_PI = _module.M_2_PI
M_2_SQRTPI = _module.M_2_SQRTPI
M_SQRT2 = _module.M_SQRT2
M_SQRT1_2 = _module.M_SQRT1_2
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _module.delete_SwigPyIterator

    def value(self):
        return _module.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _module.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _module.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _module.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _module.SwigPyIterator_equal(self, x)

    def copy(self):
        return _module.SwigPyIterator_copy(self)

    def next(self):
        return _module.SwigPyIterator_next(self)

    def __next__(self):
        return _module.SwigPyIterator___next__(self)

    def previous(self):
        return _module.SwigPyIterator_previous(self)

    def advance(self, n):
        return _module.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _module.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _module.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _module.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _module.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _module.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _module.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _module:
_module.SwigPyIterator_swigregister(SwigPyIterator)
class Module(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _module.delete_Module

    def GetSourceModule(self, index):
        return _module.Module_GetSourceModule(self, index)

    def GetSourceModuleCount(self):
        return _module.Module_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Module_GetValue(self, x, y, z)

    def SetSourceModule(self, index, sourceModule):
        return _module.Module_SetSourceModule(self, index, sourceModule)

# Register Module in _module:
_module.Module_swigregister(Module)
class Add(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Add_swiginit(self, _module.new_Add())

    def GetSourceModuleCount(self):
        return _module.Add_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Add_GetValue(self, x, y, z)
    __swig_destroy__ = _module.delete_Add

# Register Add in _module:
_module.Add_swigregister(Add)
class Abs(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Abs_swiginit(self, _module.new_Abs())

    def GetSourceModuleCount(self):
        return _module.Abs_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Abs_GetValue(self, x, y, z)
    __swig_destroy__ = _module.delete_Abs

# Register Abs in _module:
_module.Abs_swigregister(Abs)
class Billow(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Billow_swiginit(self, _module.new_Billow())

    def GetFrequency(self):
        return _module.Billow_GetFrequency(self)

    def GetLacunarity(self):
        return _module.Billow_GetLacunarity(self)

    def GetNoiseQuality(self):
        return _module.Billow_GetNoiseQuality(self)

    def GetOctaveCount(self):
        return _module.Billow_GetOctaveCount(self)

    def GetPersistence(self):
        return _module.Billow_GetPersistence(self)

    def GetSeed(self):
        return _module.Billow_GetSeed(self)

    def GetSourceModuleCount(self):
        return _module.Billow_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Billow_GetValue(self, x, y, z)

    def SetFrequency(self, frequency):
        return _module.Billow_SetFrequency(self, frequency)

    def SetLacunarity(self, lacunarity):
        return _module.Billow_SetLacunarity(self, lacunarity)

    def SetNoiseQuality(self, noiseQuality):
        return _module.Billow_SetNoiseQuality(self, noiseQuality)

    def SetOctaveCount(self, octaveCount):
        return _module.Billow_SetOctaveCount(self, octaveCount)

    def SetPersistence(self, persistence):
        return _module.Billow_SetPersistence(self, persistence)

    def SetSeed(self, seed):
        return _module.Billow_SetSeed(self, seed)
    __swig_destroy__ = _module.delete_Billow

# Register Billow in _module:
_module.Billow_swigregister(Billow)
cvar = _module.cvar
DEFAULT_BILLOW_FREQUENCY = cvar.DEFAULT_BILLOW_FREQUENCY
DEFAULT_BILLOW_LACUNARITY = cvar.DEFAULT_BILLOW_LACUNARITY
DEFAULT_BILLOW_OCTAVE_COUNT = cvar.DEFAULT_BILLOW_OCTAVE_COUNT
DEFAULT_BILLOW_PERSISTENCE = cvar.DEFAULT_BILLOW_PERSISTENCE
DEFAULT_BILLOW_QUALITY = cvar.DEFAULT_BILLOW_QUALITY
DEFAULT_BILLOW_SEED = cvar.DEFAULT_BILLOW_SEED
BILLOW_MAX_OCTAVE = cvar.BILLOW_MAX_OCTAVE

class Blend(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Blend_swiginit(self, _module.new_Blend())

    def GetControlModule(self):
        return _module.Blend_GetControlModule(self)

    def GetSourceModuleCount(self):
        return _module.Blend_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Blend_GetValue(self, x, y, z)

    def SetControlModule(self, controlModule):
        return _module.Blend_SetControlModule(self, controlModule)
    __swig_destroy__ = _module.delete_Blend

# Register Blend in _module:
_module.Blend_swigregister(Blend)
class Cache(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Cache_swiginit(self, _module.new_Cache())

    def GetSourceModuleCount(self):
        return _module.Cache_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Cache_GetValue(self, x, y, z)

    def SetSourceModule(self, index, sourceModule):
        return _module.Cache_SetSourceModule(self, index, sourceModule)
    __swig_destroy__ = _module.delete_Cache

# Register Cache in _module:
_module.Cache_swigregister(Cache)
class Checkerboard(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Checkerboard_swiginit(self, _module.new_Checkerboard())

    def GetSourceModuleCount(self):
        return _module.Checkerboard_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Checkerboard_GetValue(self, x, y, z)
    __swig_destroy__ = _module.delete_Checkerboard

# Register Checkerboard in _module:
_module.Checkerboard_swigregister(Checkerboard)
class Clamp(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Clamp_swiginit(self, _module.new_Clamp())

    def GetLowerBound(self):
        return _module.Clamp_GetLowerBound(self)

    def GetSourceModuleCount(self):
        return _module.Clamp_GetSourceModuleCount(self)

    def GetUpperBound(self):
        return _module.Clamp_GetUpperBound(self)

    def GetValue(self, x, y, z):
        return _module.Clamp_GetValue(self, x, y, z)

    def SetBounds(self, lowerBound, upperBound):
        return _module.Clamp_SetBounds(self, lowerBound, upperBound)
    __swig_destroy__ = _module.delete_Clamp

# Register Clamp in _module:
_module.Clamp_swigregister(Clamp)
DEFAULT_CLAMP_LOWER_BOUND = cvar.DEFAULT_CLAMP_LOWER_BOUND
DEFAULT_CLAMP_UPPER_BOUND = cvar.DEFAULT_CLAMP_UPPER_BOUND

class Const(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Const_swiginit(self, _module.new_Const())

    def GetConstValue(self):
        return _module.Const_GetConstValue(self)

    def GetSourceModuleCount(self):
        return _module.Const_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Const_GetValue(self, x, y, z)

    def SetConstValue(self, constValue):
        return _module.Const_SetConstValue(self, constValue)
    __swig_destroy__ = _module.delete_Const

# Register Const in _module:
_module.Const_swigregister(Const)
DEFAULT_CONST_VALUE = cvar.DEFAULT_CONST_VALUE

class ControlPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inputValue = property(_module.ControlPoint_inputValue_get, _module.ControlPoint_inputValue_set)
    outputValue = property(_module.ControlPoint_outputValue_get, _module.ControlPoint_outputValue_set)

    def __init__(self):
        _module.ControlPoint_swiginit(self, _module.new_ControlPoint())
    __swig_destroy__ = _module.delete_ControlPoint

# Register ControlPoint in _module:
_module.ControlPoint_swigregister(ControlPoint)
class Curve(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Curve_swiginit(self, _module.new_Curve())
    __swig_destroy__ = _module.delete_Curve

    def AddControlPoint(self, inputValue, outputValue):
        return _module.Curve_AddControlPoint(self, inputValue, outputValue)

    def ClearAllControlPoints(self):
        return _module.Curve_ClearAllControlPoints(self)

    def GetControlPointArray(self):
        return _module.Curve_GetControlPointArray(self)

    def GetControlPointCount(self):
        return _module.Curve_GetControlPointCount(self)

    def GetSourceModuleCount(self):
        return _module.Curve_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Curve_GetValue(self, x, y, z)

# Register Curve in _module:
_module.Curve_swigregister(Curve)
class Cylinders(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Cylinders_swiginit(self, _module.new_Cylinders())

    def GetFrequency(self):
        return _module.Cylinders_GetFrequency(self)

    def GetSourceModuleCount(self):
        return _module.Cylinders_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Cylinders_GetValue(self, x, y, z)

    def SetFrequency(self, frequency):
        return _module.Cylinders_SetFrequency(self, frequency)
    __swig_destroy__ = _module.delete_Cylinders

# Register Cylinders in _module:
_module.Cylinders_swigregister(Cylinders)
DEFAULT_CYLINDERS_FREQUENCY = cvar.DEFAULT_CYLINDERS_FREQUENCY

class Displace(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Displace_swiginit(self, _module.new_Displace())

    def GetSourceModuleCount(self):
        return _module.Displace_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Displace_GetValue(self, x, y, z)

    def GetXDisplaceModule(self):
        return _module.Displace_GetXDisplaceModule(self)

    def GetYDisplaceModule(self):
        return _module.Displace_GetYDisplaceModule(self)

    def GetZDisplaceModule(self):
        return _module.Displace_GetZDisplaceModule(self)

    def SetDisplaceModules(self, xDisplaceModule, yDisplaceModule, zDisplaceModule):
        return _module.Displace_SetDisplaceModules(self, xDisplaceModule, yDisplaceModule, zDisplaceModule)

    def SetXDisplaceModule(self, xDisplaceModule):
        return _module.Displace_SetXDisplaceModule(self, xDisplaceModule)

    def SetYDisplaceModule(self, yDisplaceModule):
        return _module.Displace_SetYDisplaceModule(self, yDisplaceModule)

    def SetZDisplaceModule(self, zDisplaceModule):
        return _module.Displace_SetZDisplaceModule(self, zDisplaceModule)
    __swig_destroy__ = _module.delete_Displace

# Register Displace in _module:
_module.Displace_swigregister(Displace)
class Exponent(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Exponent_swiginit(self, _module.new_Exponent())

    def GetExponent(self):
        return _module.Exponent_GetExponent(self)

    def GetSourceModuleCount(self):
        return _module.Exponent_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Exponent_GetValue(self, x, y, z)

    def SetExponent(self, exponent):
        return _module.Exponent_SetExponent(self, exponent)
    __swig_destroy__ = _module.delete_Exponent

# Register Exponent in _module:
_module.Exponent_swigregister(Exponent)
DEFAULT_EXPONENT = cvar.DEFAULT_EXPONENT

class Invert(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Invert_swiginit(self, _module.new_Invert())

    def GetSourceModuleCount(self):
        return _module.Invert_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Invert_GetValue(self, x, y, z)
    __swig_destroy__ = _module.delete_Invert

# Register Invert in _module:
_module.Invert_swigregister(Invert)
class Max(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Max_swiginit(self, _module.new_Max())

    def GetSourceModuleCount(self):
        return _module.Max_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Max_GetValue(self, x, y, z)
    __swig_destroy__ = _module.delete_Max

# Register Max in _module:
_module.Max_swigregister(Max)
class Min(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Min_swiginit(self, _module.new_Min())

    def GetSourceModuleCount(self):
        return _module.Min_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Min_GetValue(self, x, y, z)
    __swig_destroy__ = _module.delete_Min

# Register Min in _module:
_module.Min_swigregister(Min)
class Multiply(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Multiply_swiginit(self, _module.new_Multiply())

    def GetSourceModuleCount(self):
        return _module.Multiply_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Multiply_GetValue(self, x, y, z)
    __swig_destroy__ = _module.delete_Multiply

# Register Multiply in _module:
_module.Multiply_swigregister(Multiply)
class Perlin(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Perlin_swiginit(self, _module.new_Perlin())

    def GetFrequency(self):
        return _module.Perlin_GetFrequency(self)

    def GetLacunarity(self):
        return _module.Perlin_GetLacunarity(self)

    def GetNoiseQuality(self):
        return _module.Perlin_GetNoiseQuality(self)

    def GetOctaveCount(self):
        return _module.Perlin_GetOctaveCount(self)

    def GetPersistence(self):
        return _module.Perlin_GetPersistence(self)

    def GetSeed(self):
        return _module.Perlin_GetSeed(self)

    def GetSourceModuleCount(self):
        return _module.Perlin_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Perlin_GetValue(self, x, y, z)

    def SetFrequency(self, frequency):
        return _module.Perlin_SetFrequency(self, frequency)

    def SetLacunarity(self, lacunarity):
        return _module.Perlin_SetLacunarity(self, lacunarity)

    def SetNoiseQuality(self, noiseQuality):
        return _module.Perlin_SetNoiseQuality(self, noiseQuality)

    def SetOctaveCount(self, octaveCount):
        return _module.Perlin_SetOctaveCount(self, octaveCount)

    def SetPersistence(self, persistence):
        return _module.Perlin_SetPersistence(self, persistence)

    def SetSeed(self, seed):
        return _module.Perlin_SetSeed(self, seed)
    __swig_destroy__ = _module.delete_Perlin

# Register Perlin in _module:
_module.Perlin_swigregister(Perlin)
DEFAULT_PERLIN_FREQUENCY = cvar.DEFAULT_PERLIN_FREQUENCY
DEFAULT_PERLIN_LACUNARITY = cvar.DEFAULT_PERLIN_LACUNARITY
DEFAULT_PERLIN_OCTAVE_COUNT = cvar.DEFAULT_PERLIN_OCTAVE_COUNT
DEFAULT_PERLIN_PERSISTENCE = cvar.DEFAULT_PERLIN_PERSISTENCE
DEFAULT_PERLIN_QUALITY = cvar.DEFAULT_PERLIN_QUALITY
DEFAULT_PERLIN_SEED = cvar.DEFAULT_PERLIN_SEED
PERLIN_MAX_OCTAVE = cvar.PERLIN_MAX_OCTAVE

class Power(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Power_swiginit(self, _module.new_Power())

    def GetSourceModuleCount(self):
        return _module.Power_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Power_GetValue(self, x, y, z)
    __swig_destroy__ = _module.delete_Power

# Register Power in _module:
_module.Power_swigregister(Power)
class RidgedMulti(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.RidgedMulti_swiginit(self, _module.new_RidgedMulti())

    def GetFrequency(self):
        return _module.RidgedMulti_GetFrequency(self)

    def GetLacunarity(self):
        return _module.RidgedMulti_GetLacunarity(self)

    def GetNoiseQuality(self):
        return _module.RidgedMulti_GetNoiseQuality(self)

    def GetOctaveCount(self):
        return _module.RidgedMulti_GetOctaveCount(self)

    def GetSeed(self):
        return _module.RidgedMulti_GetSeed(self)

    def GetSourceModuleCount(self):
        return _module.RidgedMulti_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.RidgedMulti_GetValue(self, x, y, z)

    def SetFrequency(self, frequency):
        return _module.RidgedMulti_SetFrequency(self, frequency)

    def SetLacunarity(self, lacunarity):
        return _module.RidgedMulti_SetLacunarity(self, lacunarity)

    def SetNoiseQuality(self, noiseQuality):
        return _module.RidgedMulti_SetNoiseQuality(self, noiseQuality)

    def SetOctaveCount(self, octaveCount):
        return _module.RidgedMulti_SetOctaveCount(self, octaveCount)

    def SetSeed(self, seed):
        return _module.RidgedMulti_SetSeed(self, seed)
    __swig_destroy__ = _module.delete_RidgedMulti

# Register RidgedMulti in _module:
_module.RidgedMulti_swigregister(RidgedMulti)
DEFAULT_RIDGED_FREQUENCY = cvar.DEFAULT_RIDGED_FREQUENCY
DEFAULT_RIDGED_LACUNARITY = cvar.DEFAULT_RIDGED_LACUNARITY
DEFAULT_RIDGED_OCTAVE_COUNT = cvar.DEFAULT_RIDGED_OCTAVE_COUNT
DEFAULT_RIDGED_QUALITY = cvar.DEFAULT_RIDGED_QUALITY
DEFAULT_RIDGED_SEED = cvar.DEFAULT_RIDGED_SEED
RIDGED_MAX_OCTAVE = cvar.RIDGED_MAX_OCTAVE

class RotatePoint(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.RotatePoint_swiginit(self, _module.new_RotatePoint())

    def GetSourceModuleCount(self):
        return _module.RotatePoint_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.RotatePoint_GetValue(self, x, y, z)

    def GetXAngle(self):
        return _module.RotatePoint_GetXAngle(self)

    def GetYAngle(self):
        return _module.RotatePoint_GetYAngle(self)

    def GetZAngle(self):
        return _module.RotatePoint_GetZAngle(self)

    def SetAngles(self, xAngle, yAngle, zAngle):
        return _module.RotatePoint_SetAngles(self, xAngle, yAngle, zAngle)

    def SetXAngle(self, xAngle):
        return _module.RotatePoint_SetXAngle(self, xAngle)

    def SetYAngle(self, yAngle):
        return _module.RotatePoint_SetYAngle(self, yAngle)

    def SetZAngle(self, zAngle):
        return _module.RotatePoint_SetZAngle(self, zAngle)
    __swig_destroy__ = _module.delete_RotatePoint

# Register RotatePoint in _module:
_module.RotatePoint_swigregister(RotatePoint)
DEFAULT_ROTATE_X = cvar.DEFAULT_ROTATE_X
DEFAULT_ROTATE_Y = cvar.DEFAULT_ROTATE_Y
DEFAULT_ROTATE_Z = cvar.DEFAULT_ROTATE_Z

class ScaleBias(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.ScaleBias_swiginit(self, _module.new_ScaleBias())

    def GetBias(self):
        return _module.ScaleBias_GetBias(self)

    def GetScale(self):
        return _module.ScaleBias_GetScale(self)

    def GetSourceModuleCount(self):
        return _module.ScaleBias_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.ScaleBias_GetValue(self, x, y, z)

    def SetBias(self, bias):
        return _module.ScaleBias_SetBias(self, bias)

    def SetScale(self, scale):
        return _module.ScaleBias_SetScale(self, scale)
    __swig_destroy__ = _module.delete_ScaleBias

# Register ScaleBias in _module:
_module.ScaleBias_swigregister(ScaleBias)
DEFAULT_BIAS = cvar.DEFAULT_BIAS
DEFAULT_SCALE = cvar.DEFAULT_SCALE

class ScalePoint(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.ScalePoint_swiginit(self, _module.new_ScalePoint())

    def GetSourceModuleCount(self):
        return _module.ScalePoint_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.ScalePoint_GetValue(self, x, y, z)

    def GetXScale(self):
        return _module.ScalePoint_GetXScale(self)

    def GetYScale(self):
        return _module.ScalePoint_GetYScale(self)

    def GetZScale(self):
        return _module.ScalePoint_GetZScale(self)

    def SetScale(self, *args):
        return _module.ScalePoint_SetScale(self, *args)

    def SetXScale(self, xScale):
        return _module.ScalePoint_SetXScale(self, xScale)

    def SetYScale(self, yScale):
        return _module.ScalePoint_SetYScale(self, yScale)

    def SetZScale(self, zScale):
        return _module.ScalePoint_SetZScale(self, zScale)
    __swig_destroy__ = _module.delete_ScalePoint

# Register ScalePoint in _module:
_module.ScalePoint_swigregister(ScalePoint)
DEFAULT_SCALE_POINT_X = cvar.DEFAULT_SCALE_POINT_X
DEFAULT_SCALE_POINT_Y = cvar.DEFAULT_SCALE_POINT_Y
DEFAULT_SCALE_POINT_Z = cvar.DEFAULT_SCALE_POINT_Z

class Select(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Select_swiginit(self, _module.new_Select())

    def GetControlModule(self):
        return _module.Select_GetControlModule(self)

    def GetEdgeFalloff(self):
        return _module.Select_GetEdgeFalloff(self)

    def GetLowerBound(self):
        return _module.Select_GetLowerBound(self)

    def GetSourceModuleCount(self):
        return _module.Select_GetSourceModuleCount(self)

    def GetUpperBound(self):
        return _module.Select_GetUpperBound(self)

    def GetValue(self, x, y, z):
        return _module.Select_GetValue(self, x, y, z)

    def SetBounds(self, lowerBound, upperBound):
        return _module.Select_SetBounds(self, lowerBound, upperBound)

    def SetControlModule(self, controlModule):
        return _module.Select_SetControlModule(self, controlModule)

    def SetEdgeFalloff(self, edgeFalloff):
        return _module.Select_SetEdgeFalloff(self, edgeFalloff)
    __swig_destroy__ = _module.delete_Select

# Register Select in _module:
_module.Select_swigregister(Select)
DEFAULT_SELECT_EDGE_FALLOFF = cvar.DEFAULT_SELECT_EDGE_FALLOFF
DEFAULT_SELECT_LOWER_BOUND = cvar.DEFAULT_SELECT_LOWER_BOUND
DEFAULT_SELECT_UPPER_BOUND = cvar.DEFAULT_SELECT_UPPER_BOUND

class Spheres(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Spheres_swiginit(self, _module.new_Spheres())

    def GetFrequency(self):
        return _module.Spheres_GetFrequency(self)

    def GetSourceModuleCount(self):
        return _module.Spheres_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Spheres_GetValue(self, x, y, z)

    def SetFrequency(self, frequency):
        return _module.Spheres_SetFrequency(self, frequency)
    __swig_destroy__ = _module.delete_Spheres

# Register Spheres in _module:
_module.Spheres_swigregister(Spheres)
DEFAULT_SPHERES_FREQUENCY = cvar.DEFAULT_SPHERES_FREQUENCY

class Terrace(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Terrace_swiginit(self, _module.new_Terrace())
    __swig_destroy__ = _module.delete_Terrace

    def AddControlPoint(self, value):
        return _module.Terrace_AddControlPoint(self, value)

    def ClearAllControlPoints(self):
        return _module.Terrace_ClearAllControlPoints(self)

    def GetControlPointArray(self):
        return _module.Terrace_GetControlPointArray(self)

    def GetControlPointCount(self):
        return _module.Terrace_GetControlPointCount(self)

    def GetSourceModuleCount(self):
        return _module.Terrace_GetSourceModuleCount(self)

    def InvertTerraces(self, invert=True):
        return _module.Terrace_InvertTerraces(self, invert)

    def IsTerracesInverted(self):
        return _module.Terrace_IsTerracesInverted(self)

    def GetValue(self, x, y, z):
        return _module.Terrace_GetValue(self, x, y, z)

    def MakeControlPoints(self, controlPointCount):
        return _module.Terrace_MakeControlPoints(self, controlPointCount)

# Register Terrace in _module:
_module.Terrace_swigregister(Terrace)
class TranslatePoint(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.TranslatePoint_swiginit(self, _module.new_TranslatePoint())

    def GetSourceModuleCount(self):
        return _module.TranslatePoint_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.TranslatePoint_GetValue(self, x, y, z)

    def GetXTranslation(self):
        return _module.TranslatePoint_GetXTranslation(self)

    def GetYTranslation(self):
        return _module.TranslatePoint_GetYTranslation(self)

    def GetZTranslation(self):
        return _module.TranslatePoint_GetZTranslation(self)

    def SetTranslation(self, *args):
        return _module.TranslatePoint_SetTranslation(self, *args)

    def SetXTranslation(self, xTranslation):
        return _module.TranslatePoint_SetXTranslation(self, xTranslation)

    def SetYTranslation(self, yTranslation):
        return _module.TranslatePoint_SetYTranslation(self, yTranslation)

    def SetZTranslation(self, zTranslation):
        return _module.TranslatePoint_SetZTranslation(self, zTranslation)
    __swig_destroy__ = _module.delete_TranslatePoint

# Register TranslatePoint in _module:
_module.TranslatePoint_swigregister(TranslatePoint)
DEFAULT_TRANSLATE_POINT_X = cvar.DEFAULT_TRANSLATE_POINT_X
DEFAULT_TRANSLATE_POINT_Y = cvar.DEFAULT_TRANSLATE_POINT_Y
DEFAULT_TRANSLATE_POINT_Z = cvar.DEFAULT_TRANSLATE_POINT_Z

class Turbulence(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Turbulence_swiginit(self, _module.new_Turbulence())

    def GetFrequency(self):
        return _module.Turbulence_GetFrequency(self)

    def GetPower(self):
        return _module.Turbulence_GetPower(self)

    def GetRoughnessCount(self):
        return _module.Turbulence_GetRoughnessCount(self)

    def GetSeed(self):
        return _module.Turbulence_GetSeed(self)

    def GetSourceModuleCount(self):
        return _module.Turbulence_GetSourceModuleCount(self)

    def GetValue(self, x, y, z):
        return _module.Turbulence_GetValue(self, x, y, z)

    def SetFrequency(self, frequency):
        return _module.Turbulence_SetFrequency(self, frequency)

    def SetPower(self, power):
        return _module.Turbulence_SetPower(self, power)

    def SetRoughness(self, roughness):
        return _module.Turbulence_SetRoughness(self, roughness)

    def SetSeed(self, seed):
        return _module.Turbulence_SetSeed(self, seed)
    __swig_destroy__ = _module.delete_Turbulence

# Register Turbulence in _module:
_module.Turbulence_swigregister(Turbulence)
DEFAULT_TURBULENCE_FREQUENCY = cvar.DEFAULT_TURBULENCE_FREQUENCY
DEFAULT_TURBULENCE_POWER = cvar.DEFAULT_TURBULENCE_POWER
DEFAULT_TURBULENCE_ROUGHNESS = cvar.DEFAULT_TURBULENCE_ROUGHNESS
DEFAULT_TURBULENCE_SEED = cvar.DEFAULT_TURBULENCE_SEED

class Voronoi(Module):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _module.Voronoi_swiginit(self, _module.new_Voronoi())

    def EnableDistance(self, enable=True):
        return _module.Voronoi_EnableDistance(self, enable)

    def GetDisplacement(self):
        return _module.Voronoi_GetDisplacement(self)

    def GetFrequency(self):
        return _module.Voronoi_GetFrequency(self)

    def GetSourceModuleCount(self):
        return _module.Voronoi_GetSourceModuleCount(self)

    def GetSeed(self):
        return _module.Voronoi_GetSeed(self)

    def IsDistanceEnabled(self):
        return _module.Voronoi_IsDistanceEnabled(self)

    def GetValue(self, x, y, z):
        return _module.Voronoi_GetValue(self, x, y, z)

    def SetDisplacement(self, displacement):
        return _module.Voronoi_SetDisplacement(self, displacement)

    def SetFrequency(self, frequency):
        return _module.Voronoi_SetFrequency(self, frequency)

    def SetSeed(self, seed):
        return _module.Voronoi_SetSeed(self, seed)
    __swig_destroy__ = _module.delete_Voronoi

# Register Voronoi in _module:
_module.Voronoi_swigregister(Voronoi)
DEFAULT_VORONOI_DISPLACEMENT = cvar.DEFAULT_VORONOI_DISPLACEMENT
DEFAULT_VORONOI_FREQUENCY = cvar.DEFAULT_VORONOI_FREQUENCY
DEFAULT_VORONOI_SEED = cvar.DEFAULT_VORONOI_SEED


