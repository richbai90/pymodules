# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _model
else:
    import _model

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def cos(x):
    return _model.cos(x)

def sin(x):
    return _model.sin(x)

def tan(x):
    return _model.tan(x)

def acos(x):
    return _model.acos(x)

def asin(x):
    return _model.asin(x)

def atan(x):
    return _model.atan(x)

def atan2(y, x):
    return _model.atan2(y, x)

def cosh(x):
    return _model.cosh(x)

def sinh(x):
    return _model.sinh(x)

def tanh(x):
    return _model.tanh(x)

def exp(x):
    return _model.exp(x)

def log(x):
    return _model.log(x)

def log10(x):
    return _model.log10(x)

def pow(x, y):
    return _model.pow(x, y)

def sqrt(x):
    return _model.sqrt(x)

def ceil(x):
    return _model.ceil(x)

def floor(x):
    return _model.floor(x)

def fmod(x, y):
    return _model.fmod(x, y)

def fabs(x):
    return _model.fabs(x)
M_E = _model.M_E
M_LOG2E = _model.M_LOG2E
M_LOG10E = _model.M_LOG10E
M_LN2 = _model.M_LN2
M_LN10 = _model.M_LN10
M_PI = _model.M_PI
M_PI_2 = _model.M_PI_2
M_PI_4 = _model.M_PI_4
M_1_PI = _model.M_1_PI
M_2_PI = _model.M_2_PI
M_2_SQRTPI = _model.M_2_SQRTPI
M_SQRT2 = _model.M_SQRT2
M_SQRT1_2 = _model.M_SQRT1_2
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _model.delete_SwigPyIterator

    def value(self):
        return _model.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _model.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _model.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _model.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _model.SwigPyIterator_equal(self, x)

    def copy(self):
        return _model.SwigPyIterator_copy(self)

    def next(self):
        return _model.SwigPyIterator_next(self)

    def __next__(self):
        return _model.SwigPyIterator___next__(self)

    def previous(self):
        return _model.SwigPyIterator_previous(self)

    def advance(self, n):
        return _model.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _model.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _model.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _model.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _model.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _model.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _model.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _model:
_model.SwigPyIterator_swigregister(SwigPyIterator)

def ClampValue(value, lowerBound, upperBound):
    return _model.ClampValue(value, lowerBound, upperBound)
class Cylinder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _model.Cylinder_swiginit(self, _model.new_Cylinder(*args))

    def GetModule(self):
        return _model.Cylinder_GetModule(self)

    def GetValue(self, angle, height):
        return _model.Cylinder_GetValue(self, angle, height)

    def SetModule(self, module):
        return _model.Cylinder_SetModule(self, module)
    __swig_destroy__ = _model.delete_Cylinder

# Register Cylinder in _model:
_model.Cylinder_swigregister(Cylinder)
class Line(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _model.Line_swiginit(self, _model.new_Line(*args))

    def GetAttenuate(self):
        return _model.Line_GetAttenuate(self)

    def GetModule(self):
        return _model.Line_GetModule(self)

    def GetValue(self, p):
        return _model.Line_GetValue(self, p)

    def SetAttenuate(self, att):
        return _model.Line_SetAttenuate(self, att)

    def SetEndPoint(self, x, y, z):
        return _model.Line_SetEndPoint(self, x, y, z)

    def SetModule(self, module):
        return _model.Line_SetModule(self, module)

    def SetStartPoint(self, x, y, z):
        return _model.Line_SetStartPoint(self, x, y, z)
    __swig_destroy__ = _model.delete_Line

# Register Line in _model:
_model.Line_swigregister(Line)
class Plane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _model.Plane_swiginit(self, _model.new_Plane(*args))

    def GetModule(self):
        return _model.Plane_GetModule(self)

    def GetValue(self, x, z):
        return _model.Plane_GetValue(self, x, z)

    def SetModule(self, module):
        return _model.Plane_SetModule(self, module)
    __swig_destroy__ = _model.delete_Plane

# Register Plane in _model:
_model.Plane_swigregister(Plane)
class Sphere(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _model.Sphere_swiginit(self, _model.new_Sphere(*args))

    def GetModule(self):
        return _model.Sphere_GetModule(self)

    def GetValue(self, lat, lon):
        return _model.Sphere_GetValue(self, lat, lon)

    def SetModule(self, module):
        return _model.Sphere_SetModule(self, module)
    __swig_destroy__ = _model.delete_Sphere

# Register Sphere in _model:
_model.Sphere_swigregister(Sphere)

